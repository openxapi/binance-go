/*
Binance Wallet API

Testing TravelRuleAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package wallet

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/openxapi/binance-go/wallet"
)

func Test_wallet_TravelRuleAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TravelRuleAPIService WalletCreateLocalentityBrokerWithdrawApplyV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TravelRuleAPI.WalletCreateLocalentityBrokerWithdrawApplyV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TravelRuleAPIService WalletCreateLocalentityWithdrawApplyV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TravelRuleAPI.WalletCreateLocalentityWithdrawApplyV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TravelRuleAPIService WalletGetLocalentityDepositHistoryV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TravelRuleAPI.WalletGetLocalentityDepositHistoryV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TravelRuleAPIService WalletGetLocalentityVaspV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TravelRuleAPI.WalletGetLocalentityVaspV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TravelRuleAPIService WalletGetLocalentityWithdrawHistoryV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TravelRuleAPI.WalletGetLocalentityWithdrawHistoryV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TravelRuleAPIService WalletGetLocalentityWithdrawHistoryV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TravelRuleAPI.WalletGetLocalentityWithdrawHistoryV2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TravelRuleAPIService WalletUpdateLocalentityBrokerDepositProvideInfoV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TravelRuleAPI.WalletUpdateLocalentityBrokerDepositProvideInfoV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TravelRuleAPIService WalletUpdateLocalentityDepositProvideInfoV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TravelRuleAPI.WalletUpdateLocalentityDepositProvideInfoV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

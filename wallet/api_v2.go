/*
Binance Wallet API

OpenAPI specification for Binance exchange - Wallet API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package wallet

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// V2APIService V2API service
type V2APIService service

type V2APIWalletGetLocalentityWithdrawHistoryV2Request struct {
	ctx context.Context
	ApiService *V2APIService
	timestamp *int64
	trId *string
	txId *string
	withdrawOrderId *string
	network *string
	coin *string
	travelRuleStatus *int32
	offset *int32
	limit *int32
	startTime *int64
	endTime *int64
	recvWindow *int64
}

func (r V2APIWalletGetLocalentityWithdrawHistoryV2Request) Timestamp(timestamp int64) V2APIWalletGetLocalentityWithdrawHistoryV2Request {
	r.timestamp = &timestamp
	return r
}

// Comma(,) separated list of travel rule record Ids.
func (r V2APIWalletGetLocalentityWithdrawHistoryV2Request) TrId(trId string) V2APIWalletGetLocalentityWithdrawHistoryV2Request {
	r.trId = &trId
	return r
}

// Comma(,) separated list of transaction Ids.
func (r V2APIWalletGetLocalentityWithdrawHistoryV2Request) TxId(txId string) V2APIWalletGetLocalentityWithdrawHistoryV2Request {
	r.txId = &txId
	return r
}

// Withdraw ID defined by the client (i.e. client&amp;#39;s internal withdrawID).
func (r V2APIWalletGetLocalentityWithdrawHistoryV2Request) WithdrawOrderId(withdrawOrderId string) V2APIWalletGetLocalentityWithdrawHistoryV2Request {
	r.withdrawOrderId = &withdrawOrderId
	return r
}

func (r V2APIWalletGetLocalentityWithdrawHistoryV2Request) Network(network string) V2APIWalletGetLocalentityWithdrawHistoryV2Request {
	r.network = &network
	return r
}

func (r V2APIWalletGetLocalentityWithdrawHistoryV2Request) Coin(coin string) V2APIWalletGetLocalentityWithdrawHistoryV2Request {
	r.coin = &coin
	return r
}

// 0:Completed,1:Pending,2:Failed
func (r V2APIWalletGetLocalentityWithdrawHistoryV2Request) TravelRuleStatus(travelRuleStatus int32) V2APIWalletGetLocalentityWithdrawHistoryV2Request {
	r.travelRuleStatus = &travelRuleStatus
	return r
}

// Default: 0
func (r V2APIWalletGetLocalentityWithdrawHistoryV2Request) Offset(offset int32) V2APIWalletGetLocalentityWithdrawHistoryV2Request {
	r.offset = &offset
	return r
}

// Default: 1000, Max: 1000
func (r V2APIWalletGetLocalentityWithdrawHistoryV2Request) Limit(limit int32) V2APIWalletGetLocalentityWithdrawHistoryV2Request {
	r.limit = &limit
	return r
}

// Default: 90 days from current timestamp
func (r V2APIWalletGetLocalentityWithdrawHistoryV2Request) StartTime(startTime int64) V2APIWalletGetLocalentityWithdrawHistoryV2Request {
	r.startTime = &startTime
	return r
}

// Default: present timestamp
func (r V2APIWalletGetLocalentityWithdrawHistoryV2Request) EndTime(endTime int64) V2APIWalletGetLocalentityWithdrawHistoryV2Request {
	r.endTime = &endTime
	return r
}

func (r V2APIWalletGetLocalentityWithdrawHistoryV2Request) RecvWindow(recvWindow int64) V2APIWalletGetLocalentityWithdrawHistoryV2Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V2APIWalletGetLocalentityWithdrawHistoryV2Request) Execute() ([]WalletGetLocalentityWithdrawHistoryV2RespItem, *http.Response, error) {
	return r.ApiService.WalletGetLocalentityWithdrawHistoryV2Execute(r)
}

/*
WalletGetLocalentityWithdrawHistoryV2 Withdraw History V2 (for local entities that require travel rule) (supporting network) (USER_DATA)

Fetch withdraw history for local entities that required travel rule.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V2APIWalletGetLocalentityWithdrawHistoryV2Request
*/
func (a *V2APIService) WalletGetLocalentityWithdrawHistoryV2(ctx context.Context) V2APIWalletGetLocalentityWithdrawHistoryV2Request {
	return V2APIWalletGetLocalentityWithdrawHistoryV2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WalletGetLocalentityWithdrawHistoryV2RespItem
func (a *V2APIService) WalletGetLocalentityWithdrawHistoryV2Execute(r V2APIWalletGetLocalentityWithdrawHistoryV2Request) ([]WalletGetLocalentityWithdrawHistoryV2RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WalletGetLocalentityWithdrawHistoryV2RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V2APIService.WalletGetLocalentityWithdrawHistoryV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v2/localentity/withdraw/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.trId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trId", r.trId, "form", "")
	} else {
		var defaultValue string = ""
		r.trId = &defaultValue
	}
	if r.txId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "txId", r.txId, "form", "")
	} else {
		var defaultValue string = ""
		r.txId = &defaultValue
	}
	if r.withdrawOrderId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withdrawOrderId", r.withdrawOrderId, "form", "")
	} else {
		var defaultValue string = ""
		r.withdrawOrderId = &defaultValue
	}
	if r.network != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "network", r.network, "form", "")
	} else {
		var defaultValue string = ""
		r.network = &defaultValue
	}
	if r.coin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coin", r.coin, "form", "")
	} else {
		var defaultValue string = ""
		r.coin = &defaultValue
	}
	if r.travelRuleStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "travelRuleStatus", r.travelRuleStatus, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 1000
		r.limit = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
Binance Wallet API

OpenAPI specification for Binance exchange - Wallet API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package wallet

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// V1APIService V1API service
type V1APIService service

type V1APIWalletCreateAccountDisableFastWithdrawSwitchV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	timestamp *int64
	recvWindow *int64
}

func (r V1APIWalletCreateAccountDisableFastWithdrawSwitchV1Request) Timestamp(timestamp int64) V1APIWalletCreateAccountDisableFastWithdrawSwitchV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletCreateAccountDisableFastWithdrawSwitchV1Request) RecvWindow(recvWindow int64) V1APIWalletCreateAccountDisableFastWithdrawSwitchV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletCreateAccountDisableFastWithdrawSwitchV1Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.WalletCreateAccountDisableFastWithdrawSwitchV1Execute(r)
}

/*
WalletCreateAccountDisableFastWithdrawSwitchV1 Disable Fast Withdraw Switch (USER_DATA)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletCreateAccountDisableFastWithdrawSwitchV1Request
*/
func (a *V1APIService) WalletCreateAccountDisableFastWithdrawSwitchV1(ctx context.Context) V1APIWalletCreateAccountDisableFastWithdrawSwitchV1Request {
	return V1APIWalletCreateAccountDisableFastWithdrawSwitchV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *V1APIService) WalletCreateAccountDisableFastWithdrawSwitchV1Execute(r V1APIWalletCreateAccountDisableFastWithdrawSwitchV1Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletCreateAccountDisableFastWithdrawSwitchV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/account/disableFastWithdrawSwitch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletCreateAccountEnableFastWithdrawSwitchV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	timestamp *int64
	recvWindow *int64
}

func (r V1APIWalletCreateAccountEnableFastWithdrawSwitchV1Request) Timestamp(timestamp int64) V1APIWalletCreateAccountEnableFastWithdrawSwitchV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletCreateAccountEnableFastWithdrawSwitchV1Request) RecvWindow(recvWindow int64) V1APIWalletCreateAccountEnableFastWithdrawSwitchV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletCreateAccountEnableFastWithdrawSwitchV1Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.WalletCreateAccountEnableFastWithdrawSwitchV1Execute(r)
}

/*
WalletCreateAccountEnableFastWithdrawSwitchV1 Enable Fast Withdraw Switch (USER_DATA)

Enable Fast Withdraw Switch (USER_DATA)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletCreateAccountEnableFastWithdrawSwitchV1Request
*/
func (a *V1APIService) WalletCreateAccountEnableFastWithdrawSwitchV1(ctx context.Context) V1APIWalletCreateAccountEnableFastWithdrawSwitchV1Request {
	return V1APIWalletCreateAccountEnableFastWithdrawSwitchV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *V1APIService) WalletCreateAccountEnableFastWithdrawSwitchV1Execute(r V1APIWalletCreateAccountEnableFastWithdrawSwitchV1Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletCreateAccountEnableFastWithdrawSwitchV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/account/enableFastWithdrawSwitch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletCreateAssetDustBtcV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	timestamp *int64
	accountType *string
	recvWindow *int64
}

func (r V1APIWalletCreateAssetDustBtcV1Request) Timestamp(timestamp int64) V1APIWalletCreateAssetDustBtcV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletCreateAssetDustBtcV1Request) AccountType(accountType string) V1APIWalletCreateAssetDustBtcV1Request {
	r.accountType = &accountType
	return r
}

func (r V1APIWalletCreateAssetDustBtcV1Request) RecvWindow(recvWindow int64) V1APIWalletCreateAssetDustBtcV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletCreateAssetDustBtcV1Request) Execute() (*WalletCreateAssetDustBtcV1Resp, *http.Response, error) {
	return r.ApiService.WalletCreateAssetDustBtcV1Execute(r)
}

/*
WalletCreateAssetDustBtcV1 Get Assets That Can Be Converted Into BNB (USER_DATA)

Get Assets That Can Be Converted Into BNB

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletCreateAssetDustBtcV1Request
*/
func (a *V1APIService) WalletCreateAssetDustBtcV1(ctx context.Context) V1APIWalletCreateAssetDustBtcV1Request {
	return V1APIWalletCreateAssetDustBtcV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletCreateAssetDustBtcV1Resp
func (a *V1APIService) WalletCreateAssetDustBtcV1Execute(r V1APIWalletCreateAssetDustBtcV1Request) (*WalletCreateAssetDustBtcV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletCreateAssetDustBtcV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletCreateAssetDustBtcV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/asset/dust-btc"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accountType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "accountType", r.accountType, "", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletCreateAssetDustV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	asset *[]string
	timestamp *int64
	accountType *string
	recvWindow *int64
}

func (r V1APIWalletCreateAssetDustV1Request) Asset(asset []string) V1APIWalletCreateAssetDustV1Request {
	r.asset = &asset
	return r
}

func (r V1APIWalletCreateAssetDustV1Request) Timestamp(timestamp int64) V1APIWalletCreateAssetDustV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletCreateAssetDustV1Request) AccountType(accountType string) V1APIWalletCreateAssetDustV1Request {
	r.accountType = &accountType
	return r
}

func (r V1APIWalletCreateAssetDustV1Request) RecvWindow(recvWindow int64) V1APIWalletCreateAssetDustV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletCreateAssetDustV1Request) Execute() (*WalletCreateAssetDustV1Resp, *http.Response, error) {
	return r.ApiService.WalletCreateAssetDustV1Execute(r)
}

/*
WalletCreateAssetDustV1 Dust Transfer (USER_DATA)

Convert dust assets to BNB.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletCreateAssetDustV1Request
*/
func (a *V1APIService) WalletCreateAssetDustV1(ctx context.Context) V1APIWalletCreateAssetDustV1Request {
	return V1APIWalletCreateAssetDustV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletCreateAssetDustV1Resp
func (a *V1APIService) WalletCreateAssetDustV1Execute(r V1APIWalletCreateAssetDustV1Request) (*WalletCreateAssetDustV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletCreateAssetDustV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletCreateAssetDustV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/asset/dust"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.asset == nil {
		return localVarReturnValue, nil, reportError("asset is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accountType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "accountType", r.accountType, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "asset", r.asset, "", "csv")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletCreateAssetGetFundingAssetV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	timestamp *int64
	asset *string
	needBtcValuation *string
	recvWindow *int64
}

func (r V1APIWalletCreateAssetGetFundingAssetV1Request) Timestamp(timestamp int64) V1APIWalletCreateAssetGetFundingAssetV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletCreateAssetGetFundingAssetV1Request) Asset(asset string) V1APIWalletCreateAssetGetFundingAssetV1Request {
	r.asset = &asset
	return r
}

func (r V1APIWalletCreateAssetGetFundingAssetV1Request) NeedBtcValuation(needBtcValuation string) V1APIWalletCreateAssetGetFundingAssetV1Request {
	r.needBtcValuation = &needBtcValuation
	return r
}

func (r V1APIWalletCreateAssetGetFundingAssetV1Request) RecvWindow(recvWindow int64) V1APIWalletCreateAssetGetFundingAssetV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletCreateAssetGetFundingAssetV1Request) Execute() ([]WalletCreateAssetGetFundingAssetV1RespItem, *http.Response, error) {
	return r.ApiService.WalletCreateAssetGetFundingAssetV1Execute(r)
}

/*
WalletCreateAssetGetFundingAssetV1 Funding Wallet (USER_DATA)

Query Funding Wallet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletCreateAssetGetFundingAssetV1Request
*/
func (a *V1APIService) WalletCreateAssetGetFundingAssetV1(ctx context.Context) V1APIWalletCreateAssetGetFundingAssetV1Request {
	return V1APIWalletCreateAssetGetFundingAssetV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WalletCreateAssetGetFundingAssetV1RespItem
func (a *V1APIService) WalletCreateAssetGetFundingAssetV1Execute(r V1APIWalletCreateAssetGetFundingAssetV1Request) ([]WalletCreateAssetGetFundingAssetV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WalletCreateAssetGetFundingAssetV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletCreateAssetGetFundingAssetV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/asset/get-funding-asset"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.asset != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "asset", r.asset, "", "")
	}
	if r.needBtcValuation != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "needBtcValuation", r.needBtcValuation, "", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletCreateAssetTransferV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	amount *string
	asset *string
	timestamp *int64
	type_ *string
	fromSymbol *string
	recvWindow *int64
	toSymbol *string
}

func (r V1APIWalletCreateAssetTransferV1Request) Amount(amount string) V1APIWalletCreateAssetTransferV1Request {
	r.amount = &amount
	return r
}

func (r V1APIWalletCreateAssetTransferV1Request) Asset(asset string) V1APIWalletCreateAssetTransferV1Request {
	r.asset = &asset
	return r
}

func (r V1APIWalletCreateAssetTransferV1Request) Timestamp(timestamp int64) V1APIWalletCreateAssetTransferV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletCreateAssetTransferV1Request) Type_(type_ string) V1APIWalletCreateAssetTransferV1Request {
	r.type_ = &type_
	return r
}

func (r V1APIWalletCreateAssetTransferV1Request) FromSymbol(fromSymbol string) V1APIWalletCreateAssetTransferV1Request {
	r.fromSymbol = &fromSymbol
	return r
}

func (r V1APIWalletCreateAssetTransferV1Request) RecvWindow(recvWindow int64) V1APIWalletCreateAssetTransferV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletCreateAssetTransferV1Request) ToSymbol(toSymbol string) V1APIWalletCreateAssetTransferV1Request {
	r.toSymbol = &toSymbol
	return r
}

func (r V1APIWalletCreateAssetTransferV1Request) Execute() (*WalletCreateAssetTransferV1Resp, *http.Response, error) {
	return r.ApiService.WalletCreateAssetTransferV1Execute(r)
}

/*
WalletCreateAssetTransferV1 User Universal Transfer (USER_DATA)

user universal transfer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletCreateAssetTransferV1Request
*/
func (a *V1APIService) WalletCreateAssetTransferV1(ctx context.Context) V1APIWalletCreateAssetTransferV1Request {
	return V1APIWalletCreateAssetTransferV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletCreateAssetTransferV1Resp
func (a *V1APIService) WalletCreateAssetTransferV1Execute(r V1APIWalletCreateAssetTransferV1Request) (*WalletCreateAssetTransferV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletCreateAssetTransferV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletCreateAssetTransferV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/asset/transfer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.amount == nil {
		return localVarReturnValue, nil, reportError("amount is required and must be specified")
	}
	if r.asset == nil {
		return localVarReturnValue, nil, reportError("asset is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}
	if r.type_ == nil {
		return localVarReturnValue, nil, reportError("type_ is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "amount", r.amount, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "asset", r.asset, "", "")
	if r.fromSymbol != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "fromSymbol", r.fromSymbol, "", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.toSymbol != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "toSymbol", r.toSymbol, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "type", r.type_, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletCreateBnbBurnV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	timestamp *int64
	interestBNBBurn *string
	recvWindow *int64
	spotBNBBurn *string
}

func (r V1APIWalletCreateBnbBurnV1Request) Timestamp(timestamp int64) V1APIWalletCreateBnbBurnV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletCreateBnbBurnV1Request) InterestBNBBurn(interestBNBBurn string) V1APIWalletCreateBnbBurnV1Request {
	r.interestBNBBurn = &interestBNBBurn
	return r
}

func (r V1APIWalletCreateBnbBurnV1Request) RecvWindow(recvWindow int64) V1APIWalletCreateBnbBurnV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletCreateBnbBurnV1Request) SpotBNBBurn(spotBNBBurn string) V1APIWalletCreateBnbBurnV1Request {
	r.spotBNBBurn = &spotBNBBurn
	return r
}

func (r V1APIWalletCreateBnbBurnV1Request) Execute() (*WalletCreateBnbBurnV1Resp, *http.Response, error) {
	return r.ApiService.WalletCreateBnbBurnV1Execute(r)
}

/*
WalletCreateBnbBurnV1 Toggle BNB Burn On Spot Trade And Margin Interest (USER_DATA)

Toggle BNB Burn On Spot Trade And Margin Interest

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletCreateBnbBurnV1Request
*/
func (a *V1APIService) WalletCreateBnbBurnV1(ctx context.Context) V1APIWalletCreateBnbBurnV1Request {
	return V1APIWalletCreateBnbBurnV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletCreateBnbBurnV1Resp
func (a *V1APIService) WalletCreateBnbBurnV1Execute(r V1APIWalletCreateBnbBurnV1Request) (*WalletCreateBnbBurnV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletCreateBnbBurnV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletCreateBnbBurnV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/bnbBurn"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.interestBNBBurn != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "interestBNBBurn", r.interestBNBBurn, "", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	if r.spotBNBBurn != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "spotBNBBurn", r.spotBNBBurn, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletCreateCapitalDepositCreditApplyV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	depositId *int64
	subAccountId *int64
	subUserId *int64
	txId *string
}

func (r V1APIWalletCreateCapitalDepositCreditApplyV1Request) DepositId(depositId int64) V1APIWalletCreateCapitalDepositCreditApplyV1Request {
	r.depositId = &depositId
	return r
}

func (r V1APIWalletCreateCapitalDepositCreditApplyV1Request) SubAccountId(subAccountId int64) V1APIWalletCreateCapitalDepositCreditApplyV1Request {
	r.subAccountId = &subAccountId
	return r
}

func (r V1APIWalletCreateCapitalDepositCreditApplyV1Request) SubUserId(subUserId int64) V1APIWalletCreateCapitalDepositCreditApplyV1Request {
	r.subUserId = &subUserId
	return r
}

func (r V1APIWalletCreateCapitalDepositCreditApplyV1Request) TxId(txId string) V1APIWalletCreateCapitalDepositCreditApplyV1Request {
	r.txId = &txId
	return r
}

func (r V1APIWalletCreateCapitalDepositCreditApplyV1Request) Execute() (*WalletCreateCapitalDepositCreditApplyV1Resp, *http.Response, error) {
	return r.ApiService.WalletCreateCapitalDepositCreditApplyV1Execute(r)
}

/*
WalletCreateCapitalDepositCreditApplyV1 One click arrival deposit apply (for expired address deposit) (USER_DATA)

Apply deposit credit for expired address (One click arrival)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletCreateCapitalDepositCreditApplyV1Request
*/
func (a *V1APIService) WalletCreateCapitalDepositCreditApplyV1(ctx context.Context) V1APIWalletCreateCapitalDepositCreditApplyV1Request {
	return V1APIWalletCreateCapitalDepositCreditApplyV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletCreateCapitalDepositCreditApplyV1Resp
func (a *V1APIService) WalletCreateCapitalDepositCreditApplyV1Execute(r V1APIWalletCreateCapitalDepositCreditApplyV1Request) (*WalletCreateCapitalDepositCreditApplyV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletCreateCapitalDepositCreditApplyV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletCreateCapitalDepositCreditApplyV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/capital/deposit/credit-apply"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.depositId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "depositId", r.depositId, "", "")
	}
	if r.subAccountId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "subAccountId", r.subAccountId, "", "")
	}
	if r.subUserId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "subUserId", r.subUserId, "", "")
	}
	if r.txId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "txId", r.txId, "", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletCreateCapitalWithdrawApplyV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	address *string
	amount *string
	coin *string
	timestamp *int64
	addressTag *string
	name *string
	network *string
	recvWindow *int64
	transactionFeeFlag *bool
	walletType *int32
	withdrawOrderId *string
}

func (r V1APIWalletCreateCapitalWithdrawApplyV1Request) Address(address string) V1APIWalletCreateCapitalWithdrawApplyV1Request {
	r.address = &address
	return r
}

func (r V1APIWalletCreateCapitalWithdrawApplyV1Request) Amount(amount string) V1APIWalletCreateCapitalWithdrawApplyV1Request {
	r.amount = &amount
	return r
}

func (r V1APIWalletCreateCapitalWithdrawApplyV1Request) Coin(coin string) V1APIWalletCreateCapitalWithdrawApplyV1Request {
	r.coin = &coin
	return r
}

func (r V1APIWalletCreateCapitalWithdrawApplyV1Request) Timestamp(timestamp int64) V1APIWalletCreateCapitalWithdrawApplyV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletCreateCapitalWithdrawApplyV1Request) AddressTag(addressTag string) V1APIWalletCreateCapitalWithdrawApplyV1Request {
	r.addressTag = &addressTag
	return r
}

func (r V1APIWalletCreateCapitalWithdrawApplyV1Request) Name(name string) V1APIWalletCreateCapitalWithdrawApplyV1Request {
	r.name = &name
	return r
}

func (r V1APIWalletCreateCapitalWithdrawApplyV1Request) Network(network string) V1APIWalletCreateCapitalWithdrawApplyV1Request {
	r.network = &network
	return r
}

func (r V1APIWalletCreateCapitalWithdrawApplyV1Request) RecvWindow(recvWindow int64) V1APIWalletCreateCapitalWithdrawApplyV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletCreateCapitalWithdrawApplyV1Request) TransactionFeeFlag(transactionFeeFlag bool) V1APIWalletCreateCapitalWithdrawApplyV1Request {
	r.transactionFeeFlag = &transactionFeeFlag
	return r
}

func (r V1APIWalletCreateCapitalWithdrawApplyV1Request) WalletType(walletType int32) V1APIWalletCreateCapitalWithdrawApplyV1Request {
	r.walletType = &walletType
	return r
}

func (r V1APIWalletCreateCapitalWithdrawApplyV1Request) WithdrawOrderId(withdrawOrderId string) V1APIWalletCreateCapitalWithdrawApplyV1Request {
	r.withdrawOrderId = &withdrawOrderId
	return r
}

func (r V1APIWalletCreateCapitalWithdrawApplyV1Request) Execute() (*WalletCreateCapitalWithdrawApplyV1Resp, *http.Response, error) {
	return r.ApiService.WalletCreateCapitalWithdrawApplyV1Execute(r)
}

/*
WalletCreateCapitalWithdrawApplyV1 Withdraw(USER_DATA)

Submit a withdraw request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletCreateCapitalWithdrawApplyV1Request
*/
func (a *V1APIService) WalletCreateCapitalWithdrawApplyV1(ctx context.Context) V1APIWalletCreateCapitalWithdrawApplyV1Request {
	return V1APIWalletCreateCapitalWithdrawApplyV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletCreateCapitalWithdrawApplyV1Resp
func (a *V1APIService) WalletCreateCapitalWithdrawApplyV1Execute(r V1APIWalletCreateCapitalWithdrawApplyV1Request) (*WalletCreateCapitalWithdrawApplyV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletCreateCapitalWithdrawApplyV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletCreateCapitalWithdrawApplyV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/capital/withdraw/apply"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.address == nil {
		return localVarReturnValue, nil, reportError("address is required and must be specified")
	}
	if r.amount == nil {
		return localVarReturnValue, nil, reportError("amount is required and must be specified")
	}
	if r.coin == nil {
		return localVarReturnValue, nil, reportError("coin is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "address", r.address, "", "")
	if r.addressTag != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "addressTag", r.addressTag, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "amount", r.amount, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "coin", r.coin, "", "")
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "name", r.name, "", "")
	}
	if r.network != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "network", r.network, "", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.transactionFeeFlag != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "transactionFeeFlag", r.transactionFeeFlag, "", "")
	}
	if r.walletType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "walletType", r.walletType, "", "")
	}
	if r.withdrawOrderId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "withdrawOrderId", r.withdrawOrderId, "", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	address *string
	amount *map[string]interface{}
	coin *string
	originatorPii *string
	questionnaire *string
	signature *string
	subAccountId *string
	timestamp *int64
	withdrawOrderId *string
	addressName *string
	addressTag *string
	network *string
	transactionFeeFlag *bool
	walletType *int32
}

func (r V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request) Address(address string) V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.address = &address
	return r
}

func (r V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request) Amount(amount map[string]interface{}) V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.amount = &amount
	return r
}

func (r V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request) Coin(coin string) V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.coin = &coin
	return r
}

func (r V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request) OriginatorPii(originatorPii string) V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.originatorPii = &originatorPii
	return r
}

func (r V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request) Questionnaire(questionnaire string) V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.questionnaire = &questionnaire
	return r
}

func (r V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request) Signature(signature string) V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.signature = &signature
	return r
}

func (r V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request) SubAccountId(subAccountId string) V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.subAccountId = &subAccountId
	return r
}

func (r V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request) Timestamp(timestamp int64) V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request) WithdrawOrderId(withdrawOrderId string) V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.withdrawOrderId = &withdrawOrderId
	return r
}

func (r V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request) AddressName(addressName string) V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.addressName = &addressName
	return r
}

func (r V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request) AddressTag(addressTag string) V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.addressTag = &addressTag
	return r
}

func (r V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request) Network(network string) V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.network = &network
	return r
}

func (r V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request) TransactionFeeFlag(transactionFeeFlag bool) V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.transactionFeeFlag = &transactionFeeFlag
	return r
}

func (r V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request) WalletType(walletType int32) V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.walletType = &walletType
	return r
}

func (r V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request) Execute() (*WalletCreateLocalentityBrokerWithdrawApplyV1Resp, *http.Response, error) {
	return r.ApiService.WalletCreateLocalentityBrokerWithdrawApplyV1Execute(r)
}

/*
WalletCreateLocalentityBrokerWithdrawApplyV1 Broker Withdraw (for brokers of local entities that require travel rule) (USER_DATA)

Submit a withdrawal request for brokers of local entities that required travel rule.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request
*/
func (a *V1APIService) WalletCreateLocalentityBrokerWithdrawApplyV1(ctx context.Context) V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	return V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletCreateLocalentityBrokerWithdrawApplyV1Resp
func (a *V1APIService) WalletCreateLocalentityBrokerWithdrawApplyV1Execute(r V1APIWalletCreateLocalentityBrokerWithdrawApplyV1Request) (*WalletCreateLocalentityBrokerWithdrawApplyV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletCreateLocalentityBrokerWithdrawApplyV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletCreateLocalentityBrokerWithdrawApplyV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/localentity/broker/withdraw/apply"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.address == nil {
		return localVarReturnValue, nil, reportError("address is required and must be specified")
	}
	if r.amount == nil {
		return localVarReturnValue, nil, reportError("amount is required and must be specified")
	}
	if r.coin == nil {
		return localVarReturnValue, nil, reportError("coin is required and must be specified")
	}
	if r.originatorPii == nil {
		return localVarReturnValue, nil, reportError("originatorPii is required and must be specified")
	}
	if r.questionnaire == nil {
		return localVarReturnValue, nil, reportError("questionnaire is required and must be specified")
	}
	if r.signature == nil {
		return localVarReturnValue, nil, reportError("signature is required and must be specified")
	}
	if r.subAccountId == nil {
		return localVarReturnValue, nil, reportError("subAccountId is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}
	if r.withdrawOrderId == nil {
		return localVarReturnValue, nil, reportError("withdrawOrderId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "address", r.address, "", "")
	if r.addressName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "addressName", r.addressName, "", "")
	}
	if r.addressTag != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "addressTag", r.addressTag, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "amount", r.amount, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "coin", r.coin, "", "")
	if r.network != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "network", r.network, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "originatorPii", r.originatorPii, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "questionnaire", r.questionnaire, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "signature", r.signature, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "subAccountId", r.subAccountId, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.transactionFeeFlag != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "transactionFeeFlag", r.transactionFeeFlag, "", "")
	}
	if r.walletType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "walletType", r.walletType, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "withdrawOrderId", r.withdrawOrderId, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletCreateLocalentityWithdrawApplyV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	address *string
	amount *string
	coin *string
	questionnaire *string
	timestamp *int64
	addressTag *string
	name *string
	network *string
	recvWindow *int64
	transactionFeeFlag *bool
	walletType *int32
	withdrawOrderId *string
}

func (r V1APIWalletCreateLocalentityWithdrawApplyV1Request) Address(address string) V1APIWalletCreateLocalentityWithdrawApplyV1Request {
	r.address = &address
	return r
}

func (r V1APIWalletCreateLocalentityWithdrawApplyV1Request) Amount(amount string) V1APIWalletCreateLocalentityWithdrawApplyV1Request {
	r.amount = &amount
	return r
}

func (r V1APIWalletCreateLocalentityWithdrawApplyV1Request) Coin(coin string) V1APIWalletCreateLocalentityWithdrawApplyV1Request {
	r.coin = &coin
	return r
}

func (r V1APIWalletCreateLocalentityWithdrawApplyV1Request) Questionnaire(questionnaire string) V1APIWalletCreateLocalentityWithdrawApplyV1Request {
	r.questionnaire = &questionnaire
	return r
}

func (r V1APIWalletCreateLocalentityWithdrawApplyV1Request) Timestamp(timestamp int64) V1APIWalletCreateLocalentityWithdrawApplyV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletCreateLocalentityWithdrawApplyV1Request) AddressTag(addressTag string) V1APIWalletCreateLocalentityWithdrawApplyV1Request {
	r.addressTag = &addressTag
	return r
}

func (r V1APIWalletCreateLocalentityWithdrawApplyV1Request) Name(name string) V1APIWalletCreateLocalentityWithdrawApplyV1Request {
	r.name = &name
	return r
}

func (r V1APIWalletCreateLocalentityWithdrawApplyV1Request) Network(network string) V1APIWalletCreateLocalentityWithdrawApplyV1Request {
	r.network = &network
	return r
}

func (r V1APIWalletCreateLocalentityWithdrawApplyV1Request) RecvWindow(recvWindow int64) V1APIWalletCreateLocalentityWithdrawApplyV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletCreateLocalentityWithdrawApplyV1Request) TransactionFeeFlag(transactionFeeFlag bool) V1APIWalletCreateLocalentityWithdrawApplyV1Request {
	r.transactionFeeFlag = &transactionFeeFlag
	return r
}

func (r V1APIWalletCreateLocalentityWithdrawApplyV1Request) WalletType(walletType int32) V1APIWalletCreateLocalentityWithdrawApplyV1Request {
	r.walletType = &walletType
	return r
}

func (r V1APIWalletCreateLocalentityWithdrawApplyV1Request) WithdrawOrderId(withdrawOrderId string) V1APIWalletCreateLocalentityWithdrawApplyV1Request {
	r.withdrawOrderId = &withdrawOrderId
	return r
}

func (r V1APIWalletCreateLocalentityWithdrawApplyV1Request) Execute() (*WalletCreateLocalentityWithdrawApplyV1Resp, *http.Response, error) {
	return r.ApiService.WalletCreateLocalentityWithdrawApplyV1Execute(r)
}

/*
WalletCreateLocalentityWithdrawApplyV1 Withdraw (for local entities that require travel rule) (USER_DATA)

Submit a withdrawal request for local entities that required travel rule.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletCreateLocalentityWithdrawApplyV1Request
*/
func (a *V1APIService) WalletCreateLocalentityWithdrawApplyV1(ctx context.Context) V1APIWalletCreateLocalentityWithdrawApplyV1Request {
	return V1APIWalletCreateLocalentityWithdrawApplyV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletCreateLocalentityWithdrawApplyV1Resp
func (a *V1APIService) WalletCreateLocalentityWithdrawApplyV1Execute(r V1APIWalletCreateLocalentityWithdrawApplyV1Request) (*WalletCreateLocalentityWithdrawApplyV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletCreateLocalentityWithdrawApplyV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletCreateLocalentityWithdrawApplyV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/localentity/withdraw/apply"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.address == nil {
		return localVarReturnValue, nil, reportError("address is required and must be specified")
	}
	if r.amount == nil {
		return localVarReturnValue, nil, reportError("amount is required and must be specified")
	}
	if r.coin == nil {
		return localVarReturnValue, nil, reportError("coin is required and must be specified")
	}
	if r.questionnaire == nil {
		return localVarReturnValue, nil, reportError("questionnaire is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "address", r.address, "", "")
	if r.addressTag != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "addressTag", r.addressTag, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "amount", r.amount, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "coin", r.coin, "", "")
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "name", r.name, "", "")
	}
	if r.network != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "network", r.network, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "questionnaire", r.questionnaire, "", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.transactionFeeFlag != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "transactionFeeFlag", r.transactionFeeFlag, "", "")
	}
	if r.walletType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "walletType", r.walletType, "", "")
	}
	if r.withdrawOrderId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "withdrawOrderId", r.withdrawOrderId, "", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetAccountApiRestrictionsV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	timestamp *int64
	recvWindow *int64
}

func (r V1APIWalletGetAccountApiRestrictionsV1Request) Timestamp(timestamp int64) V1APIWalletGetAccountApiRestrictionsV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletGetAccountApiRestrictionsV1Request) RecvWindow(recvWindow int64) V1APIWalletGetAccountApiRestrictionsV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletGetAccountApiRestrictionsV1Request) Execute() (*WalletGetAccountApiRestrictionsV1Resp, *http.Response, error) {
	return r.ApiService.WalletGetAccountApiRestrictionsV1Execute(r)
}

/*
WalletGetAccountApiRestrictionsV1 Get API Key Permission (USER_DATA)

Get API Key Permission

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetAccountApiRestrictionsV1Request
*/
func (a *V1APIService) WalletGetAccountApiRestrictionsV1(ctx context.Context) V1APIWalletGetAccountApiRestrictionsV1Request {
	return V1APIWalletGetAccountApiRestrictionsV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletGetAccountApiRestrictionsV1Resp
func (a *V1APIService) WalletGetAccountApiRestrictionsV1Execute(r V1APIWalletGetAccountApiRestrictionsV1Request) (*WalletGetAccountApiRestrictionsV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletGetAccountApiRestrictionsV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetAccountApiRestrictionsV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/account/apiRestrictions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetAccountApiTradingStatusV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	timestamp *int64
	recvWindow *int64
}

func (r V1APIWalletGetAccountApiTradingStatusV1Request) Timestamp(timestamp int64) V1APIWalletGetAccountApiTradingStatusV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletGetAccountApiTradingStatusV1Request) RecvWindow(recvWindow int64) V1APIWalletGetAccountApiTradingStatusV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletGetAccountApiTradingStatusV1Request) Execute() (*WalletGetAccountApiTradingStatusV1Resp, *http.Response, error) {
	return r.ApiService.WalletGetAccountApiTradingStatusV1Execute(r)
}

/*
WalletGetAccountApiTradingStatusV1 Account API Trading Status (USER_DATA)

Fetch account api trading status detail.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetAccountApiTradingStatusV1Request
*/
func (a *V1APIService) WalletGetAccountApiTradingStatusV1(ctx context.Context) V1APIWalletGetAccountApiTradingStatusV1Request {
	return V1APIWalletGetAccountApiTradingStatusV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletGetAccountApiTradingStatusV1Resp
func (a *V1APIService) WalletGetAccountApiTradingStatusV1Execute(r V1APIWalletGetAccountApiTradingStatusV1Request) (*WalletGetAccountApiTradingStatusV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletGetAccountApiTradingStatusV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetAccountApiTradingStatusV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/account/apiTradingStatus"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetAccountInfoV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	timestamp *int64
	recvWindow *int64
}

func (r V1APIWalletGetAccountInfoV1Request) Timestamp(timestamp int64) V1APIWalletGetAccountInfoV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletGetAccountInfoV1Request) RecvWindow(recvWindow int64) V1APIWalletGetAccountInfoV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletGetAccountInfoV1Request) Execute() (*WalletGetAccountInfoV1Resp, *http.Response, error) {
	return r.ApiService.WalletGetAccountInfoV1Execute(r)
}

/*
WalletGetAccountInfoV1 Account info (USER_DATA)

Fetch account info detail.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetAccountInfoV1Request
*/
func (a *V1APIService) WalletGetAccountInfoV1(ctx context.Context) V1APIWalletGetAccountInfoV1Request {
	return V1APIWalletGetAccountInfoV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletGetAccountInfoV1Resp
func (a *V1APIService) WalletGetAccountInfoV1Execute(r V1APIWalletGetAccountInfoV1Request) (*WalletGetAccountInfoV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletGetAccountInfoV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetAccountInfoV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/account/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetAccountSnapshotV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	type_ *string
	timestamp *int64
	startTime *int64
	endTime *int64
	limit *int32
	recvWindow *int64
}

// &amp;#34;SPOT&amp;#34;, &amp;#34;MARGIN&amp;#34;, &amp;#34;FUTURES&amp;#34;
func (r V1APIWalletGetAccountSnapshotV1Request) Type_(type_ string) V1APIWalletGetAccountSnapshotV1Request {
	r.type_ = &type_
	return r
}

func (r V1APIWalletGetAccountSnapshotV1Request) Timestamp(timestamp int64) V1APIWalletGetAccountSnapshotV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletGetAccountSnapshotV1Request) StartTime(startTime int64) V1APIWalletGetAccountSnapshotV1Request {
	r.startTime = &startTime
	return r
}

func (r V1APIWalletGetAccountSnapshotV1Request) EndTime(endTime int64) V1APIWalletGetAccountSnapshotV1Request {
	r.endTime = &endTime
	return r
}

// min 7, max 30, default 7
func (r V1APIWalletGetAccountSnapshotV1Request) Limit(limit int32) V1APIWalletGetAccountSnapshotV1Request {
	r.limit = &limit
	return r
}

func (r V1APIWalletGetAccountSnapshotV1Request) RecvWindow(recvWindow int64) V1APIWalletGetAccountSnapshotV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletGetAccountSnapshotV1Request) Execute() (*WalletGetAccountSnapshotV1Resp, *http.Response, error) {
	return r.ApiService.WalletGetAccountSnapshotV1Execute(r)
}

/*
WalletGetAccountSnapshotV1 Daily Account Snapshot (USER_DATA)

Daily account snapshot

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetAccountSnapshotV1Request
*/
func (a *V1APIService) WalletGetAccountSnapshotV1(ctx context.Context) V1APIWalletGetAccountSnapshotV1Request {
	return V1APIWalletGetAccountSnapshotV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletGetAccountSnapshotV1Resp
func (a *V1APIService) WalletGetAccountSnapshotV1Execute(r V1APIWalletGetAccountSnapshotV1Request) (*WalletGetAccountSnapshotV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletGetAccountSnapshotV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetAccountSnapshotV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/accountSnapshot"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.type_ == nil {
		return localVarReturnValue, nil, reportError("type_ is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 7
		r.limit = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetAccountStatusV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	timestamp *int64
	recvWindow *int64
}

func (r V1APIWalletGetAccountStatusV1Request) Timestamp(timestamp int64) V1APIWalletGetAccountStatusV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletGetAccountStatusV1Request) RecvWindow(recvWindow int64) V1APIWalletGetAccountStatusV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletGetAccountStatusV1Request) Execute() (*WalletGetAccountStatusV1Resp, *http.Response, error) {
	return r.ApiService.WalletGetAccountStatusV1Execute(r)
}

/*
WalletGetAccountStatusV1 Account Status (USER_DATA)

Fetch account status detail.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetAccountStatusV1Request
*/
func (a *V1APIService) WalletGetAccountStatusV1(ctx context.Context) V1APIWalletGetAccountStatusV1Request {
	return V1APIWalletGetAccountStatusV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletGetAccountStatusV1Resp
func (a *V1APIService) WalletGetAccountStatusV1Execute(r V1APIWalletGetAccountStatusV1Request) (*WalletGetAccountStatusV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletGetAccountStatusV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetAccountStatusV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/account/status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetAssetAssetDetailV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	timestamp *int64
	recvWindow *int64
}

func (r V1APIWalletGetAssetAssetDetailV1Request) Timestamp(timestamp int64) V1APIWalletGetAssetAssetDetailV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletGetAssetAssetDetailV1Request) RecvWindow(recvWindow int64) V1APIWalletGetAssetAssetDetailV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletGetAssetAssetDetailV1Request) Execute() (*map[string]WalletGetAssetAssetDetailV1RespValue, *http.Response, error) {
	return r.ApiService.WalletGetAssetAssetDetailV1Execute(r)
}

/*
WalletGetAssetAssetDetailV1 Asset Detail (USER_DATA)

Fetch details of assets supported on Binance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetAssetAssetDetailV1Request
*/
func (a *V1APIService) WalletGetAssetAssetDetailV1(ctx context.Context) V1APIWalletGetAssetAssetDetailV1Request {
	return V1APIWalletGetAssetAssetDetailV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]WalletGetAssetAssetDetailV1RespValue
func (a *V1APIService) WalletGetAssetAssetDetailV1Execute(r V1APIWalletGetAssetAssetDetailV1Request) (*map[string]WalletGetAssetAssetDetailV1RespValue, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *map[string]WalletGetAssetAssetDetailV1RespValue
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetAssetAssetDetailV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/asset/assetDetail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetAssetAssetDividendV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	timestamp *int64
	asset *string
	startTime *int64
	endTime *int64
	limit *int32
	recvWindow *int64
}

func (r V1APIWalletGetAssetAssetDividendV1Request) Timestamp(timestamp int64) V1APIWalletGetAssetAssetDividendV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletGetAssetAssetDividendV1Request) Asset(asset string) V1APIWalletGetAssetAssetDividendV1Request {
	r.asset = &asset
	return r
}

func (r V1APIWalletGetAssetAssetDividendV1Request) StartTime(startTime int64) V1APIWalletGetAssetAssetDividendV1Request {
	r.startTime = &startTime
	return r
}

func (r V1APIWalletGetAssetAssetDividendV1Request) EndTime(endTime int64) V1APIWalletGetAssetAssetDividendV1Request {
	r.endTime = &endTime
	return r
}

// Default 20, max 500
func (r V1APIWalletGetAssetAssetDividendV1Request) Limit(limit int32) V1APIWalletGetAssetAssetDividendV1Request {
	r.limit = &limit
	return r
}

func (r V1APIWalletGetAssetAssetDividendV1Request) RecvWindow(recvWindow int64) V1APIWalletGetAssetAssetDividendV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletGetAssetAssetDividendV1Request) Execute() (*WalletGetAssetAssetDividendV1Resp, *http.Response, error) {
	return r.ApiService.WalletGetAssetAssetDividendV1Execute(r)
}

/*
WalletGetAssetAssetDividendV1 Asset Dividend Record (USER_DATA)

Query asset dividend record.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetAssetAssetDividendV1Request
*/
func (a *V1APIService) WalletGetAssetAssetDividendV1(ctx context.Context) V1APIWalletGetAssetAssetDividendV1Request {
	return V1APIWalletGetAssetAssetDividendV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletGetAssetAssetDividendV1Resp
func (a *V1APIService) WalletGetAssetAssetDividendV1Execute(r V1APIWalletGetAssetAssetDividendV1Request) (*WalletGetAssetAssetDividendV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletGetAssetAssetDividendV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetAssetAssetDividendV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/asset/assetDividend"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.asset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asset", r.asset, "form", "")
	} else {
		var defaultValue string = ""
		r.asset = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 20
		r.limit = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetAssetCustodyTransferHistoryV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	email *string
	startTime *int64
	endTime *int64
	timestamp *int64
	type_ *string
	asset *string
	current *int32
	size *int32
	recvWindow *int64
}

func (r V1APIWalletGetAssetCustodyTransferHistoryV1Request) Email(email string) V1APIWalletGetAssetCustodyTransferHistoryV1Request {
	r.email = &email
	return r
}

func (r V1APIWalletGetAssetCustodyTransferHistoryV1Request) StartTime(startTime int64) V1APIWalletGetAssetCustodyTransferHistoryV1Request {
	r.startTime = &startTime
	return r
}

func (r V1APIWalletGetAssetCustodyTransferHistoryV1Request) EndTime(endTime int64) V1APIWalletGetAssetCustodyTransferHistoryV1Request {
	r.endTime = &endTime
	return r
}

func (r V1APIWalletGetAssetCustodyTransferHistoryV1Request) Timestamp(timestamp int64) V1APIWalletGetAssetCustodyTransferHistoryV1Request {
	r.timestamp = &timestamp
	return r
}

// Delegate/Undelegate
func (r V1APIWalletGetAssetCustodyTransferHistoryV1Request) Type_(type_ string) V1APIWalletGetAssetCustodyTransferHistoryV1Request {
	r.type_ = &type_
	return r
}

func (r V1APIWalletGetAssetCustodyTransferHistoryV1Request) Asset(asset string) V1APIWalletGetAssetCustodyTransferHistoryV1Request {
	r.asset = &asset
	return r
}

// default 1
func (r V1APIWalletGetAssetCustodyTransferHistoryV1Request) Current(current int32) V1APIWalletGetAssetCustodyTransferHistoryV1Request {
	r.current = &current
	return r
}

// default 10, max 100
func (r V1APIWalletGetAssetCustodyTransferHistoryV1Request) Size(size int32) V1APIWalletGetAssetCustodyTransferHistoryV1Request {
	r.size = &size
	return r
}

func (r V1APIWalletGetAssetCustodyTransferHistoryV1Request) RecvWindow(recvWindow int64) V1APIWalletGetAssetCustodyTransferHistoryV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletGetAssetCustodyTransferHistoryV1Request) Execute() (*WalletGetAssetCustodyTransferHistoryV1Resp, *http.Response, error) {
	return r.ApiService.WalletGetAssetCustodyTransferHistoryV1Execute(r)
}

/*
WalletGetAssetCustodyTransferHistoryV1 Query User Delegation History(For Master Account)(USER_DATA)

Query User Delegation History

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetAssetCustodyTransferHistoryV1Request
*/
func (a *V1APIService) WalletGetAssetCustodyTransferHistoryV1(ctx context.Context) V1APIWalletGetAssetCustodyTransferHistoryV1Request {
	return V1APIWalletGetAssetCustodyTransferHistoryV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletGetAssetCustodyTransferHistoryV1Resp
func (a *V1APIService) WalletGetAssetCustodyTransferHistoryV1Execute(r V1APIWalletGetAssetCustodyTransferHistoryV1Request) (*WalletGetAssetCustodyTransferHistoryV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletGetAssetCustodyTransferHistoryV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetAssetCustodyTransferHistoryV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/asset/custody/transfer-history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.email == nil {
		return localVarReturnValue, nil, reportError("email is required and must be specified")
	}
	if r.startTime == nil {
		return localVarReturnValue, nil, reportError("startTime is required and must be specified")
	}
	if r.endTime == nil {
		return localVarReturnValue, nil, reportError("endTime is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "email", r.email, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	} else {
		var defaultValue string = ""
		r.type_ = &defaultValue
	}
	if r.asset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asset", r.asset, "form", "")
	} else {
		var defaultValue string = ""
		r.asset = &defaultValue
	}
	if r.current != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "current", r.current, "form", "")
	} else {
		var defaultValue int32 = 1
		r.current = &defaultValue
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	} else {
		var defaultValue int32 = 10
		r.size = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetAssetDribbletV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	timestamp *int64
	startTime *int64
	endTime *int64
	recvWindow *int64
}

func (r V1APIWalletGetAssetDribbletV1Request) Timestamp(timestamp int64) V1APIWalletGetAssetDribbletV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletGetAssetDribbletV1Request) StartTime(startTime int64) V1APIWalletGetAssetDribbletV1Request {
	r.startTime = &startTime
	return r
}

func (r V1APIWalletGetAssetDribbletV1Request) EndTime(endTime int64) V1APIWalletGetAssetDribbletV1Request {
	r.endTime = &endTime
	return r
}

func (r V1APIWalletGetAssetDribbletV1Request) RecvWindow(recvWindow int64) V1APIWalletGetAssetDribbletV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletGetAssetDribbletV1Request) Execute() (*WalletGetAssetDribbletV1Resp, *http.Response, error) {
	return r.ApiService.WalletGetAssetDribbletV1Execute(r)
}

/*
WalletGetAssetDribbletV1 DustLog(USER_DATA)

Dustlog

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetAssetDribbletV1Request
*/
func (a *V1APIService) WalletGetAssetDribbletV1(ctx context.Context) V1APIWalletGetAssetDribbletV1Request {
	return V1APIWalletGetAssetDribbletV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletGetAssetDribbletV1Resp
func (a *V1APIService) WalletGetAssetDribbletV1Execute(r V1APIWalletGetAssetDribbletV1Request) (*WalletGetAssetDribbletV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletGetAssetDribbletV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetAssetDribbletV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/asset/dribblet"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	startTime *int64
	endTime *int64
	tranId *int64
	clientTranId *string
	asset *string
	current *int32
	size *int32
}

// inclusive, unit: ms
func (r V1APIWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request) StartTime(startTime int64) V1APIWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request {
	r.startTime = &startTime
	return r
}

// exclusive, unit: ms
func (r V1APIWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request) EndTime(endTime int64) V1APIWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request {
	r.endTime = &endTime
	return r
}

// The transaction id
func (r V1APIWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request) TranId(tranId int64) V1APIWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request {
	r.tranId = &tranId
	return r
}

// The unique flag
func (r V1APIWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request) ClientTranId(clientTranId string) V1APIWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request {
	r.clientTranId = &clientTranId
	return r
}

// If it is blank, we will query all assets
func (r V1APIWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request) Asset(asset string) V1APIWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request {
	r.asset = &asset
	return r
}

// current page, default 1, the min value is 1
func (r V1APIWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request) Current(current int32) V1APIWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request {
	r.current = &current
	return r
}

// page size, default 10, the max value is 100
func (r V1APIWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request) Size(size int32) V1APIWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request {
	r.size = &size
	return r
}

func (r V1APIWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request) Execute() (*WalletGetAssetLedgerTransferCloudMiningQueryByPageV1Resp, *http.Response, error) {
	return r.ApiService.WalletGetAssetLedgerTransferCloudMiningQueryByPageV1Execute(r)
}

/*
WalletGetAssetLedgerTransferCloudMiningQueryByPageV1 Get Cloud-Mining payment and refund history (USER_DATA)

The query of Cloud-Mining payment and refund history

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request
*/
func (a *V1APIService) WalletGetAssetLedgerTransferCloudMiningQueryByPageV1(ctx context.Context) V1APIWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request {
	return V1APIWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletGetAssetLedgerTransferCloudMiningQueryByPageV1Resp
func (a *V1APIService) WalletGetAssetLedgerTransferCloudMiningQueryByPageV1Execute(r V1APIWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request) (*WalletGetAssetLedgerTransferCloudMiningQueryByPageV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletGetAssetLedgerTransferCloudMiningQueryByPageV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetAssetLedgerTransferCloudMiningQueryByPageV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startTime == nil {
		return localVarReturnValue, nil, reportError("startTime is required and must be specified")
	}
	if r.endTime == nil {
		return localVarReturnValue, nil, reportError("endTime is required and must be specified")
	}

	if r.tranId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tranId", r.tranId, "form", "")
	}
	if r.clientTranId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "clientTranId", r.clientTranId, "form", "")
	} else {
		var defaultValue string = ""
		r.clientTranId = &defaultValue
	}
	if r.asset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asset", r.asset, "form", "")
	} else {
		var defaultValue string = ""
		r.asset = &defaultValue
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	if r.current != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "current", r.current, "form", "")
	} else {
		var defaultValue int32 = 1
		r.current = &defaultValue
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	} else {
		var defaultValue int32 = 10
		r.size = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetAssetTradeFeeV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	timestamp *int64
	symbol *string
	recvWindow *int64
}

func (r V1APIWalletGetAssetTradeFeeV1Request) Timestamp(timestamp int64) V1APIWalletGetAssetTradeFeeV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletGetAssetTradeFeeV1Request) Symbol(symbol string) V1APIWalletGetAssetTradeFeeV1Request {
	r.symbol = &symbol
	return r
}

func (r V1APIWalletGetAssetTradeFeeV1Request) RecvWindow(recvWindow int64) V1APIWalletGetAssetTradeFeeV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletGetAssetTradeFeeV1Request) Execute() ([]WalletGetAssetTradeFeeV1RespItem, *http.Response, error) {
	return r.ApiService.WalletGetAssetTradeFeeV1Execute(r)
}

/*
WalletGetAssetTradeFeeV1 Trade Fee (USER_DATA)

Fetch trade fee

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetAssetTradeFeeV1Request
*/
func (a *V1APIService) WalletGetAssetTradeFeeV1(ctx context.Context) V1APIWalletGetAssetTradeFeeV1Request {
	return V1APIWalletGetAssetTradeFeeV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WalletGetAssetTradeFeeV1RespItem
func (a *V1APIService) WalletGetAssetTradeFeeV1Execute(r V1APIWalletGetAssetTradeFeeV1Request) ([]WalletGetAssetTradeFeeV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WalletGetAssetTradeFeeV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetAssetTradeFeeV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/asset/tradeFee"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.symbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "symbol", r.symbol, "form", "")
	} else {
		var defaultValue string = ""
		r.symbol = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetAssetTransferV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	type_ *string
	timestamp *int64
	startTime *int64
	endTime *int64
	current *int32
	size *int32
	fromSymbol *string
	toSymbol *string
	recvWindow *int64
}

func (r V1APIWalletGetAssetTransferV1Request) Type_(type_ string) V1APIWalletGetAssetTransferV1Request {
	r.type_ = &type_
	return r
}

func (r V1APIWalletGetAssetTransferV1Request) Timestamp(timestamp int64) V1APIWalletGetAssetTransferV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletGetAssetTransferV1Request) StartTime(startTime int64) V1APIWalletGetAssetTransferV1Request {
	r.startTime = &startTime
	return r
}

func (r V1APIWalletGetAssetTransferV1Request) EndTime(endTime int64) V1APIWalletGetAssetTransferV1Request {
	r.endTime = &endTime
	return r
}

// Default 1
func (r V1APIWalletGetAssetTransferV1Request) Current(current int32) V1APIWalletGetAssetTransferV1Request {
	r.current = &current
	return r
}

// Default 10, Max 100
func (r V1APIWalletGetAssetTransferV1Request) Size(size int32) V1APIWalletGetAssetTransferV1Request {
	r.size = &size
	return r
}

func (r V1APIWalletGetAssetTransferV1Request) FromSymbol(fromSymbol string) V1APIWalletGetAssetTransferV1Request {
	r.fromSymbol = &fromSymbol
	return r
}

func (r V1APIWalletGetAssetTransferV1Request) ToSymbol(toSymbol string) V1APIWalletGetAssetTransferV1Request {
	r.toSymbol = &toSymbol
	return r
}

func (r V1APIWalletGetAssetTransferV1Request) RecvWindow(recvWindow int64) V1APIWalletGetAssetTransferV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletGetAssetTransferV1Request) Execute() (*WalletGetAssetTransferV1Resp, *http.Response, error) {
	return r.ApiService.WalletGetAssetTransferV1Execute(r)
}

/*
WalletGetAssetTransferV1 Query User Universal Transfer History(USER_DATA)

Query User Universal Transfer History

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetAssetTransferV1Request
*/
func (a *V1APIService) WalletGetAssetTransferV1(ctx context.Context) V1APIWalletGetAssetTransferV1Request {
	return V1APIWalletGetAssetTransferV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletGetAssetTransferV1Resp
func (a *V1APIService) WalletGetAssetTransferV1Execute(r V1APIWalletGetAssetTransferV1Request) (*WalletGetAssetTransferV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletGetAssetTransferV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetAssetTransferV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/asset/transfer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.type_ == nil {
		return localVarReturnValue, nil, reportError("type_ is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.current != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "current", r.current, "form", "")
	} else {
		var defaultValue int32 = 1
		r.current = &defaultValue
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	} else {
		var defaultValue int32 = 10
		r.size = &defaultValue
	}
	if r.fromSymbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromSymbol", r.fromSymbol, "form", "")
	} else {
		var defaultValue string = ""
		r.fromSymbol = &defaultValue
	}
	if r.toSymbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toSymbol", r.toSymbol, "form", "")
	} else {
		var defaultValue string = ""
		r.toSymbol = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetAssetWalletBalanceV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	timestamp *int64
	quoteAsset *string
	recvWindow *int64
}

func (r V1APIWalletGetAssetWalletBalanceV1Request) Timestamp(timestamp int64) V1APIWalletGetAssetWalletBalanceV1Request {
	r.timestamp = &timestamp
	return r
}

// &#x60;USDT&#x60;, &#x60;ETH&#x60;, &#x60;USDC&#x60;, &#x60;BNB&#x60;, etc. default &#x60;BTC&#x60;
func (r V1APIWalletGetAssetWalletBalanceV1Request) QuoteAsset(quoteAsset string) V1APIWalletGetAssetWalletBalanceV1Request {
	r.quoteAsset = &quoteAsset
	return r
}

func (r V1APIWalletGetAssetWalletBalanceV1Request) RecvWindow(recvWindow int64) V1APIWalletGetAssetWalletBalanceV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletGetAssetWalletBalanceV1Request) Execute() ([]WalletGetAssetWalletBalanceV1RespItem, *http.Response, error) {
	return r.ApiService.WalletGetAssetWalletBalanceV1Execute(r)
}

/*
WalletGetAssetWalletBalanceV1 Query User Wallet Balance (USER_DATA)

Query User Wallet Balance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetAssetWalletBalanceV1Request
*/
func (a *V1APIService) WalletGetAssetWalletBalanceV1(ctx context.Context) V1APIWalletGetAssetWalletBalanceV1Request {
	return V1APIWalletGetAssetWalletBalanceV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WalletGetAssetWalletBalanceV1RespItem
func (a *V1APIService) WalletGetAssetWalletBalanceV1Execute(r V1APIWalletGetAssetWalletBalanceV1Request) ([]WalletGetAssetWalletBalanceV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WalletGetAssetWalletBalanceV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetAssetWalletBalanceV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/asset/wallet/balance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.quoteAsset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "quoteAsset", r.quoteAsset, "form", "")
	} else {
		var defaultValue string = ""
		r.quoteAsset = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetCapitalConfigGetallV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	timestamp *int64
	recvWindow *int64
}

func (r V1APIWalletGetCapitalConfigGetallV1Request) Timestamp(timestamp int64) V1APIWalletGetCapitalConfigGetallV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletGetCapitalConfigGetallV1Request) RecvWindow(recvWindow int64) V1APIWalletGetCapitalConfigGetallV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletGetCapitalConfigGetallV1Request) Execute() ([]WalletGetCapitalConfigGetallV1RespItem, *http.Response, error) {
	return r.ApiService.WalletGetCapitalConfigGetallV1Execute(r)
}

/*
WalletGetCapitalConfigGetallV1 All Coins' Information (USER_DATA)

Get information of coins (available for deposit and withdraw) for user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetCapitalConfigGetallV1Request
*/
func (a *V1APIService) WalletGetCapitalConfigGetallV1(ctx context.Context) V1APIWalletGetCapitalConfigGetallV1Request {
	return V1APIWalletGetCapitalConfigGetallV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WalletGetCapitalConfigGetallV1RespItem
func (a *V1APIService) WalletGetCapitalConfigGetallV1Execute(r V1APIWalletGetCapitalConfigGetallV1Request) ([]WalletGetCapitalConfigGetallV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WalletGetCapitalConfigGetallV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetCapitalConfigGetallV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/capital/config/getall"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetCapitalDepositAddressListV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	coin *string
	timestamp *int64
	network *string
}

// &#x60;coin&#x60; refers to the parent network address format that the address is using
func (r V1APIWalletGetCapitalDepositAddressListV1Request) Coin(coin string) V1APIWalletGetCapitalDepositAddressListV1Request {
	r.coin = &coin
	return r
}

func (r V1APIWalletGetCapitalDepositAddressListV1Request) Timestamp(timestamp int64) V1APIWalletGetCapitalDepositAddressListV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletGetCapitalDepositAddressListV1Request) Network(network string) V1APIWalletGetCapitalDepositAddressListV1Request {
	r.network = &network
	return r
}

func (r V1APIWalletGetCapitalDepositAddressListV1Request) Execute() ([]WalletGetCapitalDepositAddressListV1RespItem, *http.Response, error) {
	return r.ApiService.WalletGetCapitalDepositAddressListV1Execute(r)
}

/*
WalletGetCapitalDepositAddressListV1 Fetch deposit address list with network(USER_DATA)

Fetch deposit address list with network.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetCapitalDepositAddressListV1Request
*/
func (a *V1APIService) WalletGetCapitalDepositAddressListV1(ctx context.Context) V1APIWalletGetCapitalDepositAddressListV1Request {
	return V1APIWalletGetCapitalDepositAddressListV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WalletGetCapitalDepositAddressListV1RespItem
func (a *V1APIService) WalletGetCapitalDepositAddressListV1Execute(r V1APIWalletGetCapitalDepositAddressListV1Request) ([]WalletGetCapitalDepositAddressListV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WalletGetCapitalDepositAddressListV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetCapitalDepositAddressListV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/capital/deposit/address/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.coin == nil {
		return localVarReturnValue, nil, reportError("coin is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "coin", r.coin, "form", "")
	if r.network != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "network", r.network, "form", "")
	} else {
		var defaultValue string = ""
		r.network = &defaultValue
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetCapitalDepositAddressV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	coin *string
	timestamp *int64
	network *string
	amount *string
	recvWindow *int64
}

func (r V1APIWalletGetCapitalDepositAddressV1Request) Coin(coin string) V1APIWalletGetCapitalDepositAddressV1Request {
	r.coin = &coin
	return r
}

func (r V1APIWalletGetCapitalDepositAddressV1Request) Timestamp(timestamp int64) V1APIWalletGetCapitalDepositAddressV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletGetCapitalDepositAddressV1Request) Network(network string) V1APIWalletGetCapitalDepositAddressV1Request {
	r.network = &network
	return r
}

func (r V1APIWalletGetCapitalDepositAddressV1Request) Amount(amount string) V1APIWalletGetCapitalDepositAddressV1Request {
	r.amount = &amount
	return r
}

func (r V1APIWalletGetCapitalDepositAddressV1Request) RecvWindow(recvWindow int64) V1APIWalletGetCapitalDepositAddressV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletGetCapitalDepositAddressV1Request) Execute() (*WalletGetCapitalDepositAddressV1Resp, *http.Response, error) {
	return r.ApiService.WalletGetCapitalDepositAddressV1Execute(r)
}

/*
WalletGetCapitalDepositAddressV1 Deposit Address(supporting network) (USER_DATA)

Fetch deposit address with network.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetCapitalDepositAddressV1Request
*/
func (a *V1APIService) WalletGetCapitalDepositAddressV1(ctx context.Context) V1APIWalletGetCapitalDepositAddressV1Request {
	return V1APIWalletGetCapitalDepositAddressV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletGetCapitalDepositAddressV1Resp
func (a *V1APIService) WalletGetCapitalDepositAddressV1Execute(r V1APIWalletGetCapitalDepositAddressV1Request) (*WalletGetCapitalDepositAddressV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletGetCapitalDepositAddressV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetCapitalDepositAddressV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/capital/deposit/address"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.coin == nil {
		return localVarReturnValue, nil, reportError("coin is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "coin", r.coin, "form", "")
	if r.network != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "network", r.network, "form", "")
	} else {
		var defaultValue string = ""
		r.network = &defaultValue
	}
	if r.amount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "amount", r.amount, "form", "")
	} else {
		var defaultValue string = ""
		r.amount = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetCapitalDepositHisrecV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	timestamp *int64
	includeSource *bool
	coin *string
	status *int32
	startTime *int64
	endTime *int64
	offset *int32
	limit *int32
	recvWindow *int64
	txId *string
}

func (r V1APIWalletGetCapitalDepositHisrecV1Request) Timestamp(timestamp int64) V1APIWalletGetCapitalDepositHisrecV1Request {
	r.timestamp = &timestamp
	return r
}

// Default: &#x60;false&#x60;, return &#x60;sourceAddress&#x60;field when set to &#x60;true&#x60;
func (r V1APIWalletGetCapitalDepositHisrecV1Request) IncludeSource(includeSource bool) V1APIWalletGetCapitalDepositHisrecV1Request {
	r.includeSource = &includeSource
	return r
}

func (r V1APIWalletGetCapitalDepositHisrecV1Request) Coin(coin string) V1APIWalletGetCapitalDepositHisrecV1Request {
	r.coin = &coin
	return r
}

// 0(0:pending, 6:credited but cannot withdraw, 7:Wrong Deposit, 8:Waiting User confirm, 1:success, 2:rejected)
func (r V1APIWalletGetCapitalDepositHisrecV1Request) Status(status int32) V1APIWalletGetCapitalDepositHisrecV1Request {
	r.status = &status
	return r
}

// Default: 90 days from current timestamp
func (r V1APIWalletGetCapitalDepositHisrecV1Request) StartTime(startTime int64) V1APIWalletGetCapitalDepositHisrecV1Request {
	r.startTime = &startTime
	return r
}

// Default: present timestamp
func (r V1APIWalletGetCapitalDepositHisrecV1Request) EndTime(endTime int64) V1APIWalletGetCapitalDepositHisrecV1Request {
	r.endTime = &endTime
	return r
}

// Default:0
func (r V1APIWalletGetCapitalDepositHisrecV1Request) Offset(offset int32) V1APIWalletGetCapitalDepositHisrecV1Request {
	r.offset = &offset
	return r
}

// Default:1000, Max:1000
func (r V1APIWalletGetCapitalDepositHisrecV1Request) Limit(limit int32) V1APIWalletGetCapitalDepositHisrecV1Request {
	r.limit = &limit
	return r
}

func (r V1APIWalletGetCapitalDepositHisrecV1Request) RecvWindow(recvWindow int64) V1APIWalletGetCapitalDepositHisrecV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletGetCapitalDepositHisrecV1Request) TxId(txId string) V1APIWalletGetCapitalDepositHisrecV1Request {
	r.txId = &txId
	return r
}

func (r V1APIWalletGetCapitalDepositHisrecV1Request) Execute() ([]WalletGetCapitalDepositHisrecV1RespItem, *http.Response, error) {
	return r.ApiService.WalletGetCapitalDepositHisrecV1Execute(r)
}

/*
WalletGetCapitalDepositHisrecV1 Deposit History (supporting network) (USER_DATA)

Fetch deposit history.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetCapitalDepositHisrecV1Request
*/
func (a *V1APIService) WalletGetCapitalDepositHisrecV1(ctx context.Context) V1APIWalletGetCapitalDepositHisrecV1Request {
	return V1APIWalletGetCapitalDepositHisrecV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WalletGetCapitalDepositHisrecV1RespItem
func (a *V1APIService) WalletGetCapitalDepositHisrecV1Execute(r V1APIWalletGetCapitalDepositHisrecV1Request) ([]WalletGetCapitalDepositHisrecV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WalletGetCapitalDepositHisrecV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetCapitalDepositHisrecV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/capital/deposit/hisrec"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.includeSource != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeSource", r.includeSource, "form", "")
	} else {
		var defaultValue bool = false
		r.includeSource = &defaultValue
	}
	if r.coin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coin", r.coin, "form", "")
	} else {
		var defaultValue string = ""
		r.coin = &defaultValue
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "form", "")
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	if r.txId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "txId", r.txId, "form", "")
	} else {
		var defaultValue string = ""
		r.txId = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetCapitalWithdrawAddressListV1Request struct {
	ctx context.Context
	ApiService *V1APIService
}

func (r V1APIWalletGetCapitalWithdrawAddressListV1Request) Execute() ([]WalletGetCapitalWithdrawAddressListV1RespItem, *http.Response, error) {
	return r.ApiService.WalletGetCapitalWithdrawAddressListV1Execute(r)
}

/*
WalletGetCapitalWithdrawAddressListV1 Fetch withdraw address list (USER_DATA)

Fetch withdraw address list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetCapitalWithdrawAddressListV1Request
*/
func (a *V1APIService) WalletGetCapitalWithdrawAddressListV1(ctx context.Context) V1APIWalletGetCapitalWithdrawAddressListV1Request {
	return V1APIWalletGetCapitalWithdrawAddressListV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WalletGetCapitalWithdrawAddressListV1RespItem
func (a *V1APIService) WalletGetCapitalWithdrawAddressListV1Execute(r V1APIWalletGetCapitalWithdrawAddressListV1Request) ([]WalletGetCapitalWithdrawAddressListV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WalletGetCapitalWithdrawAddressListV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetCapitalWithdrawAddressListV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/capital/withdraw/address/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetCapitalWithdrawHistoryV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	timestamp *int64
	coin *string
	withdrawOrderId *string
	status *int32
	offset *int32
	limit *int32
	idList *string
	startTime *int64
	endTime *int64
	recvWindow *int64
}

func (r V1APIWalletGetCapitalWithdrawHistoryV1Request) Timestamp(timestamp int64) V1APIWalletGetCapitalWithdrawHistoryV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletGetCapitalWithdrawHistoryV1Request) Coin(coin string) V1APIWalletGetCapitalWithdrawHistoryV1Request {
	r.coin = &coin
	return r
}

func (r V1APIWalletGetCapitalWithdrawHistoryV1Request) WithdrawOrderId(withdrawOrderId string) V1APIWalletGetCapitalWithdrawHistoryV1Request {
	r.withdrawOrderId = &withdrawOrderId
	return r
}

// 0(0:Email Sent, 2:Awaiting Approval 3:Rejected 4:Processing 6:Completed)
func (r V1APIWalletGetCapitalWithdrawHistoryV1Request) Status(status int32) V1APIWalletGetCapitalWithdrawHistoryV1Request {
	r.status = &status
	return r
}

func (r V1APIWalletGetCapitalWithdrawHistoryV1Request) Offset(offset int32) V1APIWalletGetCapitalWithdrawHistoryV1Request {
	r.offset = &offset
	return r
}

// Default: 1000, Max: 1000
func (r V1APIWalletGetCapitalWithdrawHistoryV1Request) Limit(limit int32) V1APIWalletGetCapitalWithdrawHistoryV1Request {
	r.limit = &limit
	return r
}

// id list returned in the response of POST &#x60;/sapi/v1/capital/withdraw/apply&#x60;, separated by &#x60;,&#x60;
func (r V1APIWalletGetCapitalWithdrawHistoryV1Request) IdList(idList string) V1APIWalletGetCapitalWithdrawHistoryV1Request {
	r.idList = &idList
	return r
}

// Default: 90 days from current timestamp
func (r V1APIWalletGetCapitalWithdrawHistoryV1Request) StartTime(startTime int64) V1APIWalletGetCapitalWithdrawHistoryV1Request {
	r.startTime = &startTime
	return r
}

// Default: present timestamp
func (r V1APIWalletGetCapitalWithdrawHistoryV1Request) EndTime(endTime int64) V1APIWalletGetCapitalWithdrawHistoryV1Request {
	r.endTime = &endTime
	return r
}

func (r V1APIWalletGetCapitalWithdrawHistoryV1Request) RecvWindow(recvWindow int64) V1APIWalletGetCapitalWithdrawHistoryV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletGetCapitalWithdrawHistoryV1Request) Execute() ([]WalletGetCapitalWithdrawHistoryV1RespItem, *http.Response, error) {
	return r.ApiService.WalletGetCapitalWithdrawHistoryV1Execute(r)
}

/*
WalletGetCapitalWithdrawHistoryV1 Withdraw History (supporting network) (USER_DATA)

Fetch withdraw history.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetCapitalWithdrawHistoryV1Request
*/
func (a *V1APIService) WalletGetCapitalWithdrawHistoryV1(ctx context.Context) V1APIWalletGetCapitalWithdrawHistoryV1Request {
	return V1APIWalletGetCapitalWithdrawHistoryV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WalletGetCapitalWithdrawHistoryV1RespItem
func (a *V1APIService) WalletGetCapitalWithdrawHistoryV1Execute(r V1APIWalletGetCapitalWithdrawHistoryV1Request) ([]WalletGetCapitalWithdrawHistoryV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WalletGetCapitalWithdrawHistoryV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetCapitalWithdrawHistoryV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/capital/withdraw/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.coin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coin", r.coin, "form", "")
	} else {
		var defaultValue string = ""
		r.coin = &defaultValue
	}
	if r.withdrawOrderId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withdrawOrderId", r.withdrawOrderId, "form", "")
	} else {
		var defaultValue string = ""
		r.withdrawOrderId = &defaultValue
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 1000
		r.limit = &defaultValue
	}
	if r.idList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idList", r.idList, "form", "")
	} else {
		var defaultValue string = ""
		r.idList = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetLocalentityDepositHistoryV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	timestamp *int64
	trId *string
	txId *string
	tranId *string
	network *string
	coin *string
	travelRuleStatus *int32
	pendingQuestionnaire *bool
	startTime *int64
	endTime *int64
	offset *int32
	limit *int32
}

func (r V1APIWalletGetLocalentityDepositHistoryV1Request) Timestamp(timestamp int64) V1APIWalletGetLocalentityDepositHistoryV1Request {
	r.timestamp = &timestamp
	return r
}

// Comma(,) separated list of travel rule record Ids.
func (r V1APIWalletGetLocalentityDepositHistoryV1Request) TrId(trId string) V1APIWalletGetLocalentityDepositHistoryV1Request {
	r.trId = &trId
	return r
}

// Comma(,) separated list of transaction Ids.
func (r V1APIWalletGetLocalentityDepositHistoryV1Request) TxId(txId string) V1APIWalletGetLocalentityDepositHistoryV1Request {
	r.txId = &txId
	return r
}

// Comma(,) separated list of wallet tran Ids.
func (r V1APIWalletGetLocalentityDepositHistoryV1Request) TranId(tranId string) V1APIWalletGetLocalentityDepositHistoryV1Request {
	r.tranId = &tranId
	return r
}

func (r V1APIWalletGetLocalentityDepositHistoryV1Request) Network(network string) V1APIWalletGetLocalentityDepositHistoryV1Request {
	r.network = &network
	return r
}

func (r V1APIWalletGetLocalentityDepositHistoryV1Request) Coin(coin string) V1APIWalletGetLocalentityDepositHistoryV1Request {
	r.coin = &coin
	return r
}

// 0:Completed,1:Pending,2:Failed
func (r V1APIWalletGetLocalentityDepositHistoryV1Request) TravelRuleStatus(travelRuleStatus int32) V1APIWalletGetLocalentityDepositHistoryV1Request {
	r.travelRuleStatus = &travelRuleStatus
	return r
}

// true: Only return records that pending deposit questionnaire. false/not provided: return all records.
func (r V1APIWalletGetLocalentityDepositHistoryV1Request) PendingQuestionnaire(pendingQuestionnaire bool) V1APIWalletGetLocalentityDepositHistoryV1Request {
	r.pendingQuestionnaire = &pendingQuestionnaire
	return r
}

// Default: 90 days from current timestamp
func (r V1APIWalletGetLocalentityDepositHistoryV1Request) StartTime(startTime int64) V1APIWalletGetLocalentityDepositHistoryV1Request {
	r.startTime = &startTime
	return r
}

// Default: present timestamp
func (r V1APIWalletGetLocalentityDepositHistoryV1Request) EndTime(endTime int64) V1APIWalletGetLocalentityDepositHistoryV1Request {
	r.endTime = &endTime
	return r
}

// Default:0
func (r V1APIWalletGetLocalentityDepositHistoryV1Request) Offset(offset int32) V1APIWalletGetLocalentityDepositHistoryV1Request {
	r.offset = &offset
	return r
}

// Default:1000, Max:1000
func (r V1APIWalletGetLocalentityDepositHistoryV1Request) Limit(limit int32) V1APIWalletGetLocalentityDepositHistoryV1Request {
	r.limit = &limit
	return r
}

func (r V1APIWalletGetLocalentityDepositHistoryV1Request) Execute() ([]WalletGetLocalentityDepositHistoryV1RespItem, *http.Response, error) {
	return r.ApiService.WalletGetLocalentityDepositHistoryV1Execute(r)
}

/*
WalletGetLocalentityDepositHistoryV1 Deposit History (for local entities that required travel rule) (supporting network) (USER_DATA)

Fetch deposit history for local entities that required travel rule.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetLocalentityDepositHistoryV1Request
*/
func (a *V1APIService) WalletGetLocalentityDepositHistoryV1(ctx context.Context) V1APIWalletGetLocalentityDepositHistoryV1Request {
	return V1APIWalletGetLocalentityDepositHistoryV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WalletGetLocalentityDepositHistoryV1RespItem
func (a *V1APIService) WalletGetLocalentityDepositHistoryV1Execute(r V1APIWalletGetLocalentityDepositHistoryV1Request) ([]WalletGetLocalentityDepositHistoryV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WalletGetLocalentityDepositHistoryV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetLocalentityDepositHistoryV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/localentity/deposit/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.trId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trId", r.trId, "form", "")
	} else {
		var defaultValue string = ""
		r.trId = &defaultValue
	}
	if r.txId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "txId", r.txId, "form", "")
	} else {
		var defaultValue string = ""
		r.txId = &defaultValue
	}
	if r.tranId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tranId", r.tranId, "form", "")
	} else {
		var defaultValue string = ""
		r.tranId = &defaultValue
	}
	if r.network != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "network", r.network, "form", "")
	} else {
		var defaultValue string = ""
		r.network = &defaultValue
	}
	if r.coin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coin", r.coin, "form", "")
	} else {
		var defaultValue string = ""
		r.coin = &defaultValue
	}
	if r.travelRuleStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "travelRuleStatus", r.travelRuleStatus, "form", "")
	}
	if r.pendingQuestionnaire != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pendingQuestionnaire", r.pendingQuestionnaire, "form", "")
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetLocalentityVaspV1Request struct {
	ctx context.Context
	ApiService *V1APIService
}

func (r V1APIWalletGetLocalentityVaspV1Request) Execute() ([]WalletGetLocalentityVaspV1RespItem, *http.Response, error) {
	return r.ApiService.WalletGetLocalentityVaspV1Execute(r)
}

/*
WalletGetLocalentityVaspV1 Onboarded VASP list (for local entities that require travel rule) (supporting network) (USER_DATA)

Fetch the onboarded VASP list for local entities that required travel rule.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetLocalentityVaspV1Request
*/
func (a *V1APIService) WalletGetLocalentityVaspV1(ctx context.Context) V1APIWalletGetLocalentityVaspV1Request {
	return V1APIWalletGetLocalentityVaspV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WalletGetLocalentityVaspV1RespItem
func (a *V1APIService) WalletGetLocalentityVaspV1Execute(r V1APIWalletGetLocalentityVaspV1Request) ([]WalletGetLocalentityVaspV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WalletGetLocalentityVaspV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetLocalentityVaspV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/localentity/vasp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetLocalentityWithdrawHistoryV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	timestamp *int64
	trId *string
	txId *string
	withdrawOrderId *string
	network *string
	coin *string
	travelRuleStatus *int32
	offset *int32
	limit *int32
	startTime *int64
	endTime *int64
	recvWindow *int64
}

func (r V1APIWalletGetLocalentityWithdrawHistoryV1Request) Timestamp(timestamp int64) V1APIWalletGetLocalentityWithdrawHistoryV1Request {
	r.timestamp = &timestamp
	return r
}

// Comma(,) separated list of travel rule record Ids.
func (r V1APIWalletGetLocalentityWithdrawHistoryV1Request) TrId(trId string) V1APIWalletGetLocalentityWithdrawHistoryV1Request {
	r.trId = &trId
	return r
}

// Comma(,) separated list of transaction Ids.
func (r V1APIWalletGetLocalentityWithdrawHistoryV1Request) TxId(txId string) V1APIWalletGetLocalentityWithdrawHistoryV1Request {
	r.txId = &txId
	return r
}

// Comma(,) separated list of withdrawID defined by the client (i.e. client&amp;#39;s internal withdrawID).
func (r V1APIWalletGetLocalentityWithdrawHistoryV1Request) WithdrawOrderId(withdrawOrderId string) V1APIWalletGetLocalentityWithdrawHistoryV1Request {
	r.withdrawOrderId = &withdrawOrderId
	return r
}

func (r V1APIWalletGetLocalentityWithdrawHistoryV1Request) Network(network string) V1APIWalletGetLocalentityWithdrawHistoryV1Request {
	r.network = &network
	return r
}

func (r V1APIWalletGetLocalentityWithdrawHistoryV1Request) Coin(coin string) V1APIWalletGetLocalentityWithdrawHistoryV1Request {
	r.coin = &coin
	return r
}

// 0:Completed,1:Pending,2:Failed
func (r V1APIWalletGetLocalentityWithdrawHistoryV1Request) TravelRuleStatus(travelRuleStatus int32) V1APIWalletGetLocalentityWithdrawHistoryV1Request {
	r.travelRuleStatus = &travelRuleStatus
	return r
}

// Default: 0
func (r V1APIWalletGetLocalentityWithdrawHistoryV1Request) Offset(offset int32) V1APIWalletGetLocalentityWithdrawHistoryV1Request {
	r.offset = &offset
	return r
}

// Default: 1000, Max: 1000
func (r V1APIWalletGetLocalentityWithdrawHistoryV1Request) Limit(limit int32) V1APIWalletGetLocalentityWithdrawHistoryV1Request {
	r.limit = &limit
	return r
}

// Default: 90 days from current timestamp
func (r V1APIWalletGetLocalentityWithdrawHistoryV1Request) StartTime(startTime int64) V1APIWalletGetLocalentityWithdrawHistoryV1Request {
	r.startTime = &startTime
	return r
}

// Default: present timestamp
func (r V1APIWalletGetLocalentityWithdrawHistoryV1Request) EndTime(endTime int64) V1APIWalletGetLocalentityWithdrawHistoryV1Request {
	r.endTime = &endTime
	return r
}

func (r V1APIWalletGetLocalentityWithdrawHistoryV1Request) RecvWindow(recvWindow int64) V1APIWalletGetLocalentityWithdrawHistoryV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletGetLocalentityWithdrawHistoryV1Request) Execute() ([]WalletGetLocalentityWithdrawHistoryV1RespItem, *http.Response, error) {
	return r.ApiService.WalletGetLocalentityWithdrawHistoryV1Execute(r)
}

/*
WalletGetLocalentityWithdrawHistoryV1 Withdraw History (for local entities that require travel rule) (supporting network) (USER_DATA)

Fetch withdraw history for local entities that required travel rule.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetLocalentityWithdrawHistoryV1Request
*/
func (a *V1APIService) WalletGetLocalentityWithdrawHistoryV1(ctx context.Context) V1APIWalletGetLocalentityWithdrawHistoryV1Request {
	return V1APIWalletGetLocalentityWithdrawHistoryV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WalletGetLocalentityWithdrawHistoryV1RespItem
func (a *V1APIService) WalletGetLocalentityWithdrawHistoryV1Execute(r V1APIWalletGetLocalentityWithdrawHistoryV1Request) ([]WalletGetLocalentityWithdrawHistoryV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WalletGetLocalentityWithdrawHistoryV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetLocalentityWithdrawHistoryV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/localentity/withdraw/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.trId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trId", r.trId, "form", "")
	} else {
		var defaultValue string = ""
		r.trId = &defaultValue
	}
	if r.txId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "txId", r.txId, "form", "")
	} else {
		var defaultValue string = ""
		r.txId = &defaultValue
	}
	if r.withdrawOrderId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withdrawOrderId", r.withdrawOrderId, "form", "")
	} else {
		var defaultValue string = ""
		r.withdrawOrderId = &defaultValue
	}
	if r.network != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "network", r.network, "form", "")
	} else {
		var defaultValue string = ""
		r.network = &defaultValue
	}
	if r.coin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coin", r.coin, "form", "")
	} else {
		var defaultValue string = ""
		r.coin = &defaultValue
	}
	if r.travelRuleStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "travelRuleStatus", r.travelRuleStatus, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 1000
		r.limit = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetSpotDelistScheduleV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	timestamp *int64
	recvWindow *int64
}

func (r V1APIWalletGetSpotDelistScheduleV1Request) Timestamp(timestamp int64) V1APIWalletGetSpotDelistScheduleV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletGetSpotDelistScheduleV1Request) RecvWindow(recvWindow int64) V1APIWalletGetSpotDelistScheduleV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V1APIWalletGetSpotDelistScheduleV1Request) Execute() ([]WalletGetSpotDelistScheduleV1RespItem, *http.Response, error) {
	return r.ApiService.WalletGetSpotDelistScheduleV1Execute(r)
}

/*
WalletGetSpotDelistScheduleV1 Get Spot Delist Schedule (MARKET_DATA)

Get symbols delist schedule for spot

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetSpotDelistScheduleV1Request
*/
func (a *V1APIService) WalletGetSpotDelistScheduleV1(ctx context.Context) V1APIWalletGetSpotDelistScheduleV1Request {
	return V1APIWalletGetSpotDelistScheduleV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WalletGetSpotDelistScheduleV1RespItem
func (a *V1APIService) WalletGetSpotDelistScheduleV1Execute(r V1APIWalletGetSpotDelistScheduleV1Request) ([]WalletGetSpotDelistScheduleV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WalletGetSpotDelistScheduleV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetSpotDelistScheduleV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/spot/delist-schedule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetSpotOpenSymbolListV1Request struct {
	ctx context.Context
	ApiService *V1APIService
}

func (r V1APIWalletGetSpotOpenSymbolListV1Request) Execute() ([]WalletGetSpotOpenSymbolListV1RespItem, *http.Response, error) {
	return r.ApiService.WalletGetSpotOpenSymbolListV1Execute(r)
}

/*
WalletGetSpotOpenSymbolListV1 Get Open Symbol List (MARKET_DATA)

Get the list of symbols that are scheduled to be opened for trading in the market.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetSpotOpenSymbolListV1Request
*/
func (a *V1APIService) WalletGetSpotOpenSymbolListV1(ctx context.Context) V1APIWalletGetSpotOpenSymbolListV1Request {
	return V1APIWalletGetSpotOpenSymbolListV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WalletGetSpotOpenSymbolListV1RespItem
func (a *V1APIService) WalletGetSpotOpenSymbolListV1Execute(r V1APIWalletGetSpotOpenSymbolListV1Request) ([]WalletGetSpotOpenSymbolListV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WalletGetSpotOpenSymbolListV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetSpotOpenSymbolListV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/spot/open-symbol-list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletGetSystemStatusV1Request struct {
	ctx context.Context
	ApiService *V1APIService
}

func (r V1APIWalletGetSystemStatusV1Request) Execute() (*WalletGetSystemStatusV1Resp, *http.Response, error) {
	return r.ApiService.WalletGetSystemStatusV1Execute(r)
}

/*
WalletGetSystemStatusV1 System Status (System)

Fetch system status.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletGetSystemStatusV1Request
*/
func (a *V1APIService) WalletGetSystemStatusV1(ctx context.Context) V1APIWalletGetSystemStatusV1Request {
	return V1APIWalletGetSystemStatusV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletGetSystemStatusV1Resp
func (a *V1APIService) WalletGetSystemStatusV1Execute(r V1APIWalletGetSystemStatusV1Request) (*WalletGetSystemStatusV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletGetSystemStatusV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletGetSystemStatusV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/system/status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	beneficiaryPii *string
	depositId *string
	questionnaire *string
	signature *string
	subAccountId *string
	timestamp *int64
	address *string
	addressTag *string
	amount *map[string]interface{}
	coin *string
	network *string
}

func (r V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) BeneficiaryPii(beneficiaryPii string) V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	r.beneficiaryPii = &beneficiaryPii
	return r
}

func (r V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) DepositId(depositId string) V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	r.depositId = &depositId
	return r
}

func (r V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) Questionnaire(questionnaire string) V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	r.questionnaire = &questionnaire
	return r
}

func (r V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) Signature(signature string) V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	r.signature = &signature
	return r
}

func (r V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) SubAccountId(subAccountId string) V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	r.subAccountId = &subAccountId
	return r
}

func (r V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) Timestamp(timestamp int64) V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) Address(address string) V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	r.address = &address
	return r
}

func (r V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) AddressTag(addressTag string) V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	r.addressTag = &addressTag
	return r
}

func (r V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) Amount(amount map[string]interface{}) V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	r.amount = &amount
	return r
}

func (r V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) Coin(coin string) V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	r.coin = &coin
	return r
}

func (r V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) Network(network string) V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	r.network = &network
	return r
}

func (r V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) Execute() (*WalletUpdateLocalentityBrokerDepositProvideInfoV1Resp, *http.Response, error) {
	return r.ApiService.WalletUpdateLocalentityBrokerDepositProvideInfoV1Execute(r)
}

/*
WalletUpdateLocalentityBrokerDepositProvideInfoV1 Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)

Submit questionnaire for brokers of local entities that require travel rule.
The questionnaire is only applies to transactions from un-hosted wallets or VASPs that are not
yet onboarded with GTR.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request
*/
func (a *V1APIService) WalletUpdateLocalentityBrokerDepositProvideInfoV1(ctx context.Context) V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	return V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletUpdateLocalentityBrokerDepositProvideInfoV1Resp
func (a *V1APIService) WalletUpdateLocalentityBrokerDepositProvideInfoV1Execute(r V1APIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) (*WalletUpdateLocalentityBrokerDepositProvideInfoV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletUpdateLocalentityBrokerDepositProvideInfoV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletUpdateLocalentityBrokerDepositProvideInfoV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/localentity/broker/deposit/provide-info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.beneficiaryPii == nil {
		return localVarReturnValue, nil, reportError("beneficiaryPii is required and must be specified")
	}
	if r.depositId == nil {
		return localVarReturnValue, nil, reportError("depositId is required and must be specified")
	}
	if r.questionnaire == nil {
		return localVarReturnValue, nil, reportError("questionnaire is required and must be specified")
	}
	if r.signature == nil {
		return localVarReturnValue, nil, reportError("signature is required and must be specified")
	}
	if r.subAccountId == nil {
		return localVarReturnValue, nil, reportError("subAccountId is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.address != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "address", r.address, "", "")
	}
	if r.addressTag != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "addressTag", r.addressTag, "", "")
	}
	if r.amount != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "amount", r.amount, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "beneficiaryPii", r.beneficiaryPii, "", "")
	if r.coin != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "coin", r.coin, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "depositId", r.depositId, "", "")
	if r.network != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "network", r.network, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "questionnaire", r.questionnaire, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "signature", r.signature, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "subAccountId", r.subAccountId, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V1APIWalletUpdateLocalentityDepositProvideInfoV1Request struct {
	ctx context.Context
	ApiService *V1APIService
	questionnaire *string
	timestamp *int64
	tranId *int64
}

func (r V1APIWalletUpdateLocalentityDepositProvideInfoV1Request) Questionnaire(questionnaire string) V1APIWalletUpdateLocalentityDepositProvideInfoV1Request {
	r.questionnaire = &questionnaire
	return r
}

func (r V1APIWalletUpdateLocalentityDepositProvideInfoV1Request) Timestamp(timestamp int64) V1APIWalletUpdateLocalentityDepositProvideInfoV1Request {
	r.timestamp = &timestamp
	return r
}

func (r V1APIWalletUpdateLocalentityDepositProvideInfoV1Request) TranId(tranId int64) V1APIWalletUpdateLocalentityDepositProvideInfoV1Request {
	r.tranId = &tranId
	return r
}

func (r V1APIWalletUpdateLocalentityDepositProvideInfoV1Request) Execute() (*WalletUpdateLocalentityDepositProvideInfoV1Resp, *http.Response, error) {
	return r.ApiService.WalletUpdateLocalentityDepositProvideInfoV1Execute(r)
}

/*
WalletUpdateLocalentityDepositProvideInfoV1 Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)

Submit questionnaire for local entities that require travel rule.
The questionnaire is only applies to transactions from unhosted wallets or VASPs that are not
yet onboarded with GTR.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V1APIWalletUpdateLocalentityDepositProvideInfoV1Request
*/
func (a *V1APIService) WalletUpdateLocalentityDepositProvideInfoV1(ctx context.Context) V1APIWalletUpdateLocalentityDepositProvideInfoV1Request {
	return V1APIWalletUpdateLocalentityDepositProvideInfoV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletUpdateLocalentityDepositProvideInfoV1Resp
func (a *V1APIService) WalletUpdateLocalentityDepositProvideInfoV1Execute(r V1APIWalletUpdateLocalentityDepositProvideInfoV1Request) (*WalletUpdateLocalentityDepositProvideInfoV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletUpdateLocalentityDepositProvideInfoV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.WalletUpdateLocalentityDepositProvideInfoV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/localentity/deposit/provide-info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.questionnaire == nil {
		return localVarReturnValue, nil, reportError("questionnaire is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}
	if r.tranId == nil {
		return localVarReturnValue, nil, reportError("tranId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "questionnaire", r.questionnaire, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "tranId", r.tranId, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
Binance Wallet API

OpenAPI specification for Binance exchange - Wallet API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package wallet

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// TravelRuleAPIService TravelRuleAPI service
type TravelRuleAPIService service

type TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request struct {
	ctx context.Context
	ApiService *TravelRuleAPIService
	address *string
	amount *map[string]interface{}
	coin *string
	originatorPii *string
	questionnaire *string
	signature *string
	subAccountId *string
	timestamp *int64
	withdrawOrderId *string
	addressName *string
	addressTag *string
	network *string
	transactionFeeFlag *bool
	walletType *int32
}

func (r TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request) Address(address string) TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.address = &address
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request) Amount(amount map[string]interface{}) TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.amount = &amount
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request) Coin(coin string) TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.coin = &coin
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request) OriginatorPii(originatorPii string) TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.originatorPii = &originatorPii
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request) Questionnaire(questionnaire string) TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.questionnaire = &questionnaire
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request) Signature(signature string) TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.signature = &signature
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request) SubAccountId(subAccountId string) TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.subAccountId = &subAccountId
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request) Timestamp(timestamp int64) TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.timestamp = &timestamp
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request) WithdrawOrderId(withdrawOrderId string) TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.withdrawOrderId = &withdrawOrderId
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request) AddressName(addressName string) TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.addressName = &addressName
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request) AddressTag(addressTag string) TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.addressTag = &addressTag
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request) Network(network string) TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.network = &network
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request) TransactionFeeFlag(transactionFeeFlag bool) TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.transactionFeeFlag = &transactionFeeFlag
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request) WalletType(walletType int32) TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	r.walletType = &walletType
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request) Execute() (*WalletCreateLocalentityBrokerWithdrawApplyV1Resp, *http.Response, error) {
	return r.ApiService.WalletCreateLocalentityBrokerWithdrawApplyV1Execute(r)
}

/*
WalletCreateLocalentityBrokerWithdrawApplyV1 Broker Withdraw (for brokers of local entities that require travel rule) (USER_DATA)

Submit a withdrawal request for brokers of local entities that required travel rule.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request
*/
func (a *TravelRuleAPIService) WalletCreateLocalentityBrokerWithdrawApplyV1(ctx context.Context) TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request {
	return TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletCreateLocalentityBrokerWithdrawApplyV1Resp
func (a *TravelRuleAPIService) WalletCreateLocalentityBrokerWithdrawApplyV1Execute(r TravelRuleAPIWalletCreateLocalentityBrokerWithdrawApplyV1Request) (*WalletCreateLocalentityBrokerWithdrawApplyV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletCreateLocalentityBrokerWithdrawApplyV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TravelRuleAPIService.WalletCreateLocalentityBrokerWithdrawApplyV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/localentity/broker/withdraw/apply"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.address == nil {
		return localVarReturnValue, nil, reportError("address is required and must be specified")
	}
	if r.amount == nil {
		return localVarReturnValue, nil, reportError("amount is required and must be specified")
	}
	if r.coin == nil {
		return localVarReturnValue, nil, reportError("coin is required and must be specified")
	}
	if r.originatorPii == nil {
		return localVarReturnValue, nil, reportError("originatorPii is required and must be specified")
	}
	if r.questionnaire == nil {
		return localVarReturnValue, nil, reportError("questionnaire is required and must be specified")
	}
	if r.signature == nil {
		return localVarReturnValue, nil, reportError("signature is required and must be specified")
	}
	if r.subAccountId == nil {
		return localVarReturnValue, nil, reportError("subAccountId is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}
	if r.withdrawOrderId == nil {
		return localVarReturnValue, nil, reportError("withdrawOrderId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "address", r.address, "", "")
	if r.addressName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "addressName", r.addressName, "", "")
	}
	if r.addressTag != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "addressTag", r.addressTag, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "amount", r.amount, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "coin", r.coin, "", "")
	if r.network != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "network", r.network, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "originatorPii", r.originatorPii, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "questionnaire", r.questionnaire, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "signature", r.signature, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "subAccountId", r.subAccountId, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.transactionFeeFlag != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "transactionFeeFlag", r.transactionFeeFlag, "", "")
	}
	if r.walletType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "walletType", r.walletType, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "withdrawOrderId", r.withdrawOrderId, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request struct {
	ctx context.Context
	ApiService *TravelRuleAPIService
	address *string
	amount *string
	coin *string
	questionnaire *string
	timestamp *int64
	addressTag *string
	name *string
	network *string
	recvWindow *int64
	transactionFeeFlag *bool
	walletType *int32
	withdrawOrderId *string
}

func (r TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request) Address(address string) TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request {
	r.address = &address
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request) Amount(amount string) TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request {
	r.amount = &amount
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request) Coin(coin string) TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request {
	r.coin = &coin
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request) Questionnaire(questionnaire string) TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request {
	r.questionnaire = &questionnaire
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request) Timestamp(timestamp int64) TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request {
	r.timestamp = &timestamp
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request) AddressTag(addressTag string) TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request {
	r.addressTag = &addressTag
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request) Name(name string) TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request {
	r.name = &name
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request) Network(network string) TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request {
	r.network = &network
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request) RecvWindow(recvWindow int64) TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request) TransactionFeeFlag(transactionFeeFlag bool) TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request {
	r.transactionFeeFlag = &transactionFeeFlag
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request) WalletType(walletType int32) TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request {
	r.walletType = &walletType
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request) WithdrawOrderId(withdrawOrderId string) TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request {
	r.withdrawOrderId = &withdrawOrderId
	return r
}

func (r TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request) Execute() (*WalletCreateLocalentityWithdrawApplyV1Resp, *http.Response, error) {
	return r.ApiService.WalletCreateLocalentityWithdrawApplyV1Execute(r)
}

/*
WalletCreateLocalentityWithdrawApplyV1 Withdraw (for local entities that require travel rule) (USER_DATA)

Submit a withdrawal request for local entities that required travel rule.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request
*/
func (a *TravelRuleAPIService) WalletCreateLocalentityWithdrawApplyV1(ctx context.Context) TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request {
	return TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletCreateLocalentityWithdrawApplyV1Resp
func (a *TravelRuleAPIService) WalletCreateLocalentityWithdrawApplyV1Execute(r TravelRuleAPIWalletCreateLocalentityWithdrawApplyV1Request) (*WalletCreateLocalentityWithdrawApplyV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletCreateLocalentityWithdrawApplyV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TravelRuleAPIService.WalletCreateLocalentityWithdrawApplyV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/localentity/withdraw/apply"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.address == nil {
		return localVarReturnValue, nil, reportError("address is required and must be specified")
	}
	if r.amount == nil {
		return localVarReturnValue, nil, reportError("amount is required and must be specified")
	}
	if r.coin == nil {
		return localVarReturnValue, nil, reportError("coin is required and must be specified")
	}
	if r.questionnaire == nil {
		return localVarReturnValue, nil, reportError("questionnaire is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "address", r.address, "", "")
	if r.addressTag != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "addressTag", r.addressTag, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "amount", r.amount, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "coin", r.coin, "", "")
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "name", r.name, "", "")
	}
	if r.network != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "network", r.network, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "questionnaire", r.questionnaire, "", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.transactionFeeFlag != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "transactionFeeFlag", r.transactionFeeFlag, "", "")
	}
	if r.walletType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "walletType", r.walletType, "", "")
	}
	if r.withdrawOrderId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "withdrawOrderId", r.withdrawOrderId, "", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request struct {
	ctx context.Context
	ApiService *TravelRuleAPIService
	timestamp *int64
	trId *string
	txId *string
	tranId *string
	network *string
	coin *string
	travelRuleStatus *int32
	pendingQuestionnaire *bool
	startTime *int64
	endTime *int64
	offset *int32
	limit *int32
}

func (r TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request) Timestamp(timestamp int64) TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request {
	r.timestamp = &timestamp
	return r
}

// Comma(,) separated list of travel rule record Ids.
func (r TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request) TrId(trId string) TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request {
	r.trId = &trId
	return r
}

// Comma(,) separated list of transaction Ids.
func (r TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request) TxId(txId string) TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request {
	r.txId = &txId
	return r
}

// Comma(,) separated list of wallet tran Ids.
func (r TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request) TranId(tranId string) TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request {
	r.tranId = &tranId
	return r
}

func (r TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request) Network(network string) TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request {
	r.network = &network
	return r
}

func (r TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request) Coin(coin string) TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request {
	r.coin = &coin
	return r
}

// 0:Completed,1:Pending,2:Failed
func (r TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request) TravelRuleStatus(travelRuleStatus int32) TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request {
	r.travelRuleStatus = &travelRuleStatus
	return r
}

// true: Only return records that pending deposit questionnaire. false/not provided: return all records.
func (r TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request) PendingQuestionnaire(pendingQuestionnaire bool) TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request {
	r.pendingQuestionnaire = &pendingQuestionnaire
	return r
}

// Default: 90 days from current timestamp
func (r TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request) StartTime(startTime int64) TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request {
	r.startTime = &startTime
	return r
}

// Default: present timestamp
func (r TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request) EndTime(endTime int64) TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request {
	r.endTime = &endTime
	return r
}

// Default:0
func (r TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request) Offset(offset int32) TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request {
	r.offset = &offset
	return r
}

// Default:1000, Max:1000
func (r TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request) Limit(limit int32) TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request {
	r.limit = &limit
	return r
}

func (r TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request) Execute() ([]WalletGetLocalentityDepositHistoryV1RespItem, *http.Response, error) {
	return r.ApiService.WalletGetLocalentityDepositHistoryV1Execute(r)
}

/*
WalletGetLocalentityDepositHistoryV1 Deposit History (for local entities that required travel rule) (supporting network) (USER_DATA)

Fetch deposit history for local entities that required travel rule.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request
*/
func (a *TravelRuleAPIService) WalletGetLocalentityDepositHistoryV1(ctx context.Context) TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request {
	return TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WalletGetLocalentityDepositHistoryV1RespItem
func (a *TravelRuleAPIService) WalletGetLocalentityDepositHistoryV1Execute(r TravelRuleAPIWalletGetLocalentityDepositHistoryV1Request) ([]WalletGetLocalentityDepositHistoryV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WalletGetLocalentityDepositHistoryV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TravelRuleAPIService.WalletGetLocalentityDepositHistoryV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/localentity/deposit/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.trId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trId", r.trId, "form", "")
	} else {
		var defaultValue string = ""
		r.trId = &defaultValue
	}
	if r.txId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "txId", r.txId, "form", "")
	} else {
		var defaultValue string = ""
		r.txId = &defaultValue
	}
	if r.tranId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tranId", r.tranId, "form", "")
	} else {
		var defaultValue string = ""
		r.tranId = &defaultValue
	}
	if r.network != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "network", r.network, "form", "")
	} else {
		var defaultValue string = ""
		r.network = &defaultValue
	}
	if r.coin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coin", r.coin, "form", "")
	} else {
		var defaultValue string = ""
		r.coin = &defaultValue
	}
	if r.travelRuleStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "travelRuleStatus", r.travelRuleStatus, "form", "")
	}
	if r.pendingQuestionnaire != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pendingQuestionnaire", r.pendingQuestionnaire, "form", "")
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TravelRuleAPIWalletGetLocalentityVaspV1Request struct {
	ctx context.Context
	ApiService *TravelRuleAPIService
}

func (r TravelRuleAPIWalletGetLocalentityVaspV1Request) Execute() ([]WalletGetLocalentityVaspV1RespItem, *http.Response, error) {
	return r.ApiService.WalletGetLocalentityVaspV1Execute(r)
}

/*
WalletGetLocalentityVaspV1 Onboarded VASP list (for local entities that require travel rule) (supporting network) (USER_DATA)

Fetch the onboarded VASP list for local entities that required travel rule.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return TravelRuleAPIWalletGetLocalentityVaspV1Request
*/
func (a *TravelRuleAPIService) WalletGetLocalentityVaspV1(ctx context.Context) TravelRuleAPIWalletGetLocalentityVaspV1Request {
	return TravelRuleAPIWalletGetLocalentityVaspV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WalletGetLocalentityVaspV1RespItem
func (a *TravelRuleAPIService) WalletGetLocalentityVaspV1Execute(r TravelRuleAPIWalletGetLocalentityVaspV1Request) ([]WalletGetLocalentityVaspV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WalletGetLocalentityVaspV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TravelRuleAPIService.WalletGetLocalentityVaspV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/localentity/vasp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request struct {
	ctx context.Context
	ApiService *TravelRuleAPIService
	timestamp *int64
	trId *string
	txId *string
	withdrawOrderId *string
	network *string
	coin *string
	travelRuleStatus *int32
	offset *int32
	limit *int32
	startTime *int64
	endTime *int64
	recvWindow *int64
}

func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request) Timestamp(timestamp int64) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request {
	r.timestamp = &timestamp
	return r
}

// Comma(,) separated list of travel rule record Ids.
func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request) TrId(trId string) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request {
	r.trId = &trId
	return r
}

// Comma(,) separated list of transaction Ids.
func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request) TxId(txId string) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request {
	r.txId = &txId
	return r
}

// Comma(,) separated list of withdrawID defined by the client (i.e. client&amp;#39;s internal withdrawID).
func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request) WithdrawOrderId(withdrawOrderId string) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request {
	r.withdrawOrderId = &withdrawOrderId
	return r
}

func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request) Network(network string) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request {
	r.network = &network
	return r
}

func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request) Coin(coin string) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request {
	r.coin = &coin
	return r
}

// 0:Completed,1:Pending,2:Failed
func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request) TravelRuleStatus(travelRuleStatus int32) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request {
	r.travelRuleStatus = &travelRuleStatus
	return r
}

// Default: 0
func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request) Offset(offset int32) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request {
	r.offset = &offset
	return r
}

// Default: 1000, Max: 1000
func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request) Limit(limit int32) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request {
	r.limit = &limit
	return r
}

// Default: 90 days from current timestamp
func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request) StartTime(startTime int64) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request {
	r.startTime = &startTime
	return r
}

// Default: present timestamp
func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request) EndTime(endTime int64) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request {
	r.endTime = &endTime
	return r
}

func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request) RecvWindow(recvWindow int64) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request) Execute() ([]WalletGetLocalentityWithdrawHistoryV1RespItem, *http.Response, error) {
	return r.ApiService.WalletGetLocalentityWithdrawHistoryV1Execute(r)
}

/*
WalletGetLocalentityWithdrawHistoryV1 Withdraw History (for local entities that require travel rule) (supporting network) (USER_DATA)

Fetch withdraw history for local entities that required travel rule.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request
*/
func (a *TravelRuleAPIService) WalletGetLocalentityWithdrawHistoryV1(ctx context.Context) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request {
	return TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WalletGetLocalentityWithdrawHistoryV1RespItem
func (a *TravelRuleAPIService) WalletGetLocalentityWithdrawHistoryV1Execute(r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV1Request) ([]WalletGetLocalentityWithdrawHistoryV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WalletGetLocalentityWithdrawHistoryV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TravelRuleAPIService.WalletGetLocalentityWithdrawHistoryV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/localentity/withdraw/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.trId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trId", r.trId, "form", "")
	} else {
		var defaultValue string = ""
		r.trId = &defaultValue
	}
	if r.txId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "txId", r.txId, "form", "")
	} else {
		var defaultValue string = ""
		r.txId = &defaultValue
	}
	if r.withdrawOrderId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withdrawOrderId", r.withdrawOrderId, "form", "")
	} else {
		var defaultValue string = ""
		r.withdrawOrderId = &defaultValue
	}
	if r.network != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "network", r.network, "form", "")
	} else {
		var defaultValue string = ""
		r.network = &defaultValue
	}
	if r.coin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coin", r.coin, "form", "")
	} else {
		var defaultValue string = ""
		r.coin = &defaultValue
	}
	if r.travelRuleStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "travelRuleStatus", r.travelRuleStatus, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 1000
		r.limit = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request struct {
	ctx context.Context
	ApiService *TravelRuleAPIService
	timestamp *int64
	trId *string
	txId *string
	withdrawOrderId *string
	network *string
	coin *string
	travelRuleStatus *int32
	offset *int32
	limit *int32
	startTime *int64
	endTime *int64
	recvWindow *int64
}

func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request) Timestamp(timestamp int64) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request {
	r.timestamp = &timestamp
	return r
}

// Comma(,) separated list of travel rule record Ids.
func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request) TrId(trId string) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request {
	r.trId = &trId
	return r
}

// Comma(,) separated list of transaction Ids.
func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request) TxId(txId string) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request {
	r.txId = &txId
	return r
}

// Withdraw ID defined by the client (i.e. client&amp;#39;s internal withdrawID).
func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request) WithdrawOrderId(withdrawOrderId string) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request {
	r.withdrawOrderId = &withdrawOrderId
	return r
}

func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request) Network(network string) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request {
	r.network = &network
	return r
}

func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request) Coin(coin string) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request {
	r.coin = &coin
	return r
}

// 0:Completed,1:Pending,2:Failed
func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request) TravelRuleStatus(travelRuleStatus int32) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request {
	r.travelRuleStatus = &travelRuleStatus
	return r
}

// Default: 0
func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request) Offset(offset int32) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request {
	r.offset = &offset
	return r
}

// Default: 1000, Max: 1000
func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request) Limit(limit int32) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request {
	r.limit = &limit
	return r
}

// Default: 90 days from current timestamp
func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request) StartTime(startTime int64) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request {
	r.startTime = &startTime
	return r
}

// Default: present timestamp
func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request) EndTime(endTime int64) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request {
	r.endTime = &endTime
	return r
}

func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request) RecvWindow(recvWindow int64) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request {
	r.recvWindow = &recvWindow
	return r
}

func (r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request) Execute() ([]WalletGetLocalentityWithdrawHistoryV2RespItem, *http.Response, error) {
	return r.ApiService.WalletGetLocalentityWithdrawHistoryV2Execute(r)
}

/*
WalletGetLocalentityWithdrawHistoryV2 Withdraw History V2 (for local entities that require travel rule) (supporting network) (USER_DATA)

Fetch withdraw history for local entities that required travel rule.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request
*/
func (a *TravelRuleAPIService) WalletGetLocalentityWithdrawHistoryV2(ctx context.Context) TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request {
	return TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WalletGetLocalentityWithdrawHistoryV2RespItem
func (a *TravelRuleAPIService) WalletGetLocalentityWithdrawHistoryV2Execute(r TravelRuleAPIWalletGetLocalentityWithdrawHistoryV2Request) ([]WalletGetLocalentityWithdrawHistoryV2RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WalletGetLocalentityWithdrawHistoryV2RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TravelRuleAPIService.WalletGetLocalentityWithdrawHistoryV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v2/localentity/withdraw/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.trId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trId", r.trId, "form", "")
	} else {
		var defaultValue string = ""
		r.trId = &defaultValue
	}
	if r.txId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "txId", r.txId, "form", "")
	} else {
		var defaultValue string = ""
		r.txId = &defaultValue
	}
	if r.withdrawOrderId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withdrawOrderId", r.withdrawOrderId, "form", "")
	} else {
		var defaultValue string = ""
		r.withdrawOrderId = &defaultValue
	}
	if r.network != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "network", r.network, "form", "")
	} else {
		var defaultValue string = ""
		r.network = &defaultValue
	}
	if r.coin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coin", r.coin, "form", "")
	} else {
		var defaultValue string = ""
		r.coin = &defaultValue
	}
	if r.travelRuleStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "travelRuleStatus", r.travelRuleStatus, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 1000
		r.limit = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request struct {
	ctx context.Context
	ApiService *TravelRuleAPIService
	beneficiaryPii *string
	depositId *string
	questionnaire *string
	signature *string
	subAccountId *string
	timestamp *int64
	address *string
	addressTag *string
	amount *map[string]interface{}
	coin *string
	network *string
}

func (r TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) BeneficiaryPii(beneficiaryPii string) TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	r.beneficiaryPii = &beneficiaryPii
	return r
}

func (r TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) DepositId(depositId string) TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	r.depositId = &depositId
	return r
}

func (r TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) Questionnaire(questionnaire string) TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	r.questionnaire = &questionnaire
	return r
}

func (r TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) Signature(signature string) TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	r.signature = &signature
	return r
}

func (r TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) SubAccountId(subAccountId string) TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	r.subAccountId = &subAccountId
	return r
}

func (r TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) Timestamp(timestamp int64) TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	r.timestamp = &timestamp
	return r
}

func (r TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) Address(address string) TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	r.address = &address
	return r
}

func (r TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) AddressTag(addressTag string) TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	r.addressTag = &addressTag
	return r
}

func (r TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) Amount(amount map[string]interface{}) TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	r.amount = &amount
	return r
}

func (r TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) Coin(coin string) TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	r.coin = &coin
	return r
}

func (r TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) Network(network string) TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	r.network = &network
	return r
}

func (r TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) Execute() (*WalletUpdateLocalentityBrokerDepositProvideInfoV1Resp, *http.Response, error) {
	return r.ApiService.WalletUpdateLocalentityBrokerDepositProvideInfoV1Execute(r)
}

/*
WalletUpdateLocalentityBrokerDepositProvideInfoV1 Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)

Submit questionnaire for brokers of local entities that require travel rule.
The questionnaire is only applies to transactions from un-hosted wallets or VASPs that are not
yet onboarded with GTR.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request
*/
func (a *TravelRuleAPIService) WalletUpdateLocalentityBrokerDepositProvideInfoV1(ctx context.Context) TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
	return TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletUpdateLocalentityBrokerDepositProvideInfoV1Resp
func (a *TravelRuleAPIService) WalletUpdateLocalentityBrokerDepositProvideInfoV1Execute(r TravelRuleAPIWalletUpdateLocalentityBrokerDepositProvideInfoV1Request) (*WalletUpdateLocalentityBrokerDepositProvideInfoV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletUpdateLocalentityBrokerDepositProvideInfoV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TravelRuleAPIService.WalletUpdateLocalentityBrokerDepositProvideInfoV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/localentity/broker/deposit/provide-info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.beneficiaryPii == nil {
		return localVarReturnValue, nil, reportError("beneficiaryPii is required and must be specified")
	}
	if r.depositId == nil {
		return localVarReturnValue, nil, reportError("depositId is required and must be specified")
	}
	if r.questionnaire == nil {
		return localVarReturnValue, nil, reportError("questionnaire is required and must be specified")
	}
	if r.signature == nil {
		return localVarReturnValue, nil, reportError("signature is required and must be specified")
	}
	if r.subAccountId == nil {
		return localVarReturnValue, nil, reportError("subAccountId is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.address != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "address", r.address, "", "")
	}
	if r.addressTag != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "addressTag", r.addressTag, "", "")
	}
	if r.amount != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "amount", r.amount, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "beneficiaryPii", r.beneficiaryPii, "", "")
	if r.coin != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "coin", r.coin, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "depositId", r.depositId, "", "")
	if r.network != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "network", r.network, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "questionnaire", r.questionnaire, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "signature", r.signature, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "subAccountId", r.subAccountId, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TravelRuleAPIWalletUpdateLocalentityDepositProvideInfoV1Request struct {
	ctx context.Context
	ApiService *TravelRuleAPIService
	questionnaire *string
	timestamp *int64
	tranId *int64
}

func (r TravelRuleAPIWalletUpdateLocalentityDepositProvideInfoV1Request) Questionnaire(questionnaire string) TravelRuleAPIWalletUpdateLocalentityDepositProvideInfoV1Request {
	r.questionnaire = &questionnaire
	return r
}

func (r TravelRuleAPIWalletUpdateLocalentityDepositProvideInfoV1Request) Timestamp(timestamp int64) TravelRuleAPIWalletUpdateLocalentityDepositProvideInfoV1Request {
	r.timestamp = &timestamp
	return r
}

func (r TravelRuleAPIWalletUpdateLocalentityDepositProvideInfoV1Request) TranId(tranId int64) TravelRuleAPIWalletUpdateLocalentityDepositProvideInfoV1Request {
	r.tranId = &tranId
	return r
}

func (r TravelRuleAPIWalletUpdateLocalentityDepositProvideInfoV1Request) Execute() (*WalletUpdateLocalentityDepositProvideInfoV1Resp, *http.Response, error) {
	return r.ApiService.WalletUpdateLocalentityDepositProvideInfoV1Execute(r)
}

/*
WalletUpdateLocalentityDepositProvideInfoV1 Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)

Submit questionnaire for local entities that require travel rule.
The questionnaire is only applies to transactions from unhosted wallets or VASPs that are not
yet onboarded with GTR.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return TravelRuleAPIWalletUpdateLocalentityDepositProvideInfoV1Request
*/
func (a *TravelRuleAPIService) WalletUpdateLocalentityDepositProvideInfoV1(ctx context.Context) TravelRuleAPIWalletUpdateLocalentityDepositProvideInfoV1Request {
	return TravelRuleAPIWalletUpdateLocalentityDepositProvideInfoV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletUpdateLocalentityDepositProvideInfoV1Resp
func (a *TravelRuleAPIService) WalletUpdateLocalentityDepositProvideInfoV1Execute(r TravelRuleAPIWalletUpdateLocalentityDepositProvideInfoV1Request) (*WalletUpdateLocalentityDepositProvideInfoV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletUpdateLocalentityDepositProvideInfoV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TravelRuleAPIService.WalletUpdateLocalentityDepositProvideInfoV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/localentity/deposit/provide-info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.questionnaire == nil {
		return localVarReturnValue, nil, reportError("questionnaire is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}
	if r.tranId == nil {
		return localVarReturnValue, nil, reportError("tranId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "questionnaire", r.questionnaire, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "tranId", r.tranId, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

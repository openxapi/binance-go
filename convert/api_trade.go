/*
Binance Convert API

OpenAPI specification for Binance exchange - Convert API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package convert

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// TradeAPIService TradeAPI service
type TradeAPIService service

type ApiConvertCreateConvertAcceptQuoteV1Request struct {
	ctx context.Context
	ApiService *TradeAPIService
	quoteId *string
	timestamp *int64
	recvWindow *int64
}

func (r ApiConvertCreateConvertAcceptQuoteV1Request) QuoteId(quoteId string) ApiConvertCreateConvertAcceptQuoteV1Request {
	r.quoteId = &quoteId
	return r
}

func (r ApiConvertCreateConvertAcceptQuoteV1Request) Timestamp(timestamp int64) ApiConvertCreateConvertAcceptQuoteV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiConvertCreateConvertAcceptQuoteV1Request) RecvWindow(recvWindow int64) ApiConvertCreateConvertAcceptQuoteV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiConvertCreateConvertAcceptQuoteV1Request) Execute() (*ConvertCreateConvertAcceptQuoteV1Resp, *http.Response, error) {
	return r.ApiService.ConvertCreateConvertAcceptQuoteV1Execute(r)
}

/*
ConvertCreateConvertAcceptQuoteV1 Accept Quote (TRADE)

Accept the offered quote by quote ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConvertCreateConvertAcceptQuoteV1Request
*/
func (a *TradeAPIService) ConvertCreateConvertAcceptQuoteV1(ctx context.Context) ApiConvertCreateConvertAcceptQuoteV1Request {
	return ApiConvertCreateConvertAcceptQuoteV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConvertCreateConvertAcceptQuoteV1Resp
func (a *TradeAPIService) ConvertCreateConvertAcceptQuoteV1Execute(r ApiConvertCreateConvertAcceptQuoteV1Request) (*ConvertCreateConvertAcceptQuoteV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConvertCreateConvertAcceptQuoteV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TradeAPIService.ConvertCreateConvertAcceptQuoteV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/convert/acceptQuote"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.quoteId == nil {
		return localVarReturnValue, nil, reportError("quoteId is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "quoteId", r.quoteId, "", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConvertCreateConvertGetQuoteV1Request struct {
	ctx context.Context
	ApiService *TradeAPIService
	fromAsset *string
	timestamp *int64
	toAsset *string
	fromAmount *string
	recvWindow *int64
	toAmount *string
	validTime *string
	walletType *string
}

func (r ApiConvertCreateConvertGetQuoteV1Request) FromAsset(fromAsset string) ApiConvertCreateConvertGetQuoteV1Request {
	r.fromAsset = &fromAsset
	return r
}

func (r ApiConvertCreateConvertGetQuoteV1Request) Timestamp(timestamp int64) ApiConvertCreateConvertGetQuoteV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiConvertCreateConvertGetQuoteV1Request) ToAsset(toAsset string) ApiConvertCreateConvertGetQuoteV1Request {
	r.toAsset = &toAsset
	return r
}

func (r ApiConvertCreateConvertGetQuoteV1Request) FromAmount(fromAmount string) ApiConvertCreateConvertGetQuoteV1Request {
	r.fromAmount = &fromAmount
	return r
}

func (r ApiConvertCreateConvertGetQuoteV1Request) RecvWindow(recvWindow int64) ApiConvertCreateConvertGetQuoteV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiConvertCreateConvertGetQuoteV1Request) ToAmount(toAmount string) ApiConvertCreateConvertGetQuoteV1Request {
	r.toAmount = &toAmount
	return r
}

func (r ApiConvertCreateConvertGetQuoteV1Request) ValidTime(validTime string) ApiConvertCreateConvertGetQuoteV1Request {
	r.validTime = &validTime
	return r
}

func (r ApiConvertCreateConvertGetQuoteV1Request) WalletType(walletType string) ApiConvertCreateConvertGetQuoteV1Request {
	r.walletType = &walletType
	return r
}

func (r ApiConvertCreateConvertGetQuoteV1Request) Execute() (*ConvertCreateConvertGetQuoteV1Resp, *http.Response, error) {
	return r.ApiService.ConvertCreateConvertGetQuoteV1Execute(r)
}

/*
ConvertCreateConvertGetQuoteV1 Send Quote Request(USER_DATA)

Request a quote for the requested token pairs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConvertCreateConvertGetQuoteV1Request
*/
func (a *TradeAPIService) ConvertCreateConvertGetQuoteV1(ctx context.Context) ApiConvertCreateConvertGetQuoteV1Request {
	return ApiConvertCreateConvertGetQuoteV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConvertCreateConvertGetQuoteV1Resp
func (a *TradeAPIService) ConvertCreateConvertGetQuoteV1Execute(r ApiConvertCreateConvertGetQuoteV1Request) (*ConvertCreateConvertGetQuoteV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConvertCreateConvertGetQuoteV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TradeAPIService.ConvertCreateConvertGetQuoteV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/convert/getQuote"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fromAsset == nil {
		return localVarReturnValue, nil, reportError("fromAsset is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}
	if r.toAsset == nil {
		return localVarReturnValue, nil, reportError("toAsset is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.fromAmount != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "fromAmount", r.fromAmount, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "fromAsset", r.fromAsset, "", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.toAmount != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "toAmount", r.toAmount, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "toAsset", r.toAsset, "", "")
	if r.validTime != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "validTime", r.validTime, "", "")
	}
	if r.walletType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "walletType", r.walletType, "", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConvertCreateConvertLimitCancelOrderV1Request struct {
	ctx context.Context
	ApiService *TradeAPIService
	orderId *int64
	timestamp *int64
	recvWindow *int64
}

func (r ApiConvertCreateConvertLimitCancelOrderV1Request) OrderId(orderId int64) ApiConvertCreateConvertLimitCancelOrderV1Request {
	r.orderId = &orderId
	return r
}

func (r ApiConvertCreateConvertLimitCancelOrderV1Request) Timestamp(timestamp int64) ApiConvertCreateConvertLimitCancelOrderV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiConvertCreateConvertLimitCancelOrderV1Request) RecvWindow(recvWindow int64) ApiConvertCreateConvertLimitCancelOrderV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiConvertCreateConvertLimitCancelOrderV1Request) Execute() (*ConvertCreateConvertLimitCancelOrderV1Resp, *http.Response, error) {
	return r.ApiService.ConvertCreateConvertLimitCancelOrderV1Execute(r)
}

/*
ConvertCreateConvertLimitCancelOrderV1 Cancel limit order (USER_DATA)

Enable users to cancel a limit order

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConvertCreateConvertLimitCancelOrderV1Request
*/
func (a *TradeAPIService) ConvertCreateConvertLimitCancelOrderV1(ctx context.Context) ApiConvertCreateConvertLimitCancelOrderV1Request {
	return ApiConvertCreateConvertLimitCancelOrderV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConvertCreateConvertLimitCancelOrderV1Resp
func (a *TradeAPIService) ConvertCreateConvertLimitCancelOrderV1Execute(r ApiConvertCreateConvertLimitCancelOrderV1Request) (*ConvertCreateConvertLimitCancelOrderV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConvertCreateConvertLimitCancelOrderV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TradeAPIService.ConvertCreateConvertLimitCancelOrderV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/convert/limit/cancelOrder"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.orderId == nil {
		return localVarReturnValue, nil, reportError("orderId is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "orderId", r.orderId, "", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConvertCreateConvertLimitPlaceOrderV1Request struct {
	ctx context.Context
	ApiService *TradeAPIService
	baseAsset *string
	expiredType *string
	limitPrice *string
	quoteAsset *string
	side *string
	timestamp *int64
	baseAmount *string
	quoteAmount *string
	recvWindow *int64
	walletType *string
}

func (r ApiConvertCreateConvertLimitPlaceOrderV1Request) BaseAsset(baseAsset string) ApiConvertCreateConvertLimitPlaceOrderV1Request {
	r.baseAsset = &baseAsset
	return r
}

func (r ApiConvertCreateConvertLimitPlaceOrderV1Request) ExpiredType(expiredType string) ApiConvertCreateConvertLimitPlaceOrderV1Request {
	r.expiredType = &expiredType
	return r
}

func (r ApiConvertCreateConvertLimitPlaceOrderV1Request) LimitPrice(limitPrice string) ApiConvertCreateConvertLimitPlaceOrderV1Request {
	r.limitPrice = &limitPrice
	return r
}

func (r ApiConvertCreateConvertLimitPlaceOrderV1Request) QuoteAsset(quoteAsset string) ApiConvertCreateConvertLimitPlaceOrderV1Request {
	r.quoteAsset = &quoteAsset
	return r
}

func (r ApiConvertCreateConvertLimitPlaceOrderV1Request) Side(side string) ApiConvertCreateConvertLimitPlaceOrderV1Request {
	r.side = &side
	return r
}

func (r ApiConvertCreateConvertLimitPlaceOrderV1Request) Timestamp(timestamp int64) ApiConvertCreateConvertLimitPlaceOrderV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiConvertCreateConvertLimitPlaceOrderV1Request) BaseAmount(baseAmount string) ApiConvertCreateConvertLimitPlaceOrderV1Request {
	r.baseAmount = &baseAmount
	return r
}

func (r ApiConvertCreateConvertLimitPlaceOrderV1Request) QuoteAmount(quoteAmount string) ApiConvertCreateConvertLimitPlaceOrderV1Request {
	r.quoteAmount = &quoteAmount
	return r
}

func (r ApiConvertCreateConvertLimitPlaceOrderV1Request) RecvWindow(recvWindow int64) ApiConvertCreateConvertLimitPlaceOrderV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiConvertCreateConvertLimitPlaceOrderV1Request) WalletType(walletType string) ApiConvertCreateConvertLimitPlaceOrderV1Request {
	r.walletType = &walletType
	return r
}

func (r ApiConvertCreateConvertLimitPlaceOrderV1Request) Execute() (*ConvertCreateConvertLimitPlaceOrderV1Resp, *http.Response, error) {
	return r.ApiService.ConvertCreateConvertLimitPlaceOrderV1Execute(r)
}

/*
ConvertCreateConvertLimitPlaceOrderV1 Place limit order (USER_DATA)

Enable users to place a limit order

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConvertCreateConvertLimitPlaceOrderV1Request
*/
func (a *TradeAPIService) ConvertCreateConvertLimitPlaceOrderV1(ctx context.Context) ApiConvertCreateConvertLimitPlaceOrderV1Request {
	return ApiConvertCreateConvertLimitPlaceOrderV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConvertCreateConvertLimitPlaceOrderV1Resp
func (a *TradeAPIService) ConvertCreateConvertLimitPlaceOrderV1Execute(r ApiConvertCreateConvertLimitPlaceOrderV1Request) (*ConvertCreateConvertLimitPlaceOrderV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConvertCreateConvertLimitPlaceOrderV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TradeAPIService.ConvertCreateConvertLimitPlaceOrderV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/convert/limit/placeOrder"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.baseAsset == nil {
		return localVarReturnValue, nil, reportError("baseAsset is required and must be specified")
	}
	if r.expiredType == nil {
		return localVarReturnValue, nil, reportError("expiredType is required and must be specified")
	}
	if r.limitPrice == nil {
		return localVarReturnValue, nil, reportError("limitPrice is required and must be specified")
	}
	if r.quoteAsset == nil {
		return localVarReturnValue, nil, reportError("quoteAsset is required and must be specified")
	}
	if r.side == nil {
		return localVarReturnValue, nil, reportError("side is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.baseAmount != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "baseAmount", r.baseAmount, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "baseAsset", r.baseAsset, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "expiredType", r.expiredType, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "limitPrice", r.limitPrice, "", "")
	if r.quoteAmount != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "quoteAmount", r.quoteAmount, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "quoteAsset", r.quoteAsset, "", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "side", r.side, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.walletType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "walletType", r.walletType, "", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConvertCreateConvertLimitQueryOpenOrdersV1Request struct {
	ctx context.Context
	ApiService *TradeAPIService
	timestamp *int64
	recvWindow *int64
}

func (r ApiConvertCreateConvertLimitQueryOpenOrdersV1Request) Timestamp(timestamp int64) ApiConvertCreateConvertLimitQueryOpenOrdersV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiConvertCreateConvertLimitQueryOpenOrdersV1Request) RecvWindow(recvWindow int64) ApiConvertCreateConvertLimitQueryOpenOrdersV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiConvertCreateConvertLimitQueryOpenOrdersV1Request) Execute() (*ConvertCreateConvertLimitQueryOpenOrdersV1Resp, *http.Response, error) {
	return r.ApiService.ConvertCreateConvertLimitQueryOpenOrdersV1Execute(r)
}

/*
ConvertCreateConvertLimitQueryOpenOrdersV1 Query limit open orders (USER_DATA)

Request a quote for the requested token pairs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConvertCreateConvertLimitQueryOpenOrdersV1Request
*/
func (a *TradeAPIService) ConvertCreateConvertLimitQueryOpenOrdersV1(ctx context.Context) ApiConvertCreateConvertLimitQueryOpenOrdersV1Request {
	return ApiConvertCreateConvertLimitQueryOpenOrdersV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConvertCreateConvertLimitQueryOpenOrdersV1Resp
func (a *TradeAPIService) ConvertCreateConvertLimitQueryOpenOrdersV1Execute(r ApiConvertCreateConvertLimitQueryOpenOrdersV1Request) (*ConvertCreateConvertLimitQueryOpenOrdersV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConvertCreateConvertLimitQueryOpenOrdersV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TradeAPIService.ConvertCreateConvertLimitQueryOpenOrdersV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/convert/limit/queryOpenOrders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConvertGetConvertOrderStatusV1Request struct {
	ctx context.Context
	ApiService *TradeAPIService
	orderId *string
	quoteId *string
}

// Either orderId or quoteId is required
func (r ApiConvertGetConvertOrderStatusV1Request) OrderId(orderId string) ApiConvertGetConvertOrderStatusV1Request {
	r.orderId = &orderId
	return r
}

// Either orderId or quoteId is required
func (r ApiConvertGetConvertOrderStatusV1Request) QuoteId(quoteId string) ApiConvertGetConvertOrderStatusV1Request {
	r.quoteId = &quoteId
	return r
}

func (r ApiConvertGetConvertOrderStatusV1Request) Execute() (*ConvertGetConvertOrderStatusV1Resp, *http.Response, error) {
	return r.ApiService.ConvertGetConvertOrderStatusV1Execute(r)
}

/*
ConvertGetConvertOrderStatusV1 Order status(USER_DATA)

Query order status by order ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConvertGetConvertOrderStatusV1Request
*/
func (a *TradeAPIService) ConvertGetConvertOrderStatusV1(ctx context.Context) ApiConvertGetConvertOrderStatusV1Request {
	return ApiConvertGetConvertOrderStatusV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConvertGetConvertOrderStatusV1Resp
func (a *TradeAPIService) ConvertGetConvertOrderStatusV1Execute(r ApiConvertGetConvertOrderStatusV1Request) (*ConvertGetConvertOrderStatusV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConvertGetConvertOrderStatusV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TradeAPIService.ConvertGetConvertOrderStatusV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/convert/orderStatus"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.orderId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderId", r.orderId, "form", "")
	} else {
		var defaultValue string = ""
		r.orderId = &defaultValue
	}
	if r.quoteId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "quoteId", r.quoteId, "form", "")
	} else {
		var defaultValue string = ""
		r.quoteId = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConvertGetConvertTradeFlowV1Request struct {
	ctx context.Context
	ApiService *TradeAPIService
	startTime *int64
	endTime *int64
	timestamp *int64
	limit *int32
	recvWindow *int64
}

func (r ApiConvertGetConvertTradeFlowV1Request) StartTime(startTime int64) ApiConvertGetConvertTradeFlowV1Request {
	r.startTime = &startTime
	return r
}

func (r ApiConvertGetConvertTradeFlowV1Request) EndTime(endTime int64) ApiConvertGetConvertTradeFlowV1Request {
	r.endTime = &endTime
	return r
}

func (r ApiConvertGetConvertTradeFlowV1Request) Timestamp(timestamp int64) ApiConvertGetConvertTradeFlowV1Request {
	r.timestamp = &timestamp
	return r
}

// Default 100, Max 1000
func (r ApiConvertGetConvertTradeFlowV1Request) Limit(limit int32) ApiConvertGetConvertTradeFlowV1Request {
	r.limit = &limit
	return r
}

func (r ApiConvertGetConvertTradeFlowV1Request) RecvWindow(recvWindow int64) ApiConvertGetConvertTradeFlowV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiConvertGetConvertTradeFlowV1Request) Execute() (*ConvertGetConvertTradeFlowV1Resp, *http.Response, error) {
	return r.ApiService.ConvertGetConvertTradeFlowV1Execute(r)
}

/*
ConvertGetConvertTradeFlowV1 Get Convert Trade History(USER_DATA)

Get Convert Trade History

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConvertGetConvertTradeFlowV1Request
*/
func (a *TradeAPIService) ConvertGetConvertTradeFlowV1(ctx context.Context) ApiConvertGetConvertTradeFlowV1Request {
	return ApiConvertGetConvertTradeFlowV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConvertGetConvertTradeFlowV1Resp
func (a *TradeAPIService) ConvertGetConvertTradeFlowV1Execute(r ApiConvertGetConvertTradeFlowV1Request) (*ConvertGetConvertTradeFlowV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConvertGetConvertTradeFlowV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TradeAPIService.ConvertGetConvertTradeFlowV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/convert/tradeFlow"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startTime == nil {
		return localVarReturnValue, nil, reportError("startTime is required and must be specified")
	}
	if r.endTime == nil {
		return localVarReturnValue, nil, reportError("endTime is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
Binance Spot API

OpenAPI specification for Binance exchange - Spot API

API version: 0.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spot

import (
	"encoding/json"
)

// checks if the GetRebateTaxQueryV1Resp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRebateTaxQueryV1Resp{}

// GetRebateTaxQueryV1Resp struct for GetRebateTaxQueryV1Resp
type GetRebateTaxQueryV1Resp struct {
	Code *string `json:"code,omitempty"`
	Data *GetRebateTaxQueryV1RespData `json:"data,omitempty"`
	Status *string `json:"status,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewGetRebateTaxQueryV1Resp instantiates a new GetRebateTaxQueryV1Resp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRebateTaxQueryV1Resp() *GetRebateTaxQueryV1Resp {
	this := GetRebateTaxQueryV1Resp{}
	return &this
}

// NewGetRebateTaxQueryV1RespWithDefaults instantiates a new GetRebateTaxQueryV1Resp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRebateTaxQueryV1RespWithDefaults() *GetRebateTaxQueryV1Resp {
	this := GetRebateTaxQueryV1Resp{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *GetRebateTaxQueryV1Resp) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRebateTaxQueryV1Resp) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *GetRebateTaxQueryV1Resp) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *GetRebateTaxQueryV1Resp) SetCode(v string) {
	o.Code = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *GetRebateTaxQueryV1Resp) GetData() GetRebateTaxQueryV1RespData {
	if o == nil || IsNil(o.Data) {
		var ret GetRebateTaxQueryV1RespData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRebateTaxQueryV1Resp) GetDataOk() (*GetRebateTaxQueryV1RespData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *GetRebateTaxQueryV1Resp) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given GetRebateTaxQueryV1RespData and assigns it to the Data field.
func (o *GetRebateTaxQueryV1Resp) SetData(v GetRebateTaxQueryV1RespData) {
	o.Data = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *GetRebateTaxQueryV1Resp) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRebateTaxQueryV1Resp) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *GetRebateTaxQueryV1Resp) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *GetRebateTaxQueryV1Resp) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetRebateTaxQueryV1Resp) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRebateTaxQueryV1Resp) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetRebateTaxQueryV1Resp) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GetRebateTaxQueryV1Resp) SetType(v string) {
	o.Type = &v
}

func (o GetRebateTaxQueryV1Resp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRebateTaxQueryV1Resp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableGetRebateTaxQueryV1Resp struct {
	value *GetRebateTaxQueryV1Resp
	isSet bool
}

func (v NullableGetRebateTaxQueryV1Resp) Get() *GetRebateTaxQueryV1Resp {
	return v.value
}

func (v *NullableGetRebateTaxQueryV1Resp) Set(val *GetRebateTaxQueryV1Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRebateTaxQueryV1Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRebateTaxQueryV1Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRebateTaxQueryV1Resp(val *GetRebateTaxQueryV1Resp) *NullableGetRebateTaxQueryV1Resp {
	return &NullableGetRebateTaxQueryV1Resp{value: val, isSet: true}
}

func (v NullableGetRebateTaxQueryV1Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRebateTaxQueryV1Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



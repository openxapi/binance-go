/*
Binance Spot API

OpenAPI specification for Binance exchange - Spot API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spot

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// TradingAPIService TradingAPI service
type TradingAPIService service

type ApiSpotCreateOrderCancelReplaceV3Request struct {
	ctx context.Context
	ApiService *TradingAPIService
	cancelReplaceMode *string
	side *string
	symbol *string
	timestamp *int64
	type_ *string
	cancelNewClientOrderId *string
	cancelOrderId *int64
	cancelOrigClientOrderId *string
	cancelRestrictions *string
	icebergQty *string
	newClientOrderId *string
	newOrderRespType *string
	orderRateLimitExceededMode *string
	price *string
	quantity *string
	quoteOrderQty *string
	recvWindow *int64
	selfTradePreventionMode *string
	stopPrice *string
	strategyId *int64
	strategyType *int32
	timeInForce *string
	trailingDelta *int64
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) CancelReplaceMode(cancelReplaceMode string) ApiSpotCreateOrderCancelReplaceV3Request {
	r.cancelReplaceMode = &cancelReplaceMode
	return r
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) Side(side string) ApiSpotCreateOrderCancelReplaceV3Request {
	r.side = &side
	return r
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) Symbol(symbol string) ApiSpotCreateOrderCancelReplaceV3Request {
	r.symbol = &symbol
	return r
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) Timestamp(timestamp int64) ApiSpotCreateOrderCancelReplaceV3Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) Type_(type_ string) ApiSpotCreateOrderCancelReplaceV3Request {
	r.type_ = &type_
	return r
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) CancelNewClientOrderId(cancelNewClientOrderId string) ApiSpotCreateOrderCancelReplaceV3Request {
	r.cancelNewClientOrderId = &cancelNewClientOrderId
	return r
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) CancelOrderId(cancelOrderId int64) ApiSpotCreateOrderCancelReplaceV3Request {
	r.cancelOrderId = &cancelOrderId
	return r
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) CancelOrigClientOrderId(cancelOrigClientOrderId string) ApiSpotCreateOrderCancelReplaceV3Request {
	r.cancelOrigClientOrderId = &cancelOrigClientOrderId
	return r
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) CancelRestrictions(cancelRestrictions string) ApiSpotCreateOrderCancelReplaceV3Request {
	r.cancelRestrictions = &cancelRestrictions
	return r
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) IcebergQty(icebergQty string) ApiSpotCreateOrderCancelReplaceV3Request {
	r.icebergQty = &icebergQty
	return r
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) NewClientOrderId(newClientOrderId string) ApiSpotCreateOrderCancelReplaceV3Request {
	r.newClientOrderId = &newClientOrderId
	return r
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) NewOrderRespType(newOrderRespType string) ApiSpotCreateOrderCancelReplaceV3Request {
	r.newOrderRespType = &newOrderRespType
	return r
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) OrderRateLimitExceededMode(orderRateLimitExceededMode string) ApiSpotCreateOrderCancelReplaceV3Request {
	r.orderRateLimitExceededMode = &orderRateLimitExceededMode
	return r
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) Price(price string) ApiSpotCreateOrderCancelReplaceV3Request {
	r.price = &price
	return r
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) Quantity(quantity string) ApiSpotCreateOrderCancelReplaceV3Request {
	r.quantity = &quantity
	return r
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) QuoteOrderQty(quoteOrderQty string) ApiSpotCreateOrderCancelReplaceV3Request {
	r.quoteOrderQty = &quoteOrderQty
	return r
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) RecvWindow(recvWindow int64) ApiSpotCreateOrderCancelReplaceV3Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) SelfTradePreventionMode(selfTradePreventionMode string) ApiSpotCreateOrderCancelReplaceV3Request {
	r.selfTradePreventionMode = &selfTradePreventionMode
	return r
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) StopPrice(stopPrice string) ApiSpotCreateOrderCancelReplaceV3Request {
	r.stopPrice = &stopPrice
	return r
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) StrategyId(strategyId int64) ApiSpotCreateOrderCancelReplaceV3Request {
	r.strategyId = &strategyId
	return r
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) StrategyType(strategyType int32) ApiSpotCreateOrderCancelReplaceV3Request {
	r.strategyType = &strategyType
	return r
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) TimeInForce(timeInForce string) ApiSpotCreateOrderCancelReplaceV3Request {
	r.timeInForce = &timeInForce
	return r
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) TrailingDelta(trailingDelta int64) ApiSpotCreateOrderCancelReplaceV3Request {
	r.trailingDelta = &trailingDelta
	return r
}

func (r ApiSpotCreateOrderCancelReplaceV3Request) Execute() (*SpotCreateOrderCancelReplaceV3Resp, *http.Response, error) {
	return r.ApiService.SpotCreateOrderCancelReplaceV3Execute(r)
}

/*
SpotCreateOrderCancelReplaceV3 Cancel an Existing Order and Send a New Order (TRADE)

Cancels an existing order and places a new order on the same symbol.
Filters and Order Count are evaluated before the processing of the cancellation and order placement occurs.
A new order that was not attempted (i.e. when newOrderResult: NOT_ATTEMPTED ), will still increase the order count by 1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSpotCreateOrderCancelReplaceV3Request
*/
func (a *TradingAPIService) SpotCreateOrderCancelReplaceV3(ctx context.Context) ApiSpotCreateOrderCancelReplaceV3Request {
	return ApiSpotCreateOrderCancelReplaceV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SpotCreateOrderCancelReplaceV3Resp
func (a *TradingAPIService) SpotCreateOrderCancelReplaceV3Execute(r ApiSpotCreateOrderCancelReplaceV3Request) (*SpotCreateOrderCancelReplaceV3Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SpotCreateOrderCancelReplaceV3Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TradingAPIService.SpotCreateOrderCancelReplaceV3")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v3/order/cancelReplace"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cancelReplaceMode == nil {
		return localVarReturnValue, nil, reportError("cancelReplaceMode is required and must be specified")
	}
	if r.side == nil {
		return localVarReturnValue, nil, reportError("side is required and must be specified")
	}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}
	if r.type_ == nil {
		return localVarReturnValue, nil, reportError("type_ is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.cancelNewClientOrderId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "cancelNewClientOrderId", r.cancelNewClientOrderId, "", "")
	}
	if r.cancelOrderId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "cancelOrderId", r.cancelOrderId, "", "")
	}
	if r.cancelOrigClientOrderId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "cancelOrigClientOrderId", r.cancelOrigClientOrderId, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "cancelReplaceMode", r.cancelReplaceMode, "", "")
	if r.cancelRestrictions != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "cancelRestrictions", r.cancelRestrictions, "", "")
	}
	if r.icebergQty != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "icebergQty", r.icebergQty, "", "")
	}
	if r.newClientOrderId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "newClientOrderId", r.newClientOrderId, "", "")
	}
	if r.newOrderRespType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "newOrderRespType", r.newOrderRespType, "", "")
	}
	if r.orderRateLimitExceededMode != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "orderRateLimitExceededMode", r.orderRateLimitExceededMode, "", "")
	}
	if r.price != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "price", r.price, "", "")
	}
	if r.quantity != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "quantity", r.quantity, "", "")
	}
	if r.quoteOrderQty != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "quoteOrderQty", r.quoteOrderQty, "", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	if r.selfTradePreventionMode != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "selfTradePreventionMode", r.selfTradePreventionMode, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "side", r.side, "", "")
	if r.stopPrice != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "stopPrice", r.stopPrice, "", "")
	}
	if r.strategyId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "strategyId", r.strategyId, "", "")
	}
	if r.strategyType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "strategyType", r.strategyType, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "symbol", r.symbol, "", "")
	if r.timeInForce != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "timeInForce", r.timeInForce, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.trailingDelta != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "trailingDelta", r.trailingDelta, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "type", r.type_, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSpotCreateOrderTestV3Request struct {
	ctx context.Context
	ApiService *TradingAPIService
	side *string
	symbol *string
	timestamp *int64
	type_ *string
	computeCommissionRates *bool
	icebergQty *string
	newClientOrderId *string
	newOrderRespType *string
	price *string
	quantity *string
	quoteOrderQty *string
	recvWindow *int64
	selfTradePreventionMode *string
	stopPrice *string
	strategyId *int64
	strategyType *int32
	timeInForce *string
	trailingDelta *int64
}

func (r ApiSpotCreateOrderTestV3Request) Side(side string) ApiSpotCreateOrderTestV3Request {
	r.side = &side
	return r
}

func (r ApiSpotCreateOrderTestV3Request) Symbol(symbol string) ApiSpotCreateOrderTestV3Request {
	r.symbol = &symbol
	return r
}

func (r ApiSpotCreateOrderTestV3Request) Timestamp(timestamp int64) ApiSpotCreateOrderTestV3Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiSpotCreateOrderTestV3Request) Type_(type_ string) ApiSpotCreateOrderTestV3Request {
	r.type_ = &type_
	return r
}

func (r ApiSpotCreateOrderTestV3Request) ComputeCommissionRates(computeCommissionRates bool) ApiSpotCreateOrderTestV3Request {
	r.computeCommissionRates = &computeCommissionRates
	return r
}

func (r ApiSpotCreateOrderTestV3Request) IcebergQty(icebergQty string) ApiSpotCreateOrderTestV3Request {
	r.icebergQty = &icebergQty
	return r
}

func (r ApiSpotCreateOrderTestV3Request) NewClientOrderId(newClientOrderId string) ApiSpotCreateOrderTestV3Request {
	r.newClientOrderId = &newClientOrderId
	return r
}

func (r ApiSpotCreateOrderTestV3Request) NewOrderRespType(newOrderRespType string) ApiSpotCreateOrderTestV3Request {
	r.newOrderRespType = &newOrderRespType
	return r
}

func (r ApiSpotCreateOrderTestV3Request) Price(price string) ApiSpotCreateOrderTestV3Request {
	r.price = &price
	return r
}

func (r ApiSpotCreateOrderTestV3Request) Quantity(quantity string) ApiSpotCreateOrderTestV3Request {
	r.quantity = &quantity
	return r
}

func (r ApiSpotCreateOrderTestV3Request) QuoteOrderQty(quoteOrderQty string) ApiSpotCreateOrderTestV3Request {
	r.quoteOrderQty = &quoteOrderQty
	return r
}

func (r ApiSpotCreateOrderTestV3Request) RecvWindow(recvWindow int64) ApiSpotCreateOrderTestV3Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiSpotCreateOrderTestV3Request) SelfTradePreventionMode(selfTradePreventionMode string) ApiSpotCreateOrderTestV3Request {
	r.selfTradePreventionMode = &selfTradePreventionMode
	return r
}

func (r ApiSpotCreateOrderTestV3Request) StopPrice(stopPrice string) ApiSpotCreateOrderTestV3Request {
	r.stopPrice = &stopPrice
	return r
}

func (r ApiSpotCreateOrderTestV3Request) StrategyId(strategyId int64) ApiSpotCreateOrderTestV3Request {
	r.strategyId = &strategyId
	return r
}

func (r ApiSpotCreateOrderTestV3Request) StrategyType(strategyType int32) ApiSpotCreateOrderTestV3Request {
	r.strategyType = &strategyType
	return r
}

func (r ApiSpotCreateOrderTestV3Request) TimeInForce(timeInForce string) ApiSpotCreateOrderTestV3Request {
	r.timeInForce = &timeInForce
	return r
}

func (r ApiSpotCreateOrderTestV3Request) TrailingDelta(trailingDelta int64) ApiSpotCreateOrderTestV3Request {
	r.trailingDelta = &trailingDelta
	return r
}

func (r ApiSpotCreateOrderTestV3Request) Execute() (*SpotCreateOrderTestV3Resp, *http.Response, error) {
	return r.ApiService.SpotCreateOrderTestV3Execute(r)
}

/*
SpotCreateOrderTestV3 Test new order (TRADE)

Test new order creation and signature/recvWindow long.
Creates and validates a new order but does not send it into the matching engine.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSpotCreateOrderTestV3Request
*/
func (a *TradingAPIService) SpotCreateOrderTestV3(ctx context.Context) ApiSpotCreateOrderTestV3Request {
	return ApiSpotCreateOrderTestV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SpotCreateOrderTestV3Resp
func (a *TradingAPIService) SpotCreateOrderTestV3Execute(r ApiSpotCreateOrderTestV3Request) (*SpotCreateOrderTestV3Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SpotCreateOrderTestV3Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TradingAPIService.SpotCreateOrderTestV3")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v3/order/test"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.side == nil {
		return localVarReturnValue, nil, reportError("side is required and must be specified")
	}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}
	if r.type_ == nil {
		return localVarReturnValue, nil, reportError("type_ is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.computeCommissionRates != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "computeCommissionRates", r.computeCommissionRates, "", "")
	}
	if r.icebergQty != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "icebergQty", r.icebergQty, "", "")
	}
	if r.newClientOrderId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "newClientOrderId", r.newClientOrderId, "", "")
	}
	if r.newOrderRespType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "newOrderRespType", r.newOrderRespType, "", "")
	}
	if r.price != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "price", r.price, "", "")
	}
	if r.quantity != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "quantity", r.quantity, "", "")
	}
	if r.quoteOrderQty != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "quoteOrderQty", r.quoteOrderQty, "", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	if r.selfTradePreventionMode != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "selfTradePreventionMode", r.selfTradePreventionMode, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "side", r.side, "", "")
	if r.stopPrice != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "stopPrice", r.stopPrice, "", "")
	}
	if r.strategyId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "strategyId", r.strategyId, "", "")
	}
	if r.strategyType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "strategyType", r.strategyType, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "symbol", r.symbol, "", "")
	if r.timeInForce != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "timeInForce", r.timeInForce, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.trailingDelta != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "trailingDelta", r.trailingDelta, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "type", r.type_, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSpotCreateOrderV3Request struct {
	ctx context.Context
	ApiService *TradingAPIService
	side *string
	symbol *string
	timestamp *int64
	type_ *string
	icebergQty *string
	newClientOrderId *string
	newOrderRespType *string
	price *string
	quantity *string
	quoteOrderQty *string
	recvWindow *int64
	selfTradePreventionMode *string
	stopPrice *string
	strategyId *int64
	strategyType *int32
	timeInForce *string
	trailingDelta *int64
}

func (r ApiSpotCreateOrderV3Request) Side(side string) ApiSpotCreateOrderV3Request {
	r.side = &side
	return r
}

func (r ApiSpotCreateOrderV3Request) Symbol(symbol string) ApiSpotCreateOrderV3Request {
	r.symbol = &symbol
	return r
}

func (r ApiSpotCreateOrderV3Request) Timestamp(timestamp int64) ApiSpotCreateOrderV3Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiSpotCreateOrderV3Request) Type_(type_ string) ApiSpotCreateOrderV3Request {
	r.type_ = &type_
	return r
}

func (r ApiSpotCreateOrderV3Request) IcebergQty(icebergQty string) ApiSpotCreateOrderV3Request {
	r.icebergQty = &icebergQty
	return r
}

func (r ApiSpotCreateOrderV3Request) NewClientOrderId(newClientOrderId string) ApiSpotCreateOrderV3Request {
	r.newClientOrderId = &newClientOrderId
	return r
}

func (r ApiSpotCreateOrderV3Request) NewOrderRespType(newOrderRespType string) ApiSpotCreateOrderV3Request {
	r.newOrderRespType = &newOrderRespType
	return r
}

func (r ApiSpotCreateOrderV3Request) Price(price string) ApiSpotCreateOrderV3Request {
	r.price = &price
	return r
}

func (r ApiSpotCreateOrderV3Request) Quantity(quantity string) ApiSpotCreateOrderV3Request {
	r.quantity = &quantity
	return r
}

func (r ApiSpotCreateOrderV3Request) QuoteOrderQty(quoteOrderQty string) ApiSpotCreateOrderV3Request {
	r.quoteOrderQty = &quoteOrderQty
	return r
}

func (r ApiSpotCreateOrderV3Request) RecvWindow(recvWindow int64) ApiSpotCreateOrderV3Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiSpotCreateOrderV3Request) SelfTradePreventionMode(selfTradePreventionMode string) ApiSpotCreateOrderV3Request {
	r.selfTradePreventionMode = &selfTradePreventionMode
	return r
}

func (r ApiSpotCreateOrderV3Request) StopPrice(stopPrice string) ApiSpotCreateOrderV3Request {
	r.stopPrice = &stopPrice
	return r
}

func (r ApiSpotCreateOrderV3Request) StrategyId(strategyId int64) ApiSpotCreateOrderV3Request {
	r.strategyId = &strategyId
	return r
}

func (r ApiSpotCreateOrderV3Request) StrategyType(strategyType int32) ApiSpotCreateOrderV3Request {
	r.strategyType = &strategyType
	return r
}

func (r ApiSpotCreateOrderV3Request) TimeInForce(timeInForce string) ApiSpotCreateOrderV3Request {
	r.timeInForce = &timeInForce
	return r
}

func (r ApiSpotCreateOrderV3Request) TrailingDelta(trailingDelta int64) ApiSpotCreateOrderV3Request {
	r.trailingDelta = &trailingDelta
	return r
}

func (r ApiSpotCreateOrderV3Request) Execute() (*SpotCreateOrderV3Resp, *http.Response, error) {
	return r.ApiService.SpotCreateOrderV3Execute(r)
}

/*
SpotCreateOrderV3 New order (TRADE)

Send in a new order.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSpotCreateOrderV3Request
*/
func (a *TradingAPIService) SpotCreateOrderV3(ctx context.Context) ApiSpotCreateOrderV3Request {
	return ApiSpotCreateOrderV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SpotCreateOrderV3Resp
func (a *TradingAPIService) SpotCreateOrderV3Execute(r ApiSpotCreateOrderV3Request) (*SpotCreateOrderV3Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SpotCreateOrderV3Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TradingAPIService.SpotCreateOrderV3")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v3/order"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.side == nil {
		return localVarReturnValue, nil, reportError("side is required and must be specified")
	}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}
	if r.type_ == nil {
		return localVarReturnValue, nil, reportError("type_ is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.icebergQty != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "icebergQty", r.icebergQty, "", "")
	}
	if r.newClientOrderId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "newClientOrderId", r.newClientOrderId, "", "")
	}
	if r.newOrderRespType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "newOrderRespType", r.newOrderRespType, "", "")
	}
	if r.price != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "price", r.price, "", "")
	}
	if r.quantity != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "quantity", r.quantity, "", "")
	}
	if r.quoteOrderQty != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "quoteOrderQty", r.quoteOrderQty, "", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	if r.selfTradePreventionMode != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "selfTradePreventionMode", r.selfTradePreventionMode, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "side", r.side, "", "")
	if r.stopPrice != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "stopPrice", r.stopPrice, "", "")
	}
	if r.strategyId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "strategyId", r.strategyId, "", "")
	}
	if r.strategyType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "strategyType", r.strategyType, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "symbol", r.symbol, "", "")
	if r.timeInForce != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "timeInForce", r.timeInForce, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.trailingDelta != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "trailingDelta", r.trailingDelta, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "type", r.type_, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSpotCreateSorOrderTestV3Request struct {
	ctx context.Context
	ApiService *TradingAPIService
	quantity *string
	side *string
	symbol *string
	timestamp *int64
	type_ *string
	computeCommissionRates *bool
	icebergQty *string
	newClientOrderId *string
	newOrderRespType *string
	price *string
	recvWindow *int64
	selfTradePreventionMode *string
	strategyId *int64
	strategyType *int32
	timeInForce *string
}

func (r ApiSpotCreateSorOrderTestV3Request) Quantity(quantity string) ApiSpotCreateSorOrderTestV3Request {
	r.quantity = &quantity
	return r
}

func (r ApiSpotCreateSorOrderTestV3Request) Side(side string) ApiSpotCreateSorOrderTestV3Request {
	r.side = &side
	return r
}

func (r ApiSpotCreateSorOrderTestV3Request) Symbol(symbol string) ApiSpotCreateSorOrderTestV3Request {
	r.symbol = &symbol
	return r
}

func (r ApiSpotCreateSorOrderTestV3Request) Timestamp(timestamp int64) ApiSpotCreateSorOrderTestV3Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiSpotCreateSorOrderTestV3Request) Type_(type_ string) ApiSpotCreateSorOrderTestV3Request {
	r.type_ = &type_
	return r
}

func (r ApiSpotCreateSorOrderTestV3Request) ComputeCommissionRates(computeCommissionRates bool) ApiSpotCreateSorOrderTestV3Request {
	r.computeCommissionRates = &computeCommissionRates
	return r
}

func (r ApiSpotCreateSorOrderTestV3Request) IcebergQty(icebergQty string) ApiSpotCreateSorOrderTestV3Request {
	r.icebergQty = &icebergQty
	return r
}

func (r ApiSpotCreateSorOrderTestV3Request) NewClientOrderId(newClientOrderId string) ApiSpotCreateSorOrderTestV3Request {
	r.newClientOrderId = &newClientOrderId
	return r
}

func (r ApiSpotCreateSorOrderTestV3Request) NewOrderRespType(newOrderRespType string) ApiSpotCreateSorOrderTestV3Request {
	r.newOrderRespType = &newOrderRespType
	return r
}

func (r ApiSpotCreateSorOrderTestV3Request) Price(price string) ApiSpotCreateSorOrderTestV3Request {
	r.price = &price
	return r
}

func (r ApiSpotCreateSorOrderTestV3Request) RecvWindow(recvWindow int64) ApiSpotCreateSorOrderTestV3Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiSpotCreateSorOrderTestV3Request) SelfTradePreventionMode(selfTradePreventionMode string) ApiSpotCreateSorOrderTestV3Request {
	r.selfTradePreventionMode = &selfTradePreventionMode
	return r
}

func (r ApiSpotCreateSorOrderTestV3Request) StrategyId(strategyId int64) ApiSpotCreateSorOrderTestV3Request {
	r.strategyId = &strategyId
	return r
}

func (r ApiSpotCreateSorOrderTestV3Request) StrategyType(strategyType int32) ApiSpotCreateSorOrderTestV3Request {
	r.strategyType = &strategyType
	return r
}

func (r ApiSpotCreateSorOrderTestV3Request) TimeInForce(timeInForce string) ApiSpotCreateSorOrderTestV3Request {
	r.timeInForce = &timeInForce
	return r
}

func (r ApiSpotCreateSorOrderTestV3Request) Execute() (*SpotCreateSorOrderTestV3Resp, *http.Response, error) {
	return r.ApiService.SpotCreateSorOrderTestV3Execute(r)
}

/*
SpotCreateSorOrderTestV3 Test new order using SOR (TRADE)

Test new order creation and signature/recvWindow using smart order routing (SOR).
Creates and validates a new order but does not send it into the matching engine.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSpotCreateSorOrderTestV3Request
*/
func (a *TradingAPIService) SpotCreateSorOrderTestV3(ctx context.Context) ApiSpotCreateSorOrderTestV3Request {
	return ApiSpotCreateSorOrderTestV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SpotCreateSorOrderTestV3Resp
func (a *TradingAPIService) SpotCreateSorOrderTestV3Execute(r ApiSpotCreateSorOrderTestV3Request) (*SpotCreateSorOrderTestV3Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SpotCreateSorOrderTestV3Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TradingAPIService.SpotCreateSorOrderTestV3")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v3/sor/order/test"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.quantity == nil {
		return localVarReturnValue, nil, reportError("quantity is required and must be specified")
	}
	if r.side == nil {
		return localVarReturnValue, nil, reportError("side is required and must be specified")
	}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}
	if r.type_ == nil {
		return localVarReturnValue, nil, reportError("type_ is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.computeCommissionRates != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "computeCommissionRates", r.computeCommissionRates, "", "")
	}
	if r.icebergQty != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "icebergQty", r.icebergQty, "", "")
	}
	if r.newClientOrderId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "newClientOrderId", r.newClientOrderId, "", "")
	}
	if r.newOrderRespType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "newOrderRespType", r.newOrderRespType, "", "")
	}
	if r.price != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "price", r.price, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "quantity", r.quantity, "", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	if r.selfTradePreventionMode != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "selfTradePreventionMode", r.selfTradePreventionMode, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "side", r.side, "", "")
	if r.strategyId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "strategyId", r.strategyId, "", "")
	}
	if r.strategyType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "strategyType", r.strategyType, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "symbol", r.symbol, "", "")
	if r.timeInForce != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "timeInForce", r.timeInForce, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "type", r.type_, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSpotDeleteOpenOrdersV3Request struct {
	ctx context.Context
	ApiService *TradingAPIService
	symbol *string
	timestamp *int64
	recvWindow *int64
}

func (r ApiSpotDeleteOpenOrdersV3Request) Symbol(symbol string) ApiSpotDeleteOpenOrdersV3Request {
	r.symbol = &symbol
	return r
}

func (r ApiSpotDeleteOpenOrdersV3Request) Timestamp(timestamp int64) ApiSpotDeleteOpenOrdersV3Request {
	r.timestamp = &timestamp
	return r
}

// The value cannot be greater than &#x60;60000&#x60;
func (r ApiSpotDeleteOpenOrdersV3Request) RecvWindow(recvWindow int64) ApiSpotDeleteOpenOrdersV3Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiSpotDeleteOpenOrdersV3Request) Execute() ([][]SpotDeleteOpenOrdersV3RespInner, *http.Response, error) {
	return r.ApiService.SpotDeleteOpenOrdersV3Execute(r)
}

/*
SpotDeleteOpenOrdersV3 Cancel All Open Orders on a Symbol (TRADE)

Cancels all active orders on a symbol.
This includes orders that are part of an order list.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSpotDeleteOpenOrdersV3Request
*/
func (a *TradingAPIService) SpotDeleteOpenOrdersV3(ctx context.Context) ApiSpotDeleteOpenOrdersV3Request {
	return ApiSpotDeleteOpenOrdersV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return [][]SpotDeleteOpenOrdersV3RespInner
func (a *TradingAPIService) SpotDeleteOpenOrdersV3Execute(r ApiSpotDeleteOpenOrdersV3Request) ([][]SpotDeleteOpenOrdersV3RespInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  [][]SpotDeleteOpenOrdersV3RespInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TradingAPIService.SpotDeleteOpenOrdersV3")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v3/openOrders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "symbol", r.symbol, "form", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
Binance Spot API

OpenAPI specification for Binance cryptocurrency exchange - Spot API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spot

import (
	"encoding/json"
)

// checks if the SpotSymbolFilterIcebergParts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpotSymbolFilterIcebergParts{}

// SpotSymbolFilterIcebergParts struct for SpotSymbolFilterIcebergParts
type SpotSymbolFilterIcebergParts struct {
	FilterType *string `json:"filterType,omitempty"`
	Limit *int32 `json:"limit,omitempty"`
}

// NewSpotSymbolFilterIcebergParts instantiates a new SpotSymbolFilterIcebergParts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpotSymbolFilterIcebergParts() *SpotSymbolFilterIcebergParts {
	this := SpotSymbolFilterIcebergParts{}
	return &this
}

// NewSpotSymbolFilterIcebergPartsWithDefaults instantiates a new SpotSymbolFilterIcebergParts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpotSymbolFilterIcebergPartsWithDefaults() *SpotSymbolFilterIcebergParts {
	this := SpotSymbolFilterIcebergParts{}
	return &this
}

// GetFilterType returns the FilterType field value if set, zero value otherwise.
func (o *SpotSymbolFilterIcebergParts) GetFilterType() string {
	if o == nil || IsNil(o.FilterType) {
		var ret string
		return ret
	}
	return *o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotSymbolFilterIcebergParts) GetFilterTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FilterType) {
		return nil, false
	}
	return o.FilterType, true
}

// HasFilterType returns a boolean if a field has been set.
func (o *SpotSymbolFilterIcebergParts) HasFilterType() bool {
	if o != nil && !IsNil(o.FilterType) {
		return true
	}

	return false
}

// SetFilterType gets a reference to the given string and assigns it to the FilterType field.
func (o *SpotSymbolFilterIcebergParts) SetFilterType(v string) {
	o.FilterType = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *SpotSymbolFilterIcebergParts) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotSymbolFilterIcebergParts) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *SpotSymbolFilterIcebergParts) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *SpotSymbolFilterIcebergParts) SetLimit(v int32) {
	o.Limit = &v
}

func (o SpotSymbolFilterIcebergParts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpotSymbolFilterIcebergParts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FilterType) {
		toSerialize["filterType"] = o.FilterType
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	return toSerialize, nil
}

type NullableSpotSymbolFilterIcebergParts struct {
	value *SpotSymbolFilterIcebergParts
	isSet bool
}

func (v NullableSpotSymbolFilterIcebergParts) Get() *SpotSymbolFilterIcebergParts {
	return v.value
}

func (v *NullableSpotSymbolFilterIcebergParts) Set(val *SpotSymbolFilterIcebergParts) {
	v.value = val
	v.isSet = true
}

func (v NullableSpotSymbolFilterIcebergParts) IsSet() bool {
	return v.isSet
}

func (v *NullableSpotSymbolFilterIcebergParts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpotSymbolFilterIcebergParts(val *SpotSymbolFilterIcebergParts) *NullableSpotSymbolFilterIcebergParts {
	return &NullableSpotSymbolFilterIcebergParts{value: val, isSet: true}
}

func (v NullableSpotSymbolFilterIcebergParts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpotSymbolFilterIcebergParts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



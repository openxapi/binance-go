/*
Binance Spot API

OpenAPI specification for Binance exchange - Spot API

API version: 0.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spot

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// CryptoLoanAPIService CryptoLoanAPI service
type CryptoLoanAPIService service

type ApiCreateLoanFlexibleAdjustLtvV2Request struct {
	ctx context.Context
	ApiService *CryptoLoanAPIService
	adjustmentAmount *string
	collateralCoin *string
	direction *string
	loanCoin *string
	timestamp *int64
	recvWindow *int64
}

func (r ApiCreateLoanFlexibleAdjustLtvV2Request) AdjustmentAmount(adjustmentAmount string) ApiCreateLoanFlexibleAdjustLtvV2Request {
	r.adjustmentAmount = &adjustmentAmount
	return r
}

func (r ApiCreateLoanFlexibleAdjustLtvV2Request) CollateralCoin(collateralCoin string) ApiCreateLoanFlexibleAdjustLtvV2Request {
	r.collateralCoin = &collateralCoin
	return r
}

func (r ApiCreateLoanFlexibleAdjustLtvV2Request) Direction(direction string) ApiCreateLoanFlexibleAdjustLtvV2Request {
	r.direction = &direction
	return r
}

func (r ApiCreateLoanFlexibleAdjustLtvV2Request) LoanCoin(loanCoin string) ApiCreateLoanFlexibleAdjustLtvV2Request {
	r.loanCoin = &loanCoin
	return r
}

func (r ApiCreateLoanFlexibleAdjustLtvV2Request) Timestamp(timestamp int64) ApiCreateLoanFlexibleAdjustLtvV2Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiCreateLoanFlexibleAdjustLtvV2Request) RecvWindow(recvWindow int64) ApiCreateLoanFlexibleAdjustLtvV2Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiCreateLoanFlexibleAdjustLtvV2Request) Execute() (*CreateLoanFlexibleAdjustLtvV2Resp, *http.Response, error) {
	return r.ApiService.CreateLoanFlexibleAdjustLtvV2Execute(r)
}

/*
CreateLoanFlexibleAdjustLtvV2 Flexible Loan Adjust LTV(TRADE)

Flexible Loan Adjust LTV

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateLoanFlexibleAdjustLtvV2Request
*/
func (a *CryptoLoanAPIService) CreateLoanFlexibleAdjustLtvV2(ctx context.Context) ApiCreateLoanFlexibleAdjustLtvV2Request {
	return ApiCreateLoanFlexibleAdjustLtvV2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateLoanFlexibleAdjustLtvV2Resp
func (a *CryptoLoanAPIService) CreateLoanFlexibleAdjustLtvV2Execute(r ApiCreateLoanFlexibleAdjustLtvV2Request) (*CreateLoanFlexibleAdjustLtvV2Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateLoanFlexibleAdjustLtvV2Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoLoanAPIService.CreateLoanFlexibleAdjustLtvV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v2/loan/flexible/adjust/ltv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.adjustmentAmount == nil {
		return localVarReturnValue, nil, reportError("adjustmentAmount is required and must be specified")
	}
	if r.collateralCoin == nil {
		return localVarReturnValue, nil, reportError("collateralCoin is required and must be specified")
	}
	if r.direction == nil {
		return localVarReturnValue, nil, reportError("direction is required and must be specified")
	}
	if r.loanCoin == nil {
		return localVarReturnValue, nil, reportError("loanCoin is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "adjustmentAmount", r.adjustmentAmount, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "collateralCoin", r.collateralCoin, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "direction", r.direction, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "loanCoin", r.loanCoin, "", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateLoanFlexibleBorrowV2Request struct {
	ctx context.Context
	ApiService *CryptoLoanAPIService
	collateralCoin *string
	loanCoin *string
	timestamp *int64
	collateralAmount *string
	loanAmount *string
	recvWindow *int64
}

func (r ApiCreateLoanFlexibleBorrowV2Request) CollateralCoin(collateralCoin string) ApiCreateLoanFlexibleBorrowV2Request {
	r.collateralCoin = &collateralCoin
	return r
}

func (r ApiCreateLoanFlexibleBorrowV2Request) LoanCoin(loanCoin string) ApiCreateLoanFlexibleBorrowV2Request {
	r.loanCoin = &loanCoin
	return r
}

func (r ApiCreateLoanFlexibleBorrowV2Request) Timestamp(timestamp int64) ApiCreateLoanFlexibleBorrowV2Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiCreateLoanFlexibleBorrowV2Request) CollateralAmount(collateralAmount string) ApiCreateLoanFlexibleBorrowV2Request {
	r.collateralAmount = &collateralAmount
	return r
}

func (r ApiCreateLoanFlexibleBorrowV2Request) LoanAmount(loanAmount string) ApiCreateLoanFlexibleBorrowV2Request {
	r.loanAmount = &loanAmount
	return r
}

func (r ApiCreateLoanFlexibleBorrowV2Request) RecvWindow(recvWindow int64) ApiCreateLoanFlexibleBorrowV2Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiCreateLoanFlexibleBorrowV2Request) Execute() (*CreateLoanFlexibleBorrowV2Resp, *http.Response, error) {
	return r.ApiService.CreateLoanFlexibleBorrowV2Execute(r)
}

/*
CreateLoanFlexibleBorrowV2 Flexible Loan Borrow(TRADE)

Borrow Flexible Loan

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateLoanFlexibleBorrowV2Request
*/
func (a *CryptoLoanAPIService) CreateLoanFlexibleBorrowV2(ctx context.Context) ApiCreateLoanFlexibleBorrowV2Request {
	return ApiCreateLoanFlexibleBorrowV2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateLoanFlexibleBorrowV2Resp
func (a *CryptoLoanAPIService) CreateLoanFlexibleBorrowV2Execute(r ApiCreateLoanFlexibleBorrowV2Request) (*CreateLoanFlexibleBorrowV2Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateLoanFlexibleBorrowV2Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoLoanAPIService.CreateLoanFlexibleBorrowV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v2/loan/flexible/borrow"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.collateralCoin == nil {
		return localVarReturnValue, nil, reportError("collateralCoin is required and must be specified")
	}
	if r.loanCoin == nil {
		return localVarReturnValue, nil, reportError("loanCoin is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.collateralAmount != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "collateralAmount", r.collateralAmount, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "collateralCoin", r.collateralCoin, "", "")
	if r.loanAmount != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "loanAmount", r.loanAmount, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "loanCoin", r.loanCoin, "", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateLoanFlexibleRepayCollateralV2Request struct {
	ctx context.Context
	ApiService *CryptoLoanAPIService
}

func (r ApiCreateLoanFlexibleRepayCollateralV2Request) Execute() (*CreateLoanFlexibleRepayCollateralV2Resp, *http.Response, error) {
	return r.ApiService.CreateLoanFlexibleRepayCollateralV2Execute(r)
}

/*
CreateLoanFlexibleRepayCollateralV2 Flexible Loan Collateral Repayment (TRADE)

** Request Weight(UID)
** 6000
Parameters:
- repayAmount refers to the loan amount the user would like to repay

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateLoanFlexibleRepayCollateralV2Request
*/
func (a *CryptoLoanAPIService) CreateLoanFlexibleRepayCollateralV2(ctx context.Context) ApiCreateLoanFlexibleRepayCollateralV2Request {
	return ApiCreateLoanFlexibleRepayCollateralV2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateLoanFlexibleRepayCollateralV2Resp
func (a *CryptoLoanAPIService) CreateLoanFlexibleRepayCollateralV2Execute(r ApiCreateLoanFlexibleRepayCollateralV2Request) (*CreateLoanFlexibleRepayCollateralV2Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateLoanFlexibleRepayCollateralV2Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoLoanAPIService.CreateLoanFlexibleRepayCollateralV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v2/loan/flexible/repay/collateral"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateLoanFlexibleRepayV2Request struct {
	ctx context.Context
	ApiService *CryptoLoanAPIService
	collateralCoin *string
	loanCoin *string
	repayAmount *string
	timestamp *int64
	collateralReturn *bool
	fullRepayment *bool
	recvWindow *int64
}

func (r ApiCreateLoanFlexibleRepayV2Request) CollateralCoin(collateralCoin string) ApiCreateLoanFlexibleRepayV2Request {
	r.collateralCoin = &collateralCoin
	return r
}

func (r ApiCreateLoanFlexibleRepayV2Request) LoanCoin(loanCoin string) ApiCreateLoanFlexibleRepayV2Request {
	r.loanCoin = &loanCoin
	return r
}

func (r ApiCreateLoanFlexibleRepayV2Request) RepayAmount(repayAmount string) ApiCreateLoanFlexibleRepayV2Request {
	r.repayAmount = &repayAmount
	return r
}

func (r ApiCreateLoanFlexibleRepayV2Request) Timestamp(timestamp int64) ApiCreateLoanFlexibleRepayV2Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiCreateLoanFlexibleRepayV2Request) CollateralReturn(collateralReturn bool) ApiCreateLoanFlexibleRepayV2Request {
	r.collateralReturn = &collateralReturn
	return r
}

func (r ApiCreateLoanFlexibleRepayV2Request) FullRepayment(fullRepayment bool) ApiCreateLoanFlexibleRepayV2Request {
	r.fullRepayment = &fullRepayment
	return r
}

func (r ApiCreateLoanFlexibleRepayV2Request) RecvWindow(recvWindow int64) ApiCreateLoanFlexibleRepayV2Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiCreateLoanFlexibleRepayV2Request) Execute() (*CreateLoanFlexibleRepayV2Resp, *http.Response, error) {
	return r.ApiService.CreateLoanFlexibleRepayV2Execute(r)
}

/*
CreateLoanFlexibleRepayV2 Flexible Loan Repay(TRADE)

Flexible Loan Repay

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateLoanFlexibleRepayV2Request
*/
func (a *CryptoLoanAPIService) CreateLoanFlexibleRepayV2(ctx context.Context) ApiCreateLoanFlexibleRepayV2Request {
	return ApiCreateLoanFlexibleRepayV2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateLoanFlexibleRepayV2Resp
func (a *CryptoLoanAPIService) CreateLoanFlexibleRepayV2Execute(r ApiCreateLoanFlexibleRepayV2Request) (*CreateLoanFlexibleRepayV2Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateLoanFlexibleRepayV2Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoLoanAPIService.CreateLoanFlexibleRepayV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v2/loan/flexible/repay"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.collateralCoin == nil {
		return localVarReturnValue, nil, reportError("collateralCoin is required and must be specified")
	}
	if r.loanCoin == nil {
		return localVarReturnValue, nil, reportError("loanCoin is required and must be specified")
	}
	if r.repayAmount == nil {
		return localVarReturnValue, nil, reportError("repayAmount is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "collateralCoin", r.collateralCoin, "", "")
	if r.collateralReturn != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "collateralReturn", r.collateralReturn, "", "")
	}
	if r.fullRepayment != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "fullRepayment", r.fullRepayment, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "loanCoin", r.loanCoin, "", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "repayAmount", r.repayAmount, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLoanBorrowHistoryV1Request struct {
	ctx context.Context
	ApiService *CryptoLoanAPIService
	timestamp *int64
	orderId *int64
	loanCoin *string
	collateralCoin *string
	startTime *int64
	endTime *int64
	current *int64
	limit *int64
	recvWindow *int64
}

func (r ApiGetLoanBorrowHistoryV1Request) Timestamp(timestamp int64) ApiGetLoanBorrowHistoryV1Request {
	r.timestamp = &timestamp
	return r
}

// orderId in &#x60;POST /sapi/v1/loan/borrow&#x60;
func (r ApiGetLoanBorrowHistoryV1Request) OrderId(orderId int64) ApiGetLoanBorrowHistoryV1Request {
	r.orderId = &orderId
	return r
}

func (r ApiGetLoanBorrowHistoryV1Request) LoanCoin(loanCoin string) ApiGetLoanBorrowHistoryV1Request {
	r.loanCoin = &loanCoin
	return r
}

func (r ApiGetLoanBorrowHistoryV1Request) CollateralCoin(collateralCoin string) ApiGetLoanBorrowHistoryV1Request {
	r.collateralCoin = &collateralCoin
	return r
}

func (r ApiGetLoanBorrowHistoryV1Request) StartTime(startTime int64) ApiGetLoanBorrowHistoryV1Request {
	r.startTime = &startTime
	return r
}

func (r ApiGetLoanBorrowHistoryV1Request) EndTime(endTime int64) ApiGetLoanBorrowHistoryV1Request {
	r.endTime = &endTime
	return r
}

// Current querying page. Start from 1; default: 1; max: 1000.
func (r ApiGetLoanBorrowHistoryV1Request) Current(current int64) ApiGetLoanBorrowHistoryV1Request {
	r.current = &current
	return r
}

// Default: 10; max: 100.
func (r ApiGetLoanBorrowHistoryV1Request) Limit(limit int64) ApiGetLoanBorrowHistoryV1Request {
	r.limit = &limit
	return r
}

func (r ApiGetLoanBorrowHistoryV1Request) RecvWindow(recvWindow int64) ApiGetLoanBorrowHistoryV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetLoanBorrowHistoryV1Request) Execute() (*GetLoanBorrowHistoryV1Resp, *http.Response, error) {
	return r.ApiService.GetLoanBorrowHistoryV1Execute(r)
}

/*
GetLoanBorrowHistoryV1 Get Loan Borrow History(USER_DATA)

Get Loan Borrow History

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLoanBorrowHistoryV1Request
*/
func (a *CryptoLoanAPIService) GetLoanBorrowHistoryV1(ctx context.Context) ApiGetLoanBorrowHistoryV1Request {
	return ApiGetLoanBorrowHistoryV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetLoanBorrowHistoryV1Resp
func (a *CryptoLoanAPIService) GetLoanBorrowHistoryV1Execute(r ApiGetLoanBorrowHistoryV1Request) (*GetLoanBorrowHistoryV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetLoanBorrowHistoryV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoLoanAPIService.GetLoanBorrowHistoryV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/loan/borrow/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.orderId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderId", r.orderId, "form", "")
	}
	if r.loanCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "loanCoin", r.loanCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.loanCoin = &defaultValue
	}
	if r.collateralCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collateralCoin", r.collateralCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.collateralCoin = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.current != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "current", r.current, "form", "")
	} else {
		var defaultValue int64 = 1
		r.current = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int64 = 10
		r.limit = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLoanFlexibleBorrowHistoryV2Request struct {
	ctx context.Context
	ApiService *CryptoLoanAPIService
	timestamp *int64
	loanCoin *string
	collateralCoin *string
	startTime *int64
	endTime *int64
	current *int64
	limit *int64
	recvWindow *int64
}

func (r ApiGetLoanFlexibleBorrowHistoryV2Request) Timestamp(timestamp int64) ApiGetLoanFlexibleBorrowHistoryV2Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetLoanFlexibleBorrowHistoryV2Request) LoanCoin(loanCoin string) ApiGetLoanFlexibleBorrowHistoryV2Request {
	r.loanCoin = &loanCoin
	return r
}

func (r ApiGetLoanFlexibleBorrowHistoryV2Request) CollateralCoin(collateralCoin string) ApiGetLoanFlexibleBorrowHistoryV2Request {
	r.collateralCoin = &collateralCoin
	return r
}

func (r ApiGetLoanFlexibleBorrowHistoryV2Request) StartTime(startTime int64) ApiGetLoanFlexibleBorrowHistoryV2Request {
	r.startTime = &startTime
	return r
}

func (r ApiGetLoanFlexibleBorrowHistoryV2Request) EndTime(endTime int64) ApiGetLoanFlexibleBorrowHistoryV2Request {
	r.endTime = &endTime
	return r
}

// Current querying page. Start from 1; default: 1; max: 1000
func (r ApiGetLoanFlexibleBorrowHistoryV2Request) Current(current int64) ApiGetLoanFlexibleBorrowHistoryV2Request {
	r.current = &current
	return r
}

// Default: 10; max: 100
func (r ApiGetLoanFlexibleBorrowHistoryV2Request) Limit(limit int64) ApiGetLoanFlexibleBorrowHistoryV2Request {
	r.limit = &limit
	return r
}

func (r ApiGetLoanFlexibleBorrowHistoryV2Request) RecvWindow(recvWindow int64) ApiGetLoanFlexibleBorrowHistoryV2Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetLoanFlexibleBorrowHistoryV2Request) Execute() (*GetLoanFlexibleBorrowHistoryV2Resp, *http.Response, error) {
	return r.ApiService.GetLoanFlexibleBorrowHistoryV2Execute(r)
}

/*
GetLoanFlexibleBorrowHistoryV2 Get Flexible Loan Borrow History(USER_DATA)

Get Flexible Loan Borrow History

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLoanFlexibleBorrowHistoryV2Request
*/
func (a *CryptoLoanAPIService) GetLoanFlexibleBorrowHistoryV2(ctx context.Context) ApiGetLoanFlexibleBorrowHistoryV2Request {
	return ApiGetLoanFlexibleBorrowHistoryV2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetLoanFlexibleBorrowHistoryV2Resp
func (a *CryptoLoanAPIService) GetLoanFlexibleBorrowHistoryV2Execute(r ApiGetLoanFlexibleBorrowHistoryV2Request) (*GetLoanFlexibleBorrowHistoryV2Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetLoanFlexibleBorrowHistoryV2Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoLoanAPIService.GetLoanFlexibleBorrowHistoryV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v2/loan/flexible/borrow/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.loanCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "loanCoin", r.loanCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.loanCoin = &defaultValue
	}
	if r.collateralCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collateralCoin", r.collateralCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.collateralCoin = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.current != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "current", r.current, "form", "")
	} else {
		var defaultValue int64 = 1
		r.current = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int64 = 10
		r.limit = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLoanFlexibleCollateralDataV2Request struct {
	ctx context.Context
	ApiService *CryptoLoanAPIService
	timestamp *int64
	collateralCoin *string
	recvWindow *int64
}

func (r ApiGetLoanFlexibleCollateralDataV2Request) Timestamp(timestamp int64) ApiGetLoanFlexibleCollateralDataV2Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetLoanFlexibleCollateralDataV2Request) CollateralCoin(collateralCoin string) ApiGetLoanFlexibleCollateralDataV2Request {
	r.collateralCoin = &collateralCoin
	return r
}

func (r ApiGetLoanFlexibleCollateralDataV2Request) RecvWindow(recvWindow int64) ApiGetLoanFlexibleCollateralDataV2Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetLoanFlexibleCollateralDataV2Request) Execute() (*GetLoanFlexibleCollateralDataV2Resp, *http.Response, error) {
	return r.ApiService.GetLoanFlexibleCollateralDataV2Execute(r)
}

/*
GetLoanFlexibleCollateralDataV2 Get Flexible Loan Collateral Assets Data(USER_DATA)

Get LTV information and collateral limit of flexible loan's collateral assets. The collateral limit is shown in USD value.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLoanFlexibleCollateralDataV2Request
*/
func (a *CryptoLoanAPIService) GetLoanFlexibleCollateralDataV2(ctx context.Context) ApiGetLoanFlexibleCollateralDataV2Request {
	return ApiGetLoanFlexibleCollateralDataV2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetLoanFlexibleCollateralDataV2Resp
func (a *CryptoLoanAPIService) GetLoanFlexibleCollateralDataV2Execute(r ApiGetLoanFlexibleCollateralDataV2Request) (*GetLoanFlexibleCollateralDataV2Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetLoanFlexibleCollateralDataV2Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoLoanAPIService.GetLoanFlexibleCollateralDataV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v2/loan/flexible/collateral/data"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.collateralCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collateralCoin", r.collateralCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.collateralCoin = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLoanFlexibleLiquidationHistoryV2Request struct {
	ctx context.Context
	ApiService *CryptoLoanAPIService
	timestamp *int64
	loanCoin *string
	collateralCoin *string
	startTime *int64
	endTime *int64
	current *int64
	limit *int64
	recvWindow *int64
}

func (r ApiGetLoanFlexibleLiquidationHistoryV2Request) Timestamp(timestamp int64) ApiGetLoanFlexibleLiquidationHistoryV2Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetLoanFlexibleLiquidationHistoryV2Request) LoanCoin(loanCoin string) ApiGetLoanFlexibleLiquidationHistoryV2Request {
	r.loanCoin = &loanCoin
	return r
}

func (r ApiGetLoanFlexibleLiquidationHistoryV2Request) CollateralCoin(collateralCoin string) ApiGetLoanFlexibleLiquidationHistoryV2Request {
	r.collateralCoin = &collateralCoin
	return r
}

func (r ApiGetLoanFlexibleLiquidationHistoryV2Request) StartTime(startTime int64) ApiGetLoanFlexibleLiquidationHistoryV2Request {
	r.startTime = &startTime
	return r
}

func (r ApiGetLoanFlexibleLiquidationHistoryV2Request) EndTime(endTime int64) ApiGetLoanFlexibleLiquidationHistoryV2Request {
	r.endTime = &endTime
	return r
}

// Current querying page. Start from 1; default: 1; max: 1000
func (r ApiGetLoanFlexibleLiquidationHistoryV2Request) Current(current int64) ApiGetLoanFlexibleLiquidationHistoryV2Request {
	r.current = &current
	return r
}

// Default: 10; max: 100
func (r ApiGetLoanFlexibleLiquidationHistoryV2Request) Limit(limit int64) ApiGetLoanFlexibleLiquidationHistoryV2Request {
	r.limit = &limit
	return r
}

func (r ApiGetLoanFlexibleLiquidationHistoryV2Request) RecvWindow(recvWindow int64) ApiGetLoanFlexibleLiquidationHistoryV2Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetLoanFlexibleLiquidationHistoryV2Request) Execute() (*GetLoanFlexibleLiquidationHistoryV2Resp, *http.Response, error) {
	return r.ApiService.GetLoanFlexibleLiquidationHistoryV2Execute(r)
}

/*
GetLoanFlexibleLiquidationHistoryV2 Get Flexible Loan Liquidation History (USER_DATA)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLoanFlexibleLiquidationHistoryV2Request
*/
func (a *CryptoLoanAPIService) GetLoanFlexibleLiquidationHistoryV2(ctx context.Context) ApiGetLoanFlexibleLiquidationHistoryV2Request {
	return ApiGetLoanFlexibleLiquidationHistoryV2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetLoanFlexibleLiquidationHistoryV2Resp
func (a *CryptoLoanAPIService) GetLoanFlexibleLiquidationHistoryV2Execute(r ApiGetLoanFlexibleLiquidationHistoryV2Request) (*GetLoanFlexibleLiquidationHistoryV2Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetLoanFlexibleLiquidationHistoryV2Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoLoanAPIService.GetLoanFlexibleLiquidationHistoryV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v2/loan/flexible/liquidation/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.loanCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "loanCoin", r.loanCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.loanCoin = &defaultValue
	}
	if r.collateralCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collateralCoin", r.collateralCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.collateralCoin = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.current != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "current", r.current, "form", "")
	} else {
		var defaultValue int64 = 1
		r.current = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int64 = 10
		r.limit = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLoanFlexibleLoanableDataV2Request struct {
	ctx context.Context
	ApiService *CryptoLoanAPIService
	timestamp *int64
	loanCoin *string
	recvWindow *int64
}

func (r ApiGetLoanFlexibleLoanableDataV2Request) Timestamp(timestamp int64) ApiGetLoanFlexibleLoanableDataV2Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetLoanFlexibleLoanableDataV2Request) LoanCoin(loanCoin string) ApiGetLoanFlexibleLoanableDataV2Request {
	r.loanCoin = &loanCoin
	return r
}

func (r ApiGetLoanFlexibleLoanableDataV2Request) RecvWindow(recvWindow int64) ApiGetLoanFlexibleLoanableDataV2Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetLoanFlexibleLoanableDataV2Request) Execute() (*GetLoanFlexibleLoanableDataV2Resp, *http.Response, error) {
	return r.ApiService.GetLoanFlexibleLoanableDataV2Execute(r)
}

/*
GetLoanFlexibleLoanableDataV2 Get Flexible Loan Assets Data(USER_DATA)

Get interest rate and borrow limit of flexible loanable assets. The borrow limit is shown in USD value.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLoanFlexibleLoanableDataV2Request
*/
func (a *CryptoLoanAPIService) GetLoanFlexibleLoanableDataV2(ctx context.Context) ApiGetLoanFlexibleLoanableDataV2Request {
	return ApiGetLoanFlexibleLoanableDataV2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetLoanFlexibleLoanableDataV2Resp
func (a *CryptoLoanAPIService) GetLoanFlexibleLoanableDataV2Execute(r ApiGetLoanFlexibleLoanableDataV2Request) (*GetLoanFlexibleLoanableDataV2Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetLoanFlexibleLoanableDataV2Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoLoanAPIService.GetLoanFlexibleLoanableDataV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v2/loan/flexible/loanable/data"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.loanCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "loanCoin", r.loanCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.loanCoin = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLoanFlexibleLtvAdjustmentHistoryV2Request struct {
	ctx context.Context
	ApiService *CryptoLoanAPIService
	timestamp *int64
	loanCoin *string
	collateralCoin *string
	startTime *int64
	endTime *int64
	current *int64
	limit *int64
	recvWindow *int64
}

func (r ApiGetLoanFlexibleLtvAdjustmentHistoryV2Request) Timestamp(timestamp int64) ApiGetLoanFlexibleLtvAdjustmentHistoryV2Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetLoanFlexibleLtvAdjustmentHistoryV2Request) LoanCoin(loanCoin string) ApiGetLoanFlexibleLtvAdjustmentHistoryV2Request {
	r.loanCoin = &loanCoin
	return r
}

func (r ApiGetLoanFlexibleLtvAdjustmentHistoryV2Request) CollateralCoin(collateralCoin string) ApiGetLoanFlexibleLtvAdjustmentHistoryV2Request {
	r.collateralCoin = &collateralCoin
	return r
}

func (r ApiGetLoanFlexibleLtvAdjustmentHistoryV2Request) StartTime(startTime int64) ApiGetLoanFlexibleLtvAdjustmentHistoryV2Request {
	r.startTime = &startTime
	return r
}

func (r ApiGetLoanFlexibleLtvAdjustmentHistoryV2Request) EndTime(endTime int64) ApiGetLoanFlexibleLtvAdjustmentHistoryV2Request {
	r.endTime = &endTime
	return r
}

// Current querying page. Start from 1; default: 1; max: 1000
func (r ApiGetLoanFlexibleLtvAdjustmentHistoryV2Request) Current(current int64) ApiGetLoanFlexibleLtvAdjustmentHistoryV2Request {
	r.current = &current
	return r
}

// Default: 10; max: 100
func (r ApiGetLoanFlexibleLtvAdjustmentHistoryV2Request) Limit(limit int64) ApiGetLoanFlexibleLtvAdjustmentHistoryV2Request {
	r.limit = &limit
	return r
}

func (r ApiGetLoanFlexibleLtvAdjustmentHistoryV2Request) RecvWindow(recvWindow int64) ApiGetLoanFlexibleLtvAdjustmentHistoryV2Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetLoanFlexibleLtvAdjustmentHistoryV2Request) Execute() (*GetLoanFlexibleLtvAdjustmentHistoryV2Resp, *http.Response, error) {
	return r.ApiService.GetLoanFlexibleLtvAdjustmentHistoryV2Execute(r)
}

/*
GetLoanFlexibleLtvAdjustmentHistoryV2 Get Flexible Loan LTV Adjustment History(USER_DATA)

Get Flexible Loan LTV Adjustment History

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLoanFlexibleLtvAdjustmentHistoryV2Request
*/
func (a *CryptoLoanAPIService) GetLoanFlexibleLtvAdjustmentHistoryV2(ctx context.Context) ApiGetLoanFlexibleLtvAdjustmentHistoryV2Request {
	return ApiGetLoanFlexibleLtvAdjustmentHistoryV2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetLoanFlexibleLtvAdjustmentHistoryV2Resp
func (a *CryptoLoanAPIService) GetLoanFlexibleLtvAdjustmentHistoryV2Execute(r ApiGetLoanFlexibleLtvAdjustmentHistoryV2Request) (*GetLoanFlexibleLtvAdjustmentHistoryV2Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetLoanFlexibleLtvAdjustmentHistoryV2Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoLoanAPIService.GetLoanFlexibleLtvAdjustmentHistoryV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v2/loan/flexible/ltv/adjustment/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.loanCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "loanCoin", r.loanCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.loanCoin = &defaultValue
	}
	if r.collateralCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collateralCoin", r.collateralCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.collateralCoin = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.current != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "current", r.current, "form", "")
	} else {
		var defaultValue int64 = 1
		r.current = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int64 = 10
		r.limit = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLoanFlexibleOngoingOrdersV2Request struct {
	ctx context.Context
	ApiService *CryptoLoanAPIService
	timestamp *int64
	loanCoin *string
	collateralCoin *string
	current *int64
	limit *int64
	recvWindow *int64
}

func (r ApiGetLoanFlexibleOngoingOrdersV2Request) Timestamp(timestamp int64) ApiGetLoanFlexibleOngoingOrdersV2Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetLoanFlexibleOngoingOrdersV2Request) LoanCoin(loanCoin string) ApiGetLoanFlexibleOngoingOrdersV2Request {
	r.loanCoin = &loanCoin
	return r
}

func (r ApiGetLoanFlexibleOngoingOrdersV2Request) CollateralCoin(collateralCoin string) ApiGetLoanFlexibleOngoingOrdersV2Request {
	r.collateralCoin = &collateralCoin
	return r
}

// Current querying page. Start from 1; default: 1; max: 1000
func (r ApiGetLoanFlexibleOngoingOrdersV2Request) Current(current int64) ApiGetLoanFlexibleOngoingOrdersV2Request {
	r.current = &current
	return r
}

// Default: 10; max: 100
func (r ApiGetLoanFlexibleOngoingOrdersV2Request) Limit(limit int64) ApiGetLoanFlexibleOngoingOrdersV2Request {
	r.limit = &limit
	return r
}

func (r ApiGetLoanFlexibleOngoingOrdersV2Request) RecvWindow(recvWindow int64) ApiGetLoanFlexibleOngoingOrdersV2Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetLoanFlexibleOngoingOrdersV2Request) Execute() (*GetLoanFlexibleOngoingOrdersV2Resp, *http.Response, error) {
	return r.ApiService.GetLoanFlexibleOngoingOrdersV2Execute(r)
}

/*
GetLoanFlexibleOngoingOrdersV2 Get Flexible Loan Ongoing Orders(USER_DATA)

Get Flexible Loan Ongoing Orders

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLoanFlexibleOngoingOrdersV2Request
*/
func (a *CryptoLoanAPIService) GetLoanFlexibleOngoingOrdersV2(ctx context.Context) ApiGetLoanFlexibleOngoingOrdersV2Request {
	return ApiGetLoanFlexibleOngoingOrdersV2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetLoanFlexibleOngoingOrdersV2Resp
func (a *CryptoLoanAPIService) GetLoanFlexibleOngoingOrdersV2Execute(r ApiGetLoanFlexibleOngoingOrdersV2Request) (*GetLoanFlexibleOngoingOrdersV2Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetLoanFlexibleOngoingOrdersV2Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoLoanAPIService.GetLoanFlexibleOngoingOrdersV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v2/loan/flexible/ongoing/orders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.loanCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "loanCoin", r.loanCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.loanCoin = &defaultValue
	}
	if r.collateralCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collateralCoin", r.collateralCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.collateralCoin = &defaultValue
	}
	if r.current != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "current", r.current, "form", "")
	} else {
		var defaultValue int64 = 1
		r.current = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int64 = 10
		r.limit = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLoanFlexibleRepayHistoryV2Request struct {
	ctx context.Context
	ApiService *CryptoLoanAPIService
	timestamp *int64
	loanCoin *string
	collateralCoin *string
	startTime *int64
	endTime *int64
	current *int64
	limit *int64
	recvWindow *int64
}

func (r ApiGetLoanFlexibleRepayHistoryV2Request) Timestamp(timestamp int64) ApiGetLoanFlexibleRepayHistoryV2Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetLoanFlexibleRepayHistoryV2Request) LoanCoin(loanCoin string) ApiGetLoanFlexibleRepayHistoryV2Request {
	r.loanCoin = &loanCoin
	return r
}

func (r ApiGetLoanFlexibleRepayHistoryV2Request) CollateralCoin(collateralCoin string) ApiGetLoanFlexibleRepayHistoryV2Request {
	r.collateralCoin = &collateralCoin
	return r
}

func (r ApiGetLoanFlexibleRepayHistoryV2Request) StartTime(startTime int64) ApiGetLoanFlexibleRepayHistoryV2Request {
	r.startTime = &startTime
	return r
}

func (r ApiGetLoanFlexibleRepayHistoryV2Request) EndTime(endTime int64) ApiGetLoanFlexibleRepayHistoryV2Request {
	r.endTime = &endTime
	return r
}

// Current querying page. Start from 1; default: 1; max: 1000
func (r ApiGetLoanFlexibleRepayHistoryV2Request) Current(current int64) ApiGetLoanFlexibleRepayHistoryV2Request {
	r.current = &current
	return r
}

// Default: 10; max: 100
func (r ApiGetLoanFlexibleRepayHistoryV2Request) Limit(limit int64) ApiGetLoanFlexibleRepayHistoryV2Request {
	r.limit = &limit
	return r
}

func (r ApiGetLoanFlexibleRepayHistoryV2Request) RecvWindow(recvWindow int64) ApiGetLoanFlexibleRepayHistoryV2Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetLoanFlexibleRepayHistoryV2Request) Execute() (*GetLoanFlexibleRepayHistoryV2Resp, *http.Response, error) {
	return r.ApiService.GetLoanFlexibleRepayHistoryV2Execute(r)
}

/*
GetLoanFlexibleRepayHistoryV2 Get Flexible Loan Repayment History(USER_DATA)

Get Flexible Loan Repayment History

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLoanFlexibleRepayHistoryV2Request
*/
func (a *CryptoLoanAPIService) GetLoanFlexibleRepayHistoryV2(ctx context.Context) ApiGetLoanFlexibleRepayHistoryV2Request {
	return ApiGetLoanFlexibleRepayHistoryV2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetLoanFlexibleRepayHistoryV2Resp
func (a *CryptoLoanAPIService) GetLoanFlexibleRepayHistoryV2Execute(r ApiGetLoanFlexibleRepayHistoryV2Request) (*GetLoanFlexibleRepayHistoryV2Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetLoanFlexibleRepayHistoryV2Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoLoanAPIService.GetLoanFlexibleRepayHistoryV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v2/loan/flexible/repay/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.loanCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "loanCoin", r.loanCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.loanCoin = &defaultValue
	}
	if r.collateralCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collateralCoin", r.collateralCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.collateralCoin = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.current != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "current", r.current, "form", "")
	} else {
		var defaultValue int64 = 1
		r.current = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int64 = 10
		r.limit = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLoanFlexibleRepayRateV2Request struct {
	ctx context.Context
	ApiService *CryptoLoanAPIService
	loanCoin *string
	collateralCoin *string
	timestamp *int64
	recvWindow *int64
}

func (r ApiGetLoanFlexibleRepayRateV2Request) LoanCoin(loanCoin string) ApiGetLoanFlexibleRepayRateV2Request {
	r.loanCoin = &loanCoin
	return r
}

func (r ApiGetLoanFlexibleRepayRateV2Request) CollateralCoin(collateralCoin string) ApiGetLoanFlexibleRepayRateV2Request {
	r.collateralCoin = &collateralCoin
	return r
}

func (r ApiGetLoanFlexibleRepayRateV2Request) Timestamp(timestamp int64) ApiGetLoanFlexibleRepayRateV2Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetLoanFlexibleRepayRateV2Request) RecvWindow(recvWindow int64) ApiGetLoanFlexibleRepayRateV2Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetLoanFlexibleRepayRateV2Request) Execute() (*GetLoanFlexibleRepayRateV2Resp, *http.Response, error) {
	return r.ApiService.GetLoanFlexibleRepayRateV2Execute(r)
}

/*
GetLoanFlexibleRepayRateV2 Check Collateral Repay Rate (USER_DATA)

Get the latest rate of collateral coin/loan coin when using collateral repay.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLoanFlexibleRepayRateV2Request
*/
func (a *CryptoLoanAPIService) GetLoanFlexibleRepayRateV2(ctx context.Context) ApiGetLoanFlexibleRepayRateV2Request {
	return ApiGetLoanFlexibleRepayRateV2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetLoanFlexibleRepayRateV2Resp
func (a *CryptoLoanAPIService) GetLoanFlexibleRepayRateV2Execute(r ApiGetLoanFlexibleRepayRateV2Request) (*GetLoanFlexibleRepayRateV2Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetLoanFlexibleRepayRateV2Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoLoanAPIService.GetLoanFlexibleRepayRateV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v2/loan/flexible/repay/rate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.loanCoin == nil {
		return localVarReturnValue, nil, reportError("loanCoin is required and must be specified")
	}
	if r.collateralCoin == nil {
		return localVarReturnValue, nil, reportError("collateralCoin is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "loanCoin", r.loanCoin, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "collateralCoin", r.collateralCoin, "form", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLoanIncomeV1Request struct {
	ctx context.Context
	ApiService *CryptoLoanAPIService
	timestamp *int64
	asset *string
	type_ *string
	startTime *int64
	endTime *int64
	limit *int32
	recvWindow *int64
}

func (r ApiGetLoanIncomeV1Request) Timestamp(timestamp int64) ApiGetLoanIncomeV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetLoanIncomeV1Request) Asset(asset string) ApiGetLoanIncomeV1Request {
	r.asset = &asset
	return r
}

// All types will be returned by default. Enum：&#x60;borrowIn&#x60; ,&#x60;collateralSpent&#x60;, &#x60;repayAmount&#x60;, &#x60;collateralReturn&#x60;(Collateral return after repayment), &#x60;addCollateral&#x60;, &#x60;removeCollateral&#x60;, &#x60;collateralReturnAfterLiquidation&#x60;
func (r ApiGetLoanIncomeV1Request) Type_(type_ string) ApiGetLoanIncomeV1Request {
	r.type_ = &type_
	return r
}

func (r ApiGetLoanIncomeV1Request) StartTime(startTime int64) ApiGetLoanIncomeV1Request {
	r.startTime = &startTime
	return r
}

func (r ApiGetLoanIncomeV1Request) EndTime(endTime int64) ApiGetLoanIncomeV1Request {
	r.endTime = &endTime
	return r
}

// default 20, max 100
func (r ApiGetLoanIncomeV1Request) Limit(limit int32) ApiGetLoanIncomeV1Request {
	r.limit = &limit
	return r
}

func (r ApiGetLoanIncomeV1Request) RecvWindow(recvWindow int64) ApiGetLoanIncomeV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetLoanIncomeV1Request) Execute() ([]GetLoanIncomeV1RespItem, *http.Response, error) {
	return r.ApiService.GetLoanIncomeV1Execute(r)
}

/*
GetLoanIncomeV1 Get Crypto Loans Income History(USER_DATA)

Get Crypto Loans Income History

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLoanIncomeV1Request
*/
func (a *CryptoLoanAPIService) GetLoanIncomeV1(ctx context.Context) ApiGetLoanIncomeV1Request {
	return ApiGetLoanIncomeV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []GetLoanIncomeV1RespItem
func (a *CryptoLoanAPIService) GetLoanIncomeV1Execute(r ApiGetLoanIncomeV1Request) ([]GetLoanIncomeV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetLoanIncomeV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoLoanAPIService.GetLoanIncomeV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/loan/income"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.asset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asset", r.asset, "form", "")
	} else {
		var defaultValue string = ""
		r.asset = &defaultValue
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	} else {
		var defaultValue string = ""
		r.type_ = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 20
		r.limit = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLoanLtvAdjustmentHistoryV1Request struct {
	ctx context.Context
	ApiService *CryptoLoanAPIService
	timestamp *int64
	orderId *int64
	loanCoin *string
	collateralCoin *string
	startTime *int64
	endTime *int64
	current *int64
	limit *int64
	recvWindow *int64
}

func (r ApiGetLoanLtvAdjustmentHistoryV1Request) Timestamp(timestamp int64) ApiGetLoanLtvAdjustmentHistoryV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetLoanLtvAdjustmentHistoryV1Request) OrderId(orderId int64) ApiGetLoanLtvAdjustmentHistoryV1Request {
	r.orderId = &orderId
	return r
}

func (r ApiGetLoanLtvAdjustmentHistoryV1Request) LoanCoin(loanCoin string) ApiGetLoanLtvAdjustmentHistoryV1Request {
	r.loanCoin = &loanCoin
	return r
}

func (r ApiGetLoanLtvAdjustmentHistoryV1Request) CollateralCoin(collateralCoin string) ApiGetLoanLtvAdjustmentHistoryV1Request {
	r.collateralCoin = &collateralCoin
	return r
}

func (r ApiGetLoanLtvAdjustmentHistoryV1Request) StartTime(startTime int64) ApiGetLoanLtvAdjustmentHistoryV1Request {
	r.startTime = &startTime
	return r
}

func (r ApiGetLoanLtvAdjustmentHistoryV1Request) EndTime(endTime int64) ApiGetLoanLtvAdjustmentHistoryV1Request {
	r.endTime = &endTime
	return r
}

// Current querying page. Start from 1; default: 1; max: 1000
func (r ApiGetLoanLtvAdjustmentHistoryV1Request) Current(current int64) ApiGetLoanLtvAdjustmentHistoryV1Request {
	r.current = &current
	return r
}

// Default: 10; max: 100
func (r ApiGetLoanLtvAdjustmentHistoryV1Request) Limit(limit int64) ApiGetLoanLtvAdjustmentHistoryV1Request {
	r.limit = &limit
	return r
}

func (r ApiGetLoanLtvAdjustmentHistoryV1Request) RecvWindow(recvWindow int64) ApiGetLoanLtvAdjustmentHistoryV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetLoanLtvAdjustmentHistoryV1Request) Execute() (*GetLoanLtvAdjustmentHistoryV1Resp, *http.Response, error) {
	return r.ApiService.GetLoanLtvAdjustmentHistoryV1Execute(r)
}

/*
GetLoanLtvAdjustmentHistoryV1 Get Loan LTV Adjustment History(USER_DATA)

Get Loan LTV Adjustment History

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLoanLtvAdjustmentHistoryV1Request
*/
func (a *CryptoLoanAPIService) GetLoanLtvAdjustmentHistoryV1(ctx context.Context) ApiGetLoanLtvAdjustmentHistoryV1Request {
	return ApiGetLoanLtvAdjustmentHistoryV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetLoanLtvAdjustmentHistoryV1Resp
func (a *CryptoLoanAPIService) GetLoanLtvAdjustmentHistoryV1Execute(r ApiGetLoanLtvAdjustmentHistoryV1Request) (*GetLoanLtvAdjustmentHistoryV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetLoanLtvAdjustmentHistoryV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoLoanAPIService.GetLoanLtvAdjustmentHistoryV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/loan/ltv/adjustment/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.orderId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderId", r.orderId, "form", "")
	}
	if r.loanCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "loanCoin", r.loanCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.loanCoin = &defaultValue
	}
	if r.collateralCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collateralCoin", r.collateralCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.collateralCoin = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.current != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "current", r.current, "form", "")
	} else {
		var defaultValue int64 = 1
		r.current = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int64 = 10
		r.limit = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLoanRepayHistoryV1Request struct {
	ctx context.Context
	ApiService *CryptoLoanAPIService
	timestamp *int64
	orderId *int64
	loanCoin *string
	collateralCoin *string
	startTime *int64
	endTime *int64
	current *int64
	limit *int64
	recvWindow *int64
}

func (r ApiGetLoanRepayHistoryV1Request) Timestamp(timestamp int64) ApiGetLoanRepayHistoryV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetLoanRepayHistoryV1Request) OrderId(orderId int64) ApiGetLoanRepayHistoryV1Request {
	r.orderId = &orderId
	return r
}

func (r ApiGetLoanRepayHistoryV1Request) LoanCoin(loanCoin string) ApiGetLoanRepayHistoryV1Request {
	r.loanCoin = &loanCoin
	return r
}

func (r ApiGetLoanRepayHistoryV1Request) CollateralCoin(collateralCoin string) ApiGetLoanRepayHistoryV1Request {
	r.collateralCoin = &collateralCoin
	return r
}

func (r ApiGetLoanRepayHistoryV1Request) StartTime(startTime int64) ApiGetLoanRepayHistoryV1Request {
	r.startTime = &startTime
	return r
}

func (r ApiGetLoanRepayHistoryV1Request) EndTime(endTime int64) ApiGetLoanRepayHistoryV1Request {
	r.endTime = &endTime
	return r
}

// Current querying page. Start from 1; default: 1; max: 1000
func (r ApiGetLoanRepayHistoryV1Request) Current(current int64) ApiGetLoanRepayHistoryV1Request {
	r.current = &current
	return r
}

// Default: 10; max: 100
func (r ApiGetLoanRepayHistoryV1Request) Limit(limit int64) ApiGetLoanRepayHistoryV1Request {
	r.limit = &limit
	return r
}

func (r ApiGetLoanRepayHistoryV1Request) RecvWindow(recvWindow int64) ApiGetLoanRepayHistoryV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetLoanRepayHistoryV1Request) Execute() (*GetLoanRepayHistoryV1Resp, *http.Response, error) {
	return r.ApiService.GetLoanRepayHistoryV1Execute(r)
}

/*
GetLoanRepayHistoryV1 Get Loan Repayment History(USER_DATA)

Get Loan Repayment History

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLoanRepayHistoryV1Request
*/
func (a *CryptoLoanAPIService) GetLoanRepayHistoryV1(ctx context.Context) ApiGetLoanRepayHistoryV1Request {
	return ApiGetLoanRepayHistoryV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetLoanRepayHistoryV1Resp
func (a *CryptoLoanAPIService) GetLoanRepayHistoryV1Execute(r ApiGetLoanRepayHistoryV1Request) (*GetLoanRepayHistoryV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetLoanRepayHistoryV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoLoanAPIService.GetLoanRepayHistoryV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/loan/repay/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.orderId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderId", r.orderId, "form", "")
	}
	if r.loanCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "loanCoin", r.loanCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.loanCoin = &defaultValue
	}
	if r.collateralCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collateralCoin", r.collateralCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.collateralCoin = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.current != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "current", r.current, "form", "")
	} else {
		var defaultValue int64 = 1
		r.current = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int64 = 10
		r.limit = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

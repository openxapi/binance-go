/*
Binance Spot API

OpenAPI specification for Binance exchange - Spot API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spot

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SpotGetTickerTradingDayV3Resp - struct for SpotGetTickerTradingDayV3Resp
type SpotGetTickerTradingDayV3Resp struct {
	SpotGetTickerTradingDayV3RespItem *SpotGetTickerTradingDayV3RespItem
	ArrayOfSpotGetTickerTradingDayV3RespItem *[]SpotGetTickerTradingDayV3RespItem
}

// SpotGetTickerTradingDayV3RespItemAsSpotGetTickerTradingDayV3Resp is a convenience function that returns SpotGetTickerTradingDayV3RespItem wrapped in SpotGetTickerTradingDayV3Resp
func SpotGetTickerTradingDayV3RespItemAsSpotGetTickerTradingDayV3Resp(v *SpotGetTickerTradingDayV3RespItem) SpotGetTickerTradingDayV3Resp {
	return SpotGetTickerTradingDayV3Resp{
		SpotGetTickerTradingDayV3RespItem: v,
	}
}

// []SpotGetTickerTradingDayV3RespItemAsSpotGetTickerTradingDayV3Resp is a convenience function that returns []SpotGetTickerTradingDayV3RespItem wrapped in SpotGetTickerTradingDayV3Resp
func ArrayOfSpotGetTickerTradingDayV3RespItemAsSpotGetTickerTradingDayV3Resp(v *[]SpotGetTickerTradingDayV3RespItem) SpotGetTickerTradingDayV3Resp {
	return SpotGetTickerTradingDayV3Resp{
		ArrayOfSpotGetTickerTradingDayV3RespItem: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SpotGetTickerTradingDayV3Resp) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SpotGetTickerTradingDayV3RespItem
	err = newStrictDecoder(data).Decode(&dst.SpotGetTickerTradingDayV3RespItem)
	if err == nil {
		jsonSpotGetTickerTradingDayV3RespItem, _ := json.Marshal(dst.SpotGetTickerTradingDayV3RespItem)
		if string(jsonSpotGetTickerTradingDayV3RespItem) == "{}" { // empty struct
			dst.SpotGetTickerTradingDayV3RespItem = nil
		} else {
			if err = validator.Validate(dst.SpotGetTickerTradingDayV3RespItem); err != nil {
				dst.SpotGetTickerTradingDayV3RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.SpotGetTickerTradingDayV3RespItem = nil
	}

	// try to unmarshal data into ArrayOfSpotGetTickerTradingDayV3RespItem
	err = newStrictDecoder(data).Decode(&dst.ArrayOfSpotGetTickerTradingDayV3RespItem)
	if err == nil {
		jsonArrayOfSpotGetTickerTradingDayV3RespItem, _ := json.Marshal(dst.ArrayOfSpotGetTickerTradingDayV3RespItem)
		if string(jsonArrayOfSpotGetTickerTradingDayV3RespItem) == "{}" { // empty struct
			dst.ArrayOfSpotGetTickerTradingDayV3RespItem = nil
		} else {
			if err = validator.Validate(dst.ArrayOfSpotGetTickerTradingDayV3RespItem); err != nil {
				dst.ArrayOfSpotGetTickerTradingDayV3RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfSpotGetTickerTradingDayV3RespItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SpotGetTickerTradingDayV3RespItem = nil
		dst.ArrayOfSpotGetTickerTradingDayV3RespItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SpotGetTickerTradingDayV3Resp)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SpotGetTickerTradingDayV3Resp)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SpotGetTickerTradingDayV3Resp) MarshalJSON() ([]byte, error) {
	if src.SpotGetTickerTradingDayV3RespItem != nil {
		return json.Marshal(&src.SpotGetTickerTradingDayV3RespItem)
	}

	if src.ArrayOfSpotGetTickerTradingDayV3RespItem != nil {
		return json.Marshal(&src.ArrayOfSpotGetTickerTradingDayV3RespItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SpotGetTickerTradingDayV3Resp) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SpotGetTickerTradingDayV3RespItem != nil {
		return obj.SpotGetTickerTradingDayV3RespItem
	}

	if obj.ArrayOfSpotGetTickerTradingDayV3RespItem != nil {
		return obj.ArrayOfSpotGetTickerTradingDayV3RespItem
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SpotGetTickerTradingDayV3Resp) GetActualInstanceValue() (interface{}) {
	if obj.SpotGetTickerTradingDayV3RespItem != nil {
		return *obj.SpotGetTickerTradingDayV3RespItem
	}

	if obj.ArrayOfSpotGetTickerTradingDayV3RespItem != nil {
		return *obj.ArrayOfSpotGetTickerTradingDayV3RespItem
	}

	// all schemas are nil
	return nil
}

type NullableSpotGetTickerTradingDayV3Resp struct {
	value *SpotGetTickerTradingDayV3Resp
	isSet bool
}

func (v NullableSpotGetTickerTradingDayV3Resp) Get() *SpotGetTickerTradingDayV3Resp {
	return v.value
}

func (v *NullableSpotGetTickerTradingDayV3Resp) Set(val *SpotGetTickerTradingDayV3Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableSpotGetTickerTradingDayV3Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableSpotGetTickerTradingDayV3Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpotGetTickerTradingDayV3Resp(val *SpotGetTickerTradingDayV3Resp) *NullableSpotGetTickerTradingDayV3Resp {
	return &NullableSpotGetTickerTradingDayV3Resp{value: val, isSet: true}
}

func (v NullableSpotGetTickerTradingDayV3Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpotGetTickerTradingDayV3Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



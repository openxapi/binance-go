/*
Binance Spot API

OpenAPI specification for Binance exchange - Spot API

API version: 0.2.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spot

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SpotDeleteOpenOrdersV3RespInner - struct for SpotDeleteOpenOrdersV3RespInner
type SpotDeleteOpenOrdersV3RespInner struct {
	SpotDeleteOpenOrdersV3RespOrderItem *SpotDeleteOpenOrdersV3RespOrderItem
	SpotDeleteOpenOrdersV3RespOrderListItem *SpotDeleteOpenOrdersV3RespOrderListItem
}

// SpotDeleteOpenOrdersV3RespOrderItemAsSpotDeleteOpenOrdersV3RespInner is a convenience function that returns SpotDeleteOpenOrdersV3RespOrderItem wrapped in SpotDeleteOpenOrdersV3RespInner
func SpotDeleteOpenOrdersV3RespOrderItemAsSpotDeleteOpenOrdersV3RespInner(v *SpotDeleteOpenOrdersV3RespOrderItem) SpotDeleteOpenOrdersV3RespInner {
	return SpotDeleteOpenOrdersV3RespInner{
		SpotDeleteOpenOrdersV3RespOrderItem: v,
	}
}

// SpotDeleteOpenOrdersV3RespOrderListItemAsSpotDeleteOpenOrdersV3RespInner is a convenience function that returns SpotDeleteOpenOrdersV3RespOrderListItem wrapped in SpotDeleteOpenOrdersV3RespInner
func SpotDeleteOpenOrdersV3RespOrderListItemAsSpotDeleteOpenOrdersV3RespInner(v *SpotDeleteOpenOrdersV3RespOrderListItem) SpotDeleteOpenOrdersV3RespInner {
	return SpotDeleteOpenOrdersV3RespInner{
		SpotDeleteOpenOrdersV3RespOrderListItem: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SpotDeleteOpenOrdersV3RespInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SpotDeleteOpenOrdersV3RespOrderItem
	err = newStrictDecoder(data).Decode(&dst.SpotDeleteOpenOrdersV3RespOrderItem)
	if err == nil {
		jsonSpotDeleteOpenOrdersV3RespOrderItem, _ := json.Marshal(dst.SpotDeleteOpenOrdersV3RespOrderItem)
		if string(jsonSpotDeleteOpenOrdersV3RespOrderItem) == "{}" { // empty struct
			dst.SpotDeleteOpenOrdersV3RespOrderItem = nil
		} else {
			if err = validator.Validate(dst.SpotDeleteOpenOrdersV3RespOrderItem); err != nil {
				dst.SpotDeleteOpenOrdersV3RespOrderItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.SpotDeleteOpenOrdersV3RespOrderItem = nil
	}

	// try to unmarshal data into SpotDeleteOpenOrdersV3RespOrderListItem
	err = newStrictDecoder(data).Decode(&dst.SpotDeleteOpenOrdersV3RespOrderListItem)
	if err == nil {
		jsonSpotDeleteOpenOrdersV3RespOrderListItem, _ := json.Marshal(dst.SpotDeleteOpenOrdersV3RespOrderListItem)
		if string(jsonSpotDeleteOpenOrdersV3RespOrderListItem) == "{}" { // empty struct
			dst.SpotDeleteOpenOrdersV3RespOrderListItem = nil
		} else {
			if err = validator.Validate(dst.SpotDeleteOpenOrdersV3RespOrderListItem); err != nil {
				dst.SpotDeleteOpenOrdersV3RespOrderListItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.SpotDeleteOpenOrdersV3RespOrderListItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SpotDeleteOpenOrdersV3RespOrderItem = nil
		dst.SpotDeleteOpenOrdersV3RespOrderListItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SpotDeleteOpenOrdersV3RespInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SpotDeleteOpenOrdersV3RespInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SpotDeleteOpenOrdersV3RespInner) MarshalJSON() ([]byte, error) {
	if src.SpotDeleteOpenOrdersV3RespOrderItem != nil {
		return json.Marshal(&src.SpotDeleteOpenOrdersV3RespOrderItem)
	}

	if src.SpotDeleteOpenOrdersV3RespOrderListItem != nil {
		return json.Marshal(&src.SpotDeleteOpenOrdersV3RespOrderListItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SpotDeleteOpenOrdersV3RespInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SpotDeleteOpenOrdersV3RespOrderItem != nil {
		return obj.SpotDeleteOpenOrdersV3RespOrderItem
	}

	if obj.SpotDeleteOpenOrdersV3RespOrderListItem != nil {
		return obj.SpotDeleteOpenOrdersV3RespOrderListItem
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SpotDeleteOpenOrdersV3RespInner) GetActualInstanceValue() (interface{}) {
	if obj.SpotDeleteOpenOrdersV3RespOrderItem != nil {
		return *obj.SpotDeleteOpenOrdersV3RespOrderItem
	}

	if obj.SpotDeleteOpenOrdersV3RespOrderListItem != nil {
		return *obj.SpotDeleteOpenOrdersV3RespOrderListItem
	}

	// all schemas are nil
	return nil
}

type NullableSpotDeleteOpenOrdersV3RespInner struct {
	value *SpotDeleteOpenOrdersV3RespInner
	isSet bool
}

func (v NullableSpotDeleteOpenOrdersV3RespInner) Get() *SpotDeleteOpenOrdersV3RespInner {
	return v.value
}

func (v *NullableSpotDeleteOpenOrdersV3RespInner) Set(val *SpotDeleteOpenOrdersV3RespInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSpotDeleteOpenOrdersV3RespInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSpotDeleteOpenOrdersV3RespInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpotDeleteOpenOrdersV3RespInner(val *SpotDeleteOpenOrdersV3RespInner) *NullableSpotDeleteOpenOrdersV3RespInner {
	return &NullableSpotDeleteOpenOrdersV3RespInner{value: val, isSet: true}
}

func (v NullableSpotDeleteOpenOrdersV3RespInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpotDeleteOpenOrdersV3RespInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



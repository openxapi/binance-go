/*
Binance Spot API

OpenAPI specification for Binance exchange - Spot API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spot

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetBrokerInfoV1Req type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetBrokerInfoV1Req{}

// GetBrokerInfoV1Req struct for GetBrokerInfoV1Req
type GetBrokerInfoV1Req struct {
	RecvWindow *int64 `json:"recvWindow,omitempty"`
	Timestamp int64 `json:"timestamp"`
}

type _GetBrokerInfoV1Req GetBrokerInfoV1Req

// NewGetBrokerInfoV1Req instantiates a new GetBrokerInfoV1Req object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetBrokerInfoV1Req(timestamp int64) *GetBrokerInfoV1Req {
	this := GetBrokerInfoV1Req{}
	this.Timestamp = timestamp
	return &this
}

// NewGetBrokerInfoV1ReqWithDefaults instantiates a new GetBrokerInfoV1Req object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetBrokerInfoV1ReqWithDefaults() *GetBrokerInfoV1Req {
	this := GetBrokerInfoV1Req{}
	return &this
}

// GetRecvWindow returns the RecvWindow field value if set, zero value otherwise.
func (o *GetBrokerInfoV1Req) GetRecvWindow() int64 {
	if o == nil || IsNil(o.RecvWindow) {
		var ret int64
		return ret
	}
	return *o.RecvWindow
}

// GetRecvWindowOk returns a tuple with the RecvWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetBrokerInfoV1Req) GetRecvWindowOk() (*int64, bool) {
	if o == nil || IsNil(o.RecvWindow) {
		return nil, false
	}
	return o.RecvWindow, true
}

// HasRecvWindow returns a boolean if a field has been set.
func (o *GetBrokerInfoV1Req) HasRecvWindow() bool {
	if o != nil && !IsNil(o.RecvWindow) {
		return true
	}

	return false
}

// SetRecvWindow gets a reference to the given int64 and assigns it to the RecvWindow field.
func (o *GetBrokerInfoV1Req) SetRecvWindow(v int64) {
	o.RecvWindow = &v
}

// GetTimestamp returns the Timestamp field value
func (o *GetBrokerInfoV1Req) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *GetBrokerInfoV1Req) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *GetBrokerInfoV1Req) SetTimestamp(v int64) {
	o.Timestamp = v
}

func (o GetBrokerInfoV1Req) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetBrokerInfoV1Req) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecvWindow) {
		toSerialize["recvWindow"] = o.RecvWindow
	}
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

func (o *GetBrokerInfoV1Req) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetBrokerInfoV1Req := _GetBrokerInfoV1Req{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetBrokerInfoV1Req)

	if err != nil {
		return err
	}

	*o = GetBrokerInfoV1Req(varGetBrokerInfoV1Req)

	return err
}

type NullableGetBrokerInfoV1Req struct {
	value *GetBrokerInfoV1Req
	isSet bool
}

func (v NullableGetBrokerInfoV1Req) Get() *GetBrokerInfoV1Req {
	return v.value
}

func (v *NullableGetBrokerInfoV1Req) Set(val *GetBrokerInfoV1Req) {
	v.value = val
	v.isSet = true
}

func (v NullableGetBrokerInfoV1Req) IsSet() bool {
	return v.isSet
}

func (v *NullableGetBrokerInfoV1Req) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetBrokerInfoV1Req(val *GetBrokerInfoV1Req) *NullableGetBrokerInfoV1Req {
	return &NullableGetBrokerInfoV1Req{value: val, isSet: true}
}

func (v NullableGetBrokerInfoV1Req) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetBrokerInfoV1Req) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Binance Spot API

OpenAPI specification for Binance cryptocurrency exchange - Spot API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spot

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SpotCreateOrderCancelReplaceV3DataCancelResponse - struct for SpotCreateOrderCancelReplaceV3DataCancelResponse
type SpotCreateOrderCancelReplaceV3DataCancelResponse struct {
	APIError *APIError
	SpotCreateOrderCancelReplaceV3CancelResp *SpotCreateOrderCancelReplaceV3CancelResp
}

// APIErrorAsSpotCreateOrderCancelReplaceV3DataCancelResponse is a convenience function that returns APIError wrapped in SpotCreateOrderCancelReplaceV3DataCancelResponse
func APIErrorAsSpotCreateOrderCancelReplaceV3DataCancelResponse(v *APIError) SpotCreateOrderCancelReplaceV3DataCancelResponse {
	return SpotCreateOrderCancelReplaceV3DataCancelResponse{
		APIError: v,
	}
}

// SpotCreateOrderCancelReplaceV3CancelRespAsSpotCreateOrderCancelReplaceV3DataCancelResponse is a convenience function that returns SpotCreateOrderCancelReplaceV3CancelResp wrapped in SpotCreateOrderCancelReplaceV3DataCancelResponse
func SpotCreateOrderCancelReplaceV3CancelRespAsSpotCreateOrderCancelReplaceV3DataCancelResponse(v *SpotCreateOrderCancelReplaceV3CancelResp) SpotCreateOrderCancelReplaceV3DataCancelResponse {
	return SpotCreateOrderCancelReplaceV3DataCancelResponse{
		SpotCreateOrderCancelReplaceV3CancelResp: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SpotCreateOrderCancelReplaceV3DataCancelResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into APIError
	err = newStrictDecoder(data).Decode(&dst.APIError)
	if err == nil {
		jsonAPIError, _ := json.Marshal(dst.APIError)
		if string(jsonAPIError) == "{}" { // empty struct
			dst.APIError = nil
		} else {
			if err = validator.Validate(dst.APIError); err != nil {
				dst.APIError = nil
			} else {
				match++
			}
		}
	} else {
		dst.APIError = nil
	}

	// try to unmarshal data into SpotCreateOrderCancelReplaceV3CancelResp
	err = newStrictDecoder(data).Decode(&dst.SpotCreateOrderCancelReplaceV3CancelResp)
	if err == nil {
		jsonSpotCreateOrderCancelReplaceV3CancelResp, _ := json.Marshal(dst.SpotCreateOrderCancelReplaceV3CancelResp)
		if string(jsonSpotCreateOrderCancelReplaceV3CancelResp) == "{}" { // empty struct
			dst.SpotCreateOrderCancelReplaceV3CancelResp = nil
		} else {
			if err = validator.Validate(dst.SpotCreateOrderCancelReplaceV3CancelResp); err != nil {
				dst.SpotCreateOrderCancelReplaceV3CancelResp = nil
			} else {
				match++
			}
		}
	} else {
		dst.SpotCreateOrderCancelReplaceV3CancelResp = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.APIError = nil
		dst.SpotCreateOrderCancelReplaceV3CancelResp = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SpotCreateOrderCancelReplaceV3DataCancelResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SpotCreateOrderCancelReplaceV3DataCancelResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SpotCreateOrderCancelReplaceV3DataCancelResponse) MarshalJSON() ([]byte, error) {
	if src.APIError != nil {
		return json.Marshal(&src.APIError)
	}

	if src.SpotCreateOrderCancelReplaceV3CancelResp != nil {
		return json.Marshal(&src.SpotCreateOrderCancelReplaceV3CancelResp)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SpotCreateOrderCancelReplaceV3DataCancelResponse) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.APIError != nil {
		return obj.APIError
	}

	if obj.SpotCreateOrderCancelReplaceV3CancelResp != nil {
		return obj.SpotCreateOrderCancelReplaceV3CancelResp
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SpotCreateOrderCancelReplaceV3DataCancelResponse) GetActualInstanceValue() (interface{}) {
	if obj.APIError != nil {
		return *obj.APIError
	}

	if obj.SpotCreateOrderCancelReplaceV3CancelResp != nil {
		return *obj.SpotCreateOrderCancelReplaceV3CancelResp
	}

	// all schemas are nil
	return nil
}

type NullableSpotCreateOrderCancelReplaceV3DataCancelResponse struct {
	value *SpotCreateOrderCancelReplaceV3DataCancelResponse
	isSet bool
}

func (v NullableSpotCreateOrderCancelReplaceV3DataCancelResponse) Get() *SpotCreateOrderCancelReplaceV3DataCancelResponse {
	return v.value
}

func (v *NullableSpotCreateOrderCancelReplaceV3DataCancelResponse) Set(val *SpotCreateOrderCancelReplaceV3DataCancelResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSpotCreateOrderCancelReplaceV3DataCancelResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSpotCreateOrderCancelReplaceV3DataCancelResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpotCreateOrderCancelReplaceV3DataCancelResponse(val *SpotCreateOrderCancelReplaceV3DataCancelResponse) *NullableSpotCreateOrderCancelReplaceV3DataCancelResponse {
	return &NullableSpotCreateOrderCancelReplaceV3DataCancelResponse{value: val, isSet: true}
}

func (v NullableSpotCreateOrderCancelReplaceV3DataCancelResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpotCreateOrderCancelReplaceV3DataCancelResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



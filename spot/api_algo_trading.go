/*
Binance Spot API

OpenAPI specification for Binance exchange - Spot API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spot

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// AlgoTradingAPIService AlgoTradingAPI service
type AlgoTradingAPIService service

type ApiCreateAlgoFuturesNewOrderTwapV1Request struct {
	ctx context.Context
	ApiService *AlgoTradingAPIService
	duration *int64
	quantity *string
	side *string
	symbol *string
	timestamp *int64
	clientAlgoId *string
	limitPrice *string
	positionSide *string
	recvWindow *int64
	reduceOnly *bool
}

func (r ApiCreateAlgoFuturesNewOrderTwapV1Request) Duration(duration int64) ApiCreateAlgoFuturesNewOrderTwapV1Request {
	r.duration = &duration
	return r
}

func (r ApiCreateAlgoFuturesNewOrderTwapV1Request) Quantity(quantity string) ApiCreateAlgoFuturesNewOrderTwapV1Request {
	r.quantity = &quantity
	return r
}

func (r ApiCreateAlgoFuturesNewOrderTwapV1Request) Side(side string) ApiCreateAlgoFuturesNewOrderTwapV1Request {
	r.side = &side
	return r
}

func (r ApiCreateAlgoFuturesNewOrderTwapV1Request) Symbol(symbol string) ApiCreateAlgoFuturesNewOrderTwapV1Request {
	r.symbol = &symbol
	return r
}

func (r ApiCreateAlgoFuturesNewOrderTwapV1Request) Timestamp(timestamp int64) ApiCreateAlgoFuturesNewOrderTwapV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiCreateAlgoFuturesNewOrderTwapV1Request) ClientAlgoId(clientAlgoId string) ApiCreateAlgoFuturesNewOrderTwapV1Request {
	r.clientAlgoId = &clientAlgoId
	return r
}

func (r ApiCreateAlgoFuturesNewOrderTwapV1Request) LimitPrice(limitPrice string) ApiCreateAlgoFuturesNewOrderTwapV1Request {
	r.limitPrice = &limitPrice
	return r
}

func (r ApiCreateAlgoFuturesNewOrderTwapV1Request) PositionSide(positionSide string) ApiCreateAlgoFuturesNewOrderTwapV1Request {
	r.positionSide = &positionSide
	return r
}

func (r ApiCreateAlgoFuturesNewOrderTwapV1Request) RecvWindow(recvWindow int64) ApiCreateAlgoFuturesNewOrderTwapV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiCreateAlgoFuturesNewOrderTwapV1Request) ReduceOnly(reduceOnly bool) ApiCreateAlgoFuturesNewOrderTwapV1Request {
	r.reduceOnly = &reduceOnly
	return r
}

func (r ApiCreateAlgoFuturesNewOrderTwapV1Request) Execute() (*CreateAlgoFuturesNewOrderTwapV1Resp, *http.Response, error) {
	return r.ApiService.CreateAlgoFuturesNewOrderTwapV1Execute(r)
}

/*
CreateAlgoFuturesNewOrderTwapV1 Time-Weighted Average Price(Twap) New Order(TRADE)

Send in a Twap new order.
Only support on USDâ“ˆ-M Contracts.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateAlgoFuturesNewOrderTwapV1Request
*/
func (a *AlgoTradingAPIService) CreateAlgoFuturesNewOrderTwapV1(ctx context.Context) ApiCreateAlgoFuturesNewOrderTwapV1Request {
	return ApiCreateAlgoFuturesNewOrderTwapV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateAlgoFuturesNewOrderTwapV1Resp
func (a *AlgoTradingAPIService) CreateAlgoFuturesNewOrderTwapV1Execute(r ApiCreateAlgoFuturesNewOrderTwapV1Request) (*CreateAlgoFuturesNewOrderTwapV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateAlgoFuturesNewOrderTwapV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlgoTradingAPIService.CreateAlgoFuturesNewOrderTwapV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/algo/futures/newOrderTwap"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.duration == nil {
		return localVarReturnValue, nil, reportError("duration is required and must be specified")
	}
	if r.quantity == nil {
		return localVarReturnValue, nil, reportError("quantity is required and must be specified")
	}
	if r.side == nil {
		return localVarReturnValue, nil, reportError("side is required and must be specified")
	}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientAlgoId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "clientAlgoId", r.clientAlgoId, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "duration", r.duration, "", "")
	if r.limitPrice != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "limitPrice", r.limitPrice, "", "")
	}
	if r.positionSide != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "positionSide", r.positionSide, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "quantity", r.quantity, "", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	if r.reduceOnly != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "reduceOnly", r.reduceOnly, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "side", r.side, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "symbol", r.symbol, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateAlgoFuturesNewOrderVpV1Request struct {
	ctx context.Context
	ApiService *AlgoTradingAPIService
	quantity *string
	side *string
	symbol *string
	timestamp *int64
	urgency *string
	clientAlgoId *string
	limitPrice *string
	positionSide *string
	recvWindow *int64
	reduceOnly *bool
}

func (r ApiCreateAlgoFuturesNewOrderVpV1Request) Quantity(quantity string) ApiCreateAlgoFuturesNewOrderVpV1Request {
	r.quantity = &quantity
	return r
}

func (r ApiCreateAlgoFuturesNewOrderVpV1Request) Side(side string) ApiCreateAlgoFuturesNewOrderVpV1Request {
	r.side = &side
	return r
}

func (r ApiCreateAlgoFuturesNewOrderVpV1Request) Symbol(symbol string) ApiCreateAlgoFuturesNewOrderVpV1Request {
	r.symbol = &symbol
	return r
}

func (r ApiCreateAlgoFuturesNewOrderVpV1Request) Timestamp(timestamp int64) ApiCreateAlgoFuturesNewOrderVpV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiCreateAlgoFuturesNewOrderVpV1Request) Urgency(urgency string) ApiCreateAlgoFuturesNewOrderVpV1Request {
	r.urgency = &urgency
	return r
}

func (r ApiCreateAlgoFuturesNewOrderVpV1Request) ClientAlgoId(clientAlgoId string) ApiCreateAlgoFuturesNewOrderVpV1Request {
	r.clientAlgoId = &clientAlgoId
	return r
}

func (r ApiCreateAlgoFuturesNewOrderVpV1Request) LimitPrice(limitPrice string) ApiCreateAlgoFuturesNewOrderVpV1Request {
	r.limitPrice = &limitPrice
	return r
}

func (r ApiCreateAlgoFuturesNewOrderVpV1Request) PositionSide(positionSide string) ApiCreateAlgoFuturesNewOrderVpV1Request {
	r.positionSide = &positionSide
	return r
}

func (r ApiCreateAlgoFuturesNewOrderVpV1Request) RecvWindow(recvWindow int64) ApiCreateAlgoFuturesNewOrderVpV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiCreateAlgoFuturesNewOrderVpV1Request) ReduceOnly(reduceOnly bool) ApiCreateAlgoFuturesNewOrderVpV1Request {
	r.reduceOnly = &reduceOnly
	return r
}

func (r ApiCreateAlgoFuturesNewOrderVpV1Request) Execute() (*CreateAlgoFuturesNewOrderVpV1Resp, *http.Response, error) {
	return r.ApiService.CreateAlgoFuturesNewOrderVpV1Execute(r)
}

/*
CreateAlgoFuturesNewOrderVpV1 Volume Participation(VP) New Order (TRADE)

Send in a VP new order.
Only support on USDâ“ˆ-M Contracts.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateAlgoFuturesNewOrderVpV1Request
*/
func (a *AlgoTradingAPIService) CreateAlgoFuturesNewOrderVpV1(ctx context.Context) ApiCreateAlgoFuturesNewOrderVpV1Request {
	return ApiCreateAlgoFuturesNewOrderVpV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateAlgoFuturesNewOrderVpV1Resp
func (a *AlgoTradingAPIService) CreateAlgoFuturesNewOrderVpV1Execute(r ApiCreateAlgoFuturesNewOrderVpV1Request) (*CreateAlgoFuturesNewOrderVpV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateAlgoFuturesNewOrderVpV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlgoTradingAPIService.CreateAlgoFuturesNewOrderVpV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/algo/futures/newOrderVp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.quantity == nil {
		return localVarReturnValue, nil, reportError("quantity is required and must be specified")
	}
	if r.side == nil {
		return localVarReturnValue, nil, reportError("side is required and must be specified")
	}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}
	if r.urgency == nil {
		return localVarReturnValue, nil, reportError("urgency is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientAlgoId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "clientAlgoId", r.clientAlgoId, "", "")
	}
	if r.limitPrice != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "limitPrice", r.limitPrice, "", "")
	}
	if r.positionSide != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "positionSide", r.positionSide, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "quantity", r.quantity, "", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	if r.reduceOnly != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "reduceOnly", r.reduceOnly, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "side", r.side, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "symbol", r.symbol, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "urgency", r.urgency, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateAlgoSpotNewOrderTwapV1Request struct {
	ctx context.Context
	ApiService *AlgoTradingAPIService
	duration *int64
	quantity *string
	side *string
	symbol *string
	timestamp *int64
	clientAlgoId *string
	limitPrice *string
}

func (r ApiCreateAlgoSpotNewOrderTwapV1Request) Duration(duration int64) ApiCreateAlgoSpotNewOrderTwapV1Request {
	r.duration = &duration
	return r
}

func (r ApiCreateAlgoSpotNewOrderTwapV1Request) Quantity(quantity string) ApiCreateAlgoSpotNewOrderTwapV1Request {
	r.quantity = &quantity
	return r
}

func (r ApiCreateAlgoSpotNewOrderTwapV1Request) Side(side string) ApiCreateAlgoSpotNewOrderTwapV1Request {
	r.side = &side
	return r
}

func (r ApiCreateAlgoSpotNewOrderTwapV1Request) Symbol(symbol string) ApiCreateAlgoSpotNewOrderTwapV1Request {
	r.symbol = &symbol
	return r
}

func (r ApiCreateAlgoSpotNewOrderTwapV1Request) Timestamp(timestamp int64) ApiCreateAlgoSpotNewOrderTwapV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiCreateAlgoSpotNewOrderTwapV1Request) ClientAlgoId(clientAlgoId string) ApiCreateAlgoSpotNewOrderTwapV1Request {
	r.clientAlgoId = &clientAlgoId
	return r
}

func (r ApiCreateAlgoSpotNewOrderTwapV1Request) LimitPrice(limitPrice string) ApiCreateAlgoSpotNewOrderTwapV1Request {
	r.limitPrice = &limitPrice
	return r
}

func (r ApiCreateAlgoSpotNewOrderTwapV1Request) Execute() (*CreateAlgoSpotNewOrderTwapV1Resp, *http.Response, error) {
	return r.ApiService.CreateAlgoSpotNewOrderTwapV1Execute(r)
}

/*
CreateAlgoSpotNewOrderTwapV1 Time-Weighted Average Price(Twap) New Order(TRADE)

Place a new spot TWAP order with Algo service.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateAlgoSpotNewOrderTwapV1Request
*/
func (a *AlgoTradingAPIService) CreateAlgoSpotNewOrderTwapV1(ctx context.Context) ApiCreateAlgoSpotNewOrderTwapV1Request {
	return ApiCreateAlgoSpotNewOrderTwapV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateAlgoSpotNewOrderTwapV1Resp
func (a *AlgoTradingAPIService) CreateAlgoSpotNewOrderTwapV1Execute(r ApiCreateAlgoSpotNewOrderTwapV1Request) (*CreateAlgoSpotNewOrderTwapV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateAlgoSpotNewOrderTwapV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlgoTradingAPIService.CreateAlgoSpotNewOrderTwapV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/algo/spot/newOrderTwap"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.duration == nil {
		return localVarReturnValue, nil, reportError("duration is required and must be specified")
	}
	if r.quantity == nil {
		return localVarReturnValue, nil, reportError("quantity is required and must be specified")
	}
	if r.side == nil {
		return localVarReturnValue, nil, reportError("side is required and must be specified")
	}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientAlgoId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "clientAlgoId", r.clientAlgoId, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "duration", r.duration, "", "")
	if r.limitPrice != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "limitPrice", r.limitPrice, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "quantity", r.quantity, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "side", r.side, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "symbol", r.symbol, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAlgoFuturesOrderV1Request struct {
	ctx context.Context
	ApiService *AlgoTradingAPIService
	algoId *int64
	timestamp *int64
	recvWindow *int64
}

// eg. 14511
func (r ApiDeleteAlgoFuturesOrderV1Request) AlgoId(algoId int64) ApiDeleteAlgoFuturesOrderV1Request {
	r.algoId = &algoId
	return r
}

func (r ApiDeleteAlgoFuturesOrderV1Request) Timestamp(timestamp int64) ApiDeleteAlgoFuturesOrderV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiDeleteAlgoFuturesOrderV1Request) RecvWindow(recvWindow int64) ApiDeleteAlgoFuturesOrderV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiDeleteAlgoFuturesOrderV1Request) Execute() (*DeleteAlgoFuturesOrderV1Resp, *http.Response, error) {
	return r.ApiService.DeleteAlgoFuturesOrderV1Execute(r)
}

/*
DeleteAlgoFuturesOrderV1 Cancel Algo Order(TRADE)

Cancel an active order.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteAlgoFuturesOrderV1Request
*/
func (a *AlgoTradingAPIService) DeleteAlgoFuturesOrderV1(ctx context.Context) ApiDeleteAlgoFuturesOrderV1Request {
	return ApiDeleteAlgoFuturesOrderV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeleteAlgoFuturesOrderV1Resp
func (a *AlgoTradingAPIService) DeleteAlgoFuturesOrderV1Execute(r ApiDeleteAlgoFuturesOrderV1Request) (*DeleteAlgoFuturesOrderV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteAlgoFuturesOrderV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlgoTradingAPIService.DeleteAlgoFuturesOrderV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/algo/futures/order"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.algoId == nil {
		return localVarReturnValue, nil, reportError("algoId is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "algoId", r.algoId, "form", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAlgoSpotOrderV1Request struct {
	ctx context.Context
	ApiService *AlgoTradingAPIService
	algoId *int64
	timestamp *int64
	recvWindow *int64
}

// eg. 14511
func (r ApiDeleteAlgoSpotOrderV1Request) AlgoId(algoId int64) ApiDeleteAlgoSpotOrderV1Request {
	r.algoId = &algoId
	return r
}

func (r ApiDeleteAlgoSpotOrderV1Request) Timestamp(timestamp int64) ApiDeleteAlgoSpotOrderV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiDeleteAlgoSpotOrderV1Request) RecvWindow(recvWindow int64) ApiDeleteAlgoSpotOrderV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiDeleteAlgoSpotOrderV1Request) Execute() (*DeleteAlgoSpotOrderV1Resp, *http.Response, error) {
	return r.ApiService.DeleteAlgoSpotOrderV1Execute(r)
}

/*
DeleteAlgoSpotOrderV1 Cancel Algo Order(TRADE)

Cancel an open TWAP order

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteAlgoSpotOrderV1Request
*/
func (a *AlgoTradingAPIService) DeleteAlgoSpotOrderV1(ctx context.Context) ApiDeleteAlgoSpotOrderV1Request {
	return ApiDeleteAlgoSpotOrderV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeleteAlgoSpotOrderV1Resp
func (a *AlgoTradingAPIService) DeleteAlgoSpotOrderV1Execute(r ApiDeleteAlgoSpotOrderV1Request) (*DeleteAlgoSpotOrderV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteAlgoSpotOrderV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlgoTradingAPIService.DeleteAlgoSpotOrderV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/algo/spot/order"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.algoId == nil {
		return localVarReturnValue, nil, reportError("algoId is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "algoId", r.algoId, "form", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAlgoFuturesHistoricalOrdersV1Request struct {
	ctx context.Context
	ApiService *AlgoTradingAPIService
	timestamp *int64
	symbol *string
	side *string
	startTime *int64
	endTime *int64
	page *int32
	pageSize *int32
	recvWindow *int64
}

func (r ApiGetAlgoFuturesHistoricalOrdersV1Request) Timestamp(timestamp int64) ApiGetAlgoFuturesHistoricalOrdersV1Request {
	r.timestamp = &timestamp
	return r
}

// Trading symbol eg. BTCUSDT
func (r ApiGetAlgoFuturesHistoricalOrdersV1Request) Symbol(symbol string) ApiGetAlgoFuturesHistoricalOrdersV1Request {
	r.symbol = &symbol
	return r
}

// BUY or SELL
func (r ApiGetAlgoFuturesHistoricalOrdersV1Request) Side(side string) ApiGetAlgoFuturesHistoricalOrdersV1Request {
	r.side = &side
	return r
}

// in milliseconds  eg.1641522717552
func (r ApiGetAlgoFuturesHistoricalOrdersV1Request) StartTime(startTime int64) ApiGetAlgoFuturesHistoricalOrdersV1Request {
	r.startTime = &startTime
	return r
}

// in milliseconds  eg.1641522526562
func (r ApiGetAlgoFuturesHistoricalOrdersV1Request) EndTime(endTime int64) ApiGetAlgoFuturesHistoricalOrdersV1Request {
	r.endTime = &endTime
	return r
}

// Default is 1
func (r ApiGetAlgoFuturesHistoricalOrdersV1Request) Page(page int32) ApiGetAlgoFuturesHistoricalOrdersV1Request {
	r.page = &page
	return r
}

// MIN 1, MAX 100; Default 100
func (r ApiGetAlgoFuturesHistoricalOrdersV1Request) PageSize(pageSize int32) ApiGetAlgoFuturesHistoricalOrdersV1Request {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetAlgoFuturesHistoricalOrdersV1Request) RecvWindow(recvWindow int64) ApiGetAlgoFuturesHistoricalOrdersV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetAlgoFuturesHistoricalOrdersV1Request) Execute() (*GetAlgoFuturesHistoricalOrdersV1Resp, *http.Response, error) {
	return r.ApiService.GetAlgoFuturesHistoricalOrdersV1Execute(r)
}

/*
GetAlgoFuturesHistoricalOrdersV1 Query Historical Algo Orders(USER_DATA)

Query Historical Algo Order

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAlgoFuturesHistoricalOrdersV1Request
*/
func (a *AlgoTradingAPIService) GetAlgoFuturesHistoricalOrdersV1(ctx context.Context) ApiGetAlgoFuturesHistoricalOrdersV1Request {
	return ApiGetAlgoFuturesHistoricalOrdersV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetAlgoFuturesHistoricalOrdersV1Resp
func (a *AlgoTradingAPIService) GetAlgoFuturesHistoricalOrdersV1Execute(r ApiGetAlgoFuturesHistoricalOrdersV1Request) (*GetAlgoFuturesHistoricalOrdersV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAlgoFuturesHistoricalOrdersV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlgoTradingAPIService.GetAlgoFuturesHistoricalOrdersV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/algo/futures/historicalOrders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.symbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "symbol", r.symbol, "form", "")
	} else {
		var defaultValue string = ""
		r.symbol = &defaultValue
	}
	if r.side != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "side", r.side, "form", "")
	} else {
		var defaultValue string = ""
		r.side = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAlgoFuturesOpenOrdersV1Request struct {
	ctx context.Context
	ApiService *AlgoTradingAPIService
	timestamp *int64
	recvWindow *int64
}

func (r ApiGetAlgoFuturesOpenOrdersV1Request) Timestamp(timestamp int64) ApiGetAlgoFuturesOpenOrdersV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetAlgoFuturesOpenOrdersV1Request) RecvWindow(recvWindow int64) ApiGetAlgoFuturesOpenOrdersV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetAlgoFuturesOpenOrdersV1Request) Execute() (*GetAlgoFuturesOpenOrdersV1Resp, *http.Response, error) {
	return r.ApiService.GetAlgoFuturesOpenOrdersV1Execute(r)
}

/*
GetAlgoFuturesOpenOrdersV1 Query Current Algo Open Orders(USER_DATA)

Query Current Algo Open Orders

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAlgoFuturesOpenOrdersV1Request
*/
func (a *AlgoTradingAPIService) GetAlgoFuturesOpenOrdersV1(ctx context.Context) ApiGetAlgoFuturesOpenOrdersV1Request {
	return ApiGetAlgoFuturesOpenOrdersV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetAlgoFuturesOpenOrdersV1Resp
func (a *AlgoTradingAPIService) GetAlgoFuturesOpenOrdersV1Execute(r ApiGetAlgoFuturesOpenOrdersV1Request) (*GetAlgoFuturesOpenOrdersV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAlgoFuturesOpenOrdersV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlgoTradingAPIService.GetAlgoFuturesOpenOrdersV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/algo/futures/openOrders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAlgoFuturesSubOrdersV1Request struct {
	ctx context.Context
	ApiService *AlgoTradingAPIService
	algoId *int64
	timestamp *int64
	page *int32
	pageSize *int32
	recvWindow *int64
}

func (r ApiGetAlgoFuturesSubOrdersV1Request) AlgoId(algoId int64) ApiGetAlgoFuturesSubOrdersV1Request {
	r.algoId = &algoId
	return r
}

func (r ApiGetAlgoFuturesSubOrdersV1Request) Timestamp(timestamp int64) ApiGetAlgoFuturesSubOrdersV1Request {
	r.timestamp = &timestamp
	return r
}

// Default is 1
func (r ApiGetAlgoFuturesSubOrdersV1Request) Page(page int32) ApiGetAlgoFuturesSubOrdersV1Request {
	r.page = &page
	return r
}

// MIN 1, MAX 100; Default 100
func (r ApiGetAlgoFuturesSubOrdersV1Request) PageSize(pageSize int32) ApiGetAlgoFuturesSubOrdersV1Request {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetAlgoFuturesSubOrdersV1Request) RecvWindow(recvWindow int64) ApiGetAlgoFuturesSubOrdersV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetAlgoFuturesSubOrdersV1Request) Execute() (*GetAlgoFuturesSubOrdersV1Resp, *http.Response, error) {
	return r.ApiService.GetAlgoFuturesSubOrdersV1Execute(r)
}

/*
GetAlgoFuturesSubOrdersV1 Query Sub Orders(USER_DATA)

Get respective sub orders for a specified algoId

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAlgoFuturesSubOrdersV1Request
*/
func (a *AlgoTradingAPIService) GetAlgoFuturesSubOrdersV1(ctx context.Context) ApiGetAlgoFuturesSubOrdersV1Request {
	return ApiGetAlgoFuturesSubOrdersV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetAlgoFuturesSubOrdersV1Resp
func (a *AlgoTradingAPIService) GetAlgoFuturesSubOrdersV1Execute(r ApiGetAlgoFuturesSubOrdersV1Request) (*GetAlgoFuturesSubOrdersV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAlgoFuturesSubOrdersV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlgoTradingAPIService.GetAlgoFuturesSubOrdersV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/algo/futures/subOrders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.algoId == nil {
		return localVarReturnValue, nil, reportError("algoId is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "algoId", r.algoId, "form", "")
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAlgoSpotHistoricalOrdersV1Request struct {
	ctx context.Context
	ApiService *AlgoTradingAPIService
	timestamp *int64
	symbol *string
	side *string
	startTime *int64
	endTime *int64
	page *int32
	pageSize *int32
	recvWindow *int64
}

func (r ApiGetAlgoSpotHistoricalOrdersV1Request) Timestamp(timestamp int64) ApiGetAlgoSpotHistoricalOrdersV1Request {
	r.timestamp = &timestamp
	return r
}

// Trading symbol eg. BTCUSDT
func (r ApiGetAlgoSpotHistoricalOrdersV1Request) Symbol(symbol string) ApiGetAlgoSpotHistoricalOrdersV1Request {
	r.symbol = &symbol
	return r
}

// BUY or SELL
func (r ApiGetAlgoSpotHistoricalOrdersV1Request) Side(side string) ApiGetAlgoSpotHistoricalOrdersV1Request {
	r.side = &side
	return r
}

// in milliseconds  eg.1641522717552
func (r ApiGetAlgoSpotHistoricalOrdersV1Request) StartTime(startTime int64) ApiGetAlgoSpotHistoricalOrdersV1Request {
	r.startTime = &startTime
	return r
}

// in milliseconds  eg.1641522526562
func (r ApiGetAlgoSpotHistoricalOrdersV1Request) EndTime(endTime int64) ApiGetAlgoSpotHistoricalOrdersV1Request {
	r.endTime = &endTime
	return r
}

// Default is 1
func (r ApiGetAlgoSpotHistoricalOrdersV1Request) Page(page int32) ApiGetAlgoSpotHistoricalOrdersV1Request {
	r.page = &page
	return r
}

// MIN 1, MAX 100; Default 100
func (r ApiGetAlgoSpotHistoricalOrdersV1Request) PageSize(pageSize int32) ApiGetAlgoSpotHistoricalOrdersV1Request {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetAlgoSpotHistoricalOrdersV1Request) RecvWindow(recvWindow int64) ApiGetAlgoSpotHistoricalOrdersV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetAlgoSpotHistoricalOrdersV1Request) Execute() (*GetAlgoSpotHistoricalOrdersV1Resp, *http.Response, error) {
	return r.ApiService.GetAlgoSpotHistoricalOrdersV1Execute(r)
}

/*
GetAlgoSpotHistoricalOrdersV1 Query Historical Algo Orders(USER_DATA)

Get all historical SPOT TWAP orders

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAlgoSpotHistoricalOrdersV1Request
*/
func (a *AlgoTradingAPIService) GetAlgoSpotHistoricalOrdersV1(ctx context.Context) ApiGetAlgoSpotHistoricalOrdersV1Request {
	return ApiGetAlgoSpotHistoricalOrdersV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetAlgoSpotHistoricalOrdersV1Resp
func (a *AlgoTradingAPIService) GetAlgoSpotHistoricalOrdersV1Execute(r ApiGetAlgoSpotHistoricalOrdersV1Request) (*GetAlgoSpotHistoricalOrdersV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAlgoSpotHistoricalOrdersV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlgoTradingAPIService.GetAlgoSpotHistoricalOrdersV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/algo/spot/historicalOrders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.symbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "symbol", r.symbol, "form", "")
	} else {
		var defaultValue string = ""
		r.symbol = &defaultValue
	}
	if r.side != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "side", r.side, "form", "")
	} else {
		var defaultValue string = ""
		r.side = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAlgoSpotOpenOrdersV1Request struct {
	ctx context.Context
	ApiService *AlgoTradingAPIService
	timestamp *int64
	recvWindow *int64
}

func (r ApiGetAlgoSpotOpenOrdersV1Request) Timestamp(timestamp int64) ApiGetAlgoSpotOpenOrdersV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetAlgoSpotOpenOrdersV1Request) RecvWindow(recvWindow int64) ApiGetAlgoSpotOpenOrdersV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetAlgoSpotOpenOrdersV1Request) Execute() (*GetAlgoSpotOpenOrdersV1Resp, *http.Response, error) {
	return r.ApiService.GetAlgoSpotOpenOrdersV1Execute(r)
}

/*
GetAlgoSpotOpenOrdersV1 Query Current Algo Open Orders(USER_DATA)

Get all open SPOT TWAP orders

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAlgoSpotOpenOrdersV1Request
*/
func (a *AlgoTradingAPIService) GetAlgoSpotOpenOrdersV1(ctx context.Context) ApiGetAlgoSpotOpenOrdersV1Request {
	return ApiGetAlgoSpotOpenOrdersV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetAlgoSpotOpenOrdersV1Resp
func (a *AlgoTradingAPIService) GetAlgoSpotOpenOrdersV1Execute(r ApiGetAlgoSpotOpenOrdersV1Request) (*GetAlgoSpotOpenOrdersV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAlgoSpotOpenOrdersV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlgoTradingAPIService.GetAlgoSpotOpenOrdersV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/algo/spot/openOrders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAlgoSpotSubOrdersV1Request struct {
	ctx context.Context
	ApiService *AlgoTradingAPIService
	algoId *int64
	timestamp *int64
	page *int32
	pageSize *int32
	recvWindow *int64
}

func (r ApiGetAlgoSpotSubOrdersV1Request) AlgoId(algoId int64) ApiGetAlgoSpotSubOrdersV1Request {
	r.algoId = &algoId
	return r
}

func (r ApiGetAlgoSpotSubOrdersV1Request) Timestamp(timestamp int64) ApiGetAlgoSpotSubOrdersV1Request {
	r.timestamp = &timestamp
	return r
}

// Default is 1
func (r ApiGetAlgoSpotSubOrdersV1Request) Page(page int32) ApiGetAlgoSpotSubOrdersV1Request {
	r.page = &page
	return r
}

// MIN 1, MAX 100; Default 100
func (r ApiGetAlgoSpotSubOrdersV1Request) PageSize(pageSize int32) ApiGetAlgoSpotSubOrdersV1Request {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetAlgoSpotSubOrdersV1Request) RecvWindow(recvWindow int64) ApiGetAlgoSpotSubOrdersV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetAlgoSpotSubOrdersV1Request) Execute() (*GetAlgoSpotSubOrdersV1Resp, *http.Response, error) {
	return r.ApiService.GetAlgoSpotSubOrdersV1Execute(r)
}

/*
GetAlgoSpotSubOrdersV1 Query Sub Orders(USER_DATA)

Get respective sub orders for a specified algoId

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAlgoSpotSubOrdersV1Request
*/
func (a *AlgoTradingAPIService) GetAlgoSpotSubOrdersV1(ctx context.Context) ApiGetAlgoSpotSubOrdersV1Request {
	return ApiGetAlgoSpotSubOrdersV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetAlgoSpotSubOrdersV1Resp
func (a *AlgoTradingAPIService) GetAlgoSpotSubOrdersV1Execute(r ApiGetAlgoSpotSubOrdersV1Request) (*GetAlgoSpotSubOrdersV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAlgoSpotSubOrdersV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlgoTradingAPIService.GetAlgoSpotSubOrdersV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/algo/spot/subOrders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.algoId == nil {
		return localVarReturnValue, nil, reportError("algoId is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "algoId", r.algoId, "form", "")
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
Binance Spot API

OpenAPI specification for Binance exchange - Spot API

API version: 0.2.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spot

import (
	"encoding/json"
)

// checks if the CreateBrokerSubAccountV1Resp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateBrokerSubAccountV1Resp{}

// CreateBrokerSubAccountV1Resp struct for CreateBrokerSubAccountV1Resp
type CreateBrokerSubAccountV1Resp struct {
	Email *string `json:"email,omitempty"`
	SubaccountId *string `json:"subaccountId,omitempty"`
	Tag *string `json:"tag,omitempty"`
}

// NewCreateBrokerSubAccountV1Resp instantiates a new CreateBrokerSubAccountV1Resp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateBrokerSubAccountV1Resp() *CreateBrokerSubAccountV1Resp {
	this := CreateBrokerSubAccountV1Resp{}
	return &this
}

// NewCreateBrokerSubAccountV1RespWithDefaults instantiates a new CreateBrokerSubAccountV1Resp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateBrokerSubAccountV1RespWithDefaults() *CreateBrokerSubAccountV1Resp {
	this := CreateBrokerSubAccountV1Resp{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *CreateBrokerSubAccountV1Resp) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrokerSubAccountV1Resp) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *CreateBrokerSubAccountV1Resp) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *CreateBrokerSubAccountV1Resp) SetEmail(v string) {
	o.Email = &v
}

// GetSubaccountId returns the SubaccountId field value if set, zero value otherwise.
func (o *CreateBrokerSubAccountV1Resp) GetSubaccountId() string {
	if o == nil || IsNil(o.SubaccountId) {
		var ret string
		return ret
	}
	return *o.SubaccountId
}

// GetSubaccountIdOk returns a tuple with the SubaccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrokerSubAccountV1Resp) GetSubaccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubaccountId) {
		return nil, false
	}
	return o.SubaccountId, true
}

// HasSubaccountId returns a boolean if a field has been set.
func (o *CreateBrokerSubAccountV1Resp) HasSubaccountId() bool {
	if o != nil && !IsNil(o.SubaccountId) {
		return true
	}

	return false
}

// SetSubaccountId gets a reference to the given string and assigns it to the SubaccountId field.
func (o *CreateBrokerSubAccountV1Resp) SetSubaccountId(v string) {
	o.SubaccountId = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *CreateBrokerSubAccountV1Resp) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrokerSubAccountV1Resp) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *CreateBrokerSubAccountV1Resp) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *CreateBrokerSubAccountV1Resp) SetTag(v string) {
	o.Tag = &v
}

func (o CreateBrokerSubAccountV1Resp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateBrokerSubAccountV1Resp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.SubaccountId) {
		toSerialize["subaccountId"] = o.SubaccountId
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	return toSerialize, nil
}

type NullableCreateBrokerSubAccountV1Resp struct {
	value *CreateBrokerSubAccountV1Resp
	isSet bool
}

func (v NullableCreateBrokerSubAccountV1Resp) Get() *CreateBrokerSubAccountV1Resp {
	return v.value
}

func (v *NullableCreateBrokerSubAccountV1Resp) Set(val *CreateBrokerSubAccountV1Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateBrokerSubAccountV1Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateBrokerSubAccountV1Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateBrokerSubAccountV1Resp(val *CreateBrokerSubAccountV1Resp) *NullableCreateBrokerSubAccountV1Resp {
	return &NullableCreateBrokerSubAccountV1Resp{value: val, isSet: true}
}

func (v NullableCreateBrokerSubAccountV1Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateBrokerSubAccountV1Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Binance Spot API

OpenAPI specification for Binance exchange - Spot API

API version: 0.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spot

import (
	"encoding/json"
)

// checks if the CreateBrokerSubAccountFuturesV1Resp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateBrokerSubAccountFuturesV1Resp{}

// CreateBrokerSubAccountFuturesV1Resp struct for CreateBrokerSubAccountFuturesV1Resp
type CreateBrokerSubAccountFuturesV1Resp struct {
	EnableFutures *bool `json:"enableFutures,omitempty"`
	SubaccountId *string `json:"subaccountId,omitempty"`
	UpdateTime *int64 `json:"updateTime,omitempty"`
}

// NewCreateBrokerSubAccountFuturesV1Resp instantiates a new CreateBrokerSubAccountFuturesV1Resp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateBrokerSubAccountFuturesV1Resp() *CreateBrokerSubAccountFuturesV1Resp {
	this := CreateBrokerSubAccountFuturesV1Resp{}
	return &this
}

// NewCreateBrokerSubAccountFuturesV1RespWithDefaults instantiates a new CreateBrokerSubAccountFuturesV1Resp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateBrokerSubAccountFuturesV1RespWithDefaults() *CreateBrokerSubAccountFuturesV1Resp {
	this := CreateBrokerSubAccountFuturesV1Resp{}
	return &this
}

// GetEnableFutures returns the EnableFutures field value if set, zero value otherwise.
func (o *CreateBrokerSubAccountFuturesV1Resp) GetEnableFutures() bool {
	if o == nil || IsNil(o.EnableFutures) {
		var ret bool
		return ret
	}
	return *o.EnableFutures
}

// GetEnableFuturesOk returns a tuple with the EnableFutures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrokerSubAccountFuturesV1Resp) GetEnableFuturesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableFutures) {
		return nil, false
	}
	return o.EnableFutures, true
}

// HasEnableFutures returns a boolean if a field has been set.
func (o *CreateBrokerSubAccountFuturesV1Resp) HasEnableFutures() bool {
	if o != nil && !IsNil(o.EnableFutures) {
		return true
	}

	return false
}

// SetEnableFutures gets a reference to the given bool and assigns it to the EnableFutures field.
func (o *CreateBrokerSubAccountFuturesV1Resp) SetEnableFutures(v bool) {
	o.EnableFutures = &v
}

// GetSubaccountId returns the SubaccountId field value if set, zero value otherwise.
func (o *CreateBrokerSubAccountFuturesV1Resp) GetSubaccountId() string {
	if o == nil || IsNil(o.SubaccountId) {
		var ret string
		return ret
	}
	return *o.SubaccountId
}

// GetSubaccountIdOk returns a tuple with the SubaccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrokerSubAccountFuturesV1Resp) GetSubaccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubaccountId) {
		return nil, false
	}
	return o.SubaccountId, true
}

// HasSubaccountId returns a boolean if a field has been set.
func (o *CreateBrokerSubAccountFuturesV1Resp) HasSubaccountId() bool {
	if o != nil && !IsNil(o.SubaccountId) {
		return true
	}

	return false
}

// SetSubaccountId gets a reference to the given string and assigns it to the SubaccountId field.
func (o *CreateBrokerSubAccountFuturesV1Resp) SetSubaccountId(v string) {
	o.SubaccountId = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *CreateBrokerSubAccountFuturesV1Resp) GetUpdateTime() int64 {
	if o == nil || IsNil(o.UpdateTime) {
		var ret int64
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrokerSubAccountFuturesV1Resp) GetUpdateTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *CreateBrokerSubAccountFuturesV1Resp) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given int64 and assigns it to the UpdateTime field.
func (o *CreateBrokerSubAccountFuturesV1Resp) SetUpdateTime(v int64) {
	o.UpdateTime = &v
}

func (o CreateBrokerSubAccountFuturesV1Resp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateBrokerSubAccountFuturesV1Resp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnableFutures) {
		toSerialize["enableFutures"] = o.EnableFutures
	}
	if !IsNil(o.SubaccountId) {
		toSerialize["subaccountId"] = o.SubaccountId
	}
	if !IsNil(o.UpdateTime) {
		toSerialize["updateTime"] = o.UpdateTime
	}
	return toSerialize, nil
}

type NullableCreateBrokerSubAccountFuturesV1Resp struct {
	value *CreateBrokerSubAccountFuturesV1Resp
	isSet bool
}

func (v NullableCreateBrokerSubAccountFuturesV1Resp) Get() *CreateBrokerSubAccountFuturesV1Resp {
	return v.value
}

func (v *NullableCreateBrokerSubAccountFuturesV1Resp) Set(val *CreateBrokerSubAccountFuturesV1Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateBrokerSubAccountFuturesV1Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateBrokerSubAccountFuturesV1Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateBrokerSubAccountFuturesV1Resp(val *CreateBrokerSubAccountFuturesV1Resp) *NullableCreateBrokerSubAccountFuturesV1Resp {
	return &NullableCreateBrokerSubAccountFuturesV1Resp{value: val, isSet: true}
}

func (v NullableCreateBrokerSubAccountFuturesV1Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateBrokerSubAccountFuturesV1Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



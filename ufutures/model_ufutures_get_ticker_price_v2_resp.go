/*
Binance Ufutures API

OpenAPI specification for Binance cryptocurrency exchange - Ufutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ufutures

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UfuturesGetTickerPriceV2Resp - struct for UfuturesGetTickerPriceV2Resp
type UfuturesGetTickerPriceV2Resp struct {
	UfuturesGetTickerPriceV2RespItem *UfuturesGetTickerPriceV2RespItem
	ArrayOfUfuturesGetTickerPriceV2RespItem *[]UfuturesGetTickerPriceV2RespItem
}

// UfuturesGetTickerPriceV2RespItemAsUfuturesGetTickerPriceV2Resp is a convenience function that returns UfuturesGetTickerPriceV2RespItem wrapped in UfuturesGetTickerPriceV2Resp
func UfuturesGetTickerPriceV2RespItemAsUfuturesGetTickerPriceV2Resp(v *UfuturesGetTickerPriceV2RespItem) UfuturesGetTickerPriceV2Resp {
	return UfuturesGetTickerPriceV2Resp{
		UfuturesGetTickerPriceV2RespItem: v,
	}
}

// []UfuturesGetTickerPriceV2RespItemAsUfuturesGetTickerPriceV2Resp is a convenience function that returns []UfuturesGetTickerPriceV2RespItem wrapped in UfuturesGetTickerPriceV2Resp
func ArrayOfUfuturesGetTickerPriceV2RespItemAsUfuturesGetTickerPriceV2Resp(v *[]UfuturesGetTickerPriceV2RespItem) UfuturesGetTickerPriceV2Resp {
	return UfuturesGetTickerPriceV2Resp{
		ArrayOfUfuturesGetTickerPriceV2RespItem: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UfuturesGetTickerPriceV2Resp) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UfuturesGetTickerPriceV2RespItem
	err = newStrictDecoder(data).Decode(&dst.UfuturesGetTickerPriceV2RespItem)
	if err == nil {
		jsonUfuturesGetTickerPriceV2RespItem, _ := json.Marshal(dst.UfuturesGetTickerPriceV2RespItem)
		if string(jsonUfuturesGetTickerPriceV2RespItem) == "{}" { // empty struct
			dst.UfuturesGetTickerPriceV2RespItem = nil
		} else {
			if err = validator.Validate(dst.UfuturesGetTickerPriceV2RespItem); err != nil {
				dst.UfuturesGetTickerPriceV2RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.UfuturesGetTickerPriceV2RespItem = nil
	}

	// try to unmarshal data into ArrayOfUfuturesGetTickerPriceV2RespItem
	err = newStrictDecoder(data).Decode(&dst.ArrayOfUfuturesGetTickerPriceV2RespItem)
	if err == nil {
		jsonArrayOfUfuturesGetTickerPriceV2RespItem, _ := json.Marshal(dst.ArrayOfUfuturesGetTickerPriceV2RespItem)
		if string(jsonArrayOfUfuturesGetTickerPriceV2RespItem) == "{}" { // empty struct
			dst.ArrayOfUfuturesGetTickerPriceV2RespItem = nil
		} else {
			if err = validator.Validate(dst.ArrayOfUfuturesGetTickerPriceV2RespItem); err != nil {
				dst.ArrayOfUfuturesGetTickerPriceV2RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfUfuturesGetTickerPriceV2RespItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UfuturesGetTickerPriceV2RespItem = nil
		dst.ArrayOfUfuturesGetTickerPriceV2RespItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UfuturesGetTickerPriceV2Resp)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UfuturesGetTickerPriceV2Resp)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UfuturesGetTickerPriceV2Resp) MarshalJSON() ([]byte, error) {
	if src.UfuturesGetTickerPriceV2RespItem != nil {
		return json.Marshal(&src.UfuturesGetTickerPriceV2RespItem)
	}

	if src.ArrayOfUfuturesGetTickerPriceV2RespItem != nil {
		return json.Marshal(&src.ArrayOfUfuturesGetTickerPriceV2RespItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UfuturesGetTickerPriceV2Resp) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.UfuturesGetTickerPriceV2RespItem != nil {
		return obj.UfuturesGetTickerPriceV2RespItem
	}

	if obj.ArrayOfUfuturesGetTickerPriceV2RespItem != nil {
		return obj.ArrayOfUfuturesGetTickerPriceV2RespItem
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UfuturesGetTickerPriceV2Resp) GetActualInstanceValue() (interface{}) {
	if obj.UfuturesGetTickerPriceV2RespItem != nil {
		return *obj.UfuturesGetTickerPriceV2RespItem
	}

	if obj.ArrayOfUfuturesGetTickerPriceV2RespItem != nil {
		return *obj.ArrayOfUfuturesGetTickerPriceV2RespItem
	}

	// all schemas are nil
	return nil
}

type NullableUfuturesGetTickerPriceV2Resp struct {
	value *UfuturesGetTickerPriceV2Resp
	isSet bool
}

func (v NullableUfuturesGetTickerPriceV2Resp) Get() *UfuturesGetTickerPriceV2Resp {
	return v.value
}

func (v *NullableUfuturesGetTickerPriceV2Resp) Set(val *UfuturesGetTickerPriceV2Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableUfuturesGetTickerPriceV2Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableUfuturesGetTickerPriceV2Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUfuturesGetTickerPriceV2Resp(val *UfuturesGetTickerPriceV2Resp) *NullableUfuturesGetTickerPriceV2Resp {
	return &NullableUfuturesGetTickerPriceV2Resp{value: val, isSet: true}
}

func (v NullableUfuturesGetTickerPriceV2Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUfuturesGetTickerPriceV2Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



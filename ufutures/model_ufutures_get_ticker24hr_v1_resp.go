/*
Binance Ufutures API

OpenAPI specification for Binance cryptocurrency exchange - Ufutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ufutures

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UfuturesGetTicker24hrV1Resp - struct for UfuturesGetTicker24hrV1Resp
type UfuturesGetTicker24hrV1Resp struct {
	UfuturesGetTicker24hrV1RespItem *UfuturesGetTicker24hrV1RespItem
	ArrayOfUfuturesGetTicker24hrV1RespItem *[]UfuturesGetTicker24hrV1RespItem
}

// UfuturesGetTicker24hrV1RespItemAsUfuturesGetTicker24hrV1Resp is a convenience function that returns UfuturesGetTicker24hrV1RespItem wrapped in UfuturesGetTicker24hrV1Resp
func UfuturesGetTicker24hrV1RespItemAsUfuturesGetTicker24hrV1Resp(v *UfuturesGetTicker24hrV1RespItem) UfuturesGetTicker24hrV1Resp {
	return UfuturesGetTicker24hrV1Resp{
		UfuturesGetTicker24hrV1RespItem: v,
	}
}

// []UfuturesGetTicker24hrV1RespItemAsUfuturesGetTicker24hrV1Resp is a convenience function that returns []UfuturesGetTicker24hrV1RespItem wrapped in UfuturesGetTicker24hrV1Resp
func ArrayOfUfuturesGetTicker24hrV1RespItemAsUfuturesGetTicker24hrV1Resp(v *[]UfuturesGetTicker24hrV1RespItem) UfuturesGetTicker24hrV1Resp {
	return UfuturesGetTicker24hrV1Resp{
		ArrayOfUfuturesGetTicker24hrV1RespItem: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UfuturesGetTicker24hrV1Resp) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UfuturesGetTicker24hrV1RespItem
	err = newStrictDecoder(data).Decode(&dst.UfuturesGetTicker24hrV1RespItem)
	if err == nil {
		jsonUfuturesGetTicker24hrV1RespItem, _ := json.Marshal(dst.UfuturesGetTicker24hrV1RespItem)
		if string(jsonUfuturesGetTicker24hrV1RespItem) == "{}" { // empty struct
			dst.UfuturesGetTicker24hrV1RespItem = nil
		} else {
			if err = validator.Validate(dst.UfuturesGetTicker24hrV1RespItem); err != nil {
				dst.UfuturesGetTicker24hrV1RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.UfuturesGetTicker24hrV1RespItem = nil
	}

	// try to unmarshal data into ArrayOfUfuturesGetTicker24hrV1RespItem
	err = newStrictDecoder(data).Decode(&dst.ArrayOfUfuturesGetTicker24hrV1RespItem)
	if err == nil {
		jsonArrayOfUfuturesGetTicker24hrV1RespItem, _ := json.Marshal(dst.ArrayOfUfuturesGetTicker24hrV1RespItem)
		if string(jsonArrayOfUfuturesGetTicker24hrV1RespItem) == "{}" { // empty struct
			dst.ArrayOfUfuturesGetTicker24hrV1RespItem = nil
		} else {
			if err = validator.Validate(dst.ArrayOfUfuturesGetTicker24hrV1RespItem); err != nil {
				dst.ArrayOfUfuturesGetTicker24hrV1RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfUfuturesGetTicker24hrV1RespItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UfuturesGetTicker24hrV1RespItem = nil
		dst.ArrayOfUfuturesGetTicker24hrV1RespItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UfuturesGetTicker24hrV1Resp)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UfuturesGetTicker24hrV1Resp)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UfuturesGetTicker24hrV1Resp) MarshalJSON() ([]byte, error) {
	if src.UfuturesGetTicker24hrV1RespItem != nil {
		return json.Marshal(&src.UfuturesGetTicker24hrV1RespItem)
	}

	if src.ArrayOfUfuturesGetTicker24hrV1RespItem != nil {
		return json.Marshal(&src.ArrayOfUfuturesGetTicker24hrV1RespItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UfuturesGetTicker24hrV1Resp) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.UfuturesGetTicker24hrV1RespItem != nil {
		return obj.UfuturesGetTicker24hrV1RespItem
	}

	if obj.ArrayOfUfuturesGetTicker24hrV1RespItem != nil {
		return obj.ArrayOfUfuturesGetTicker24hrV1RespItem
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UfuturesGetTicker24hrV1Resp) GetActualInstanceValue() (interface{}) {
	if obj.UfuturesGetTicker24hrV1RespItem != nil {
		return *obj.UfuturesGetTicker24hrV1RespItem
	}

	if obj.ArrayOfUfuturesGetTicker24hrV1RespItem != nil {
		return *obj.ArrayOfUfuturesGetTicker24hrV1RespItem
	}

	// all schemas are nil
	return nil
}

type NullableUfuturesGetTicker24hrV1Resp struct {
	value *UfuturesGetTicker24hrV1Resp
	isSet bool
}

func (v NullableUfuturesGetTicker24hrV1Resp) Get() *UfuturesGetTicker24hrV1Resp {
	return v.value
}

func (v *NullableUfuturesGetTicker24hrV1Resp) Set(val *UfuturesGetTicker24hrV1Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableUfuturesGetTicker24hrV1Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableUfuturesGetTicker24hrV1Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUfuturesGetTicker24hrV1Resp(val *UfuturesGetTicker24hrV1Resp) *NullableUfuturesGetTicker24hrV1Resp {
	return &NullableUfuturesGetTicker24hrV1Resp{value: val, isSet: true}
}

func (v NullableUfuturesGetTicker24hrV1Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUfuturesGetTicker24hrV1Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



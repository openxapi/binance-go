/*
Binance Ufutures API

OpenAPI specification for Binance cryptocurrency exchange - Ufutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ufutures

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UfuturesGetTickerBookTickerV1Resp - struct for UfuturesGetTickerBookTickerV1Resp
type UfuturesGetTickerBookTickerV1Resp struct {
	UfuturesGetTickerBookTickerV1RespItem *UfuturesGetTickerBookTickerV1RespItem
	ArrayOfUfuturesGetTickerBookTickerV1RespItem *[]UfuturesGetTickerBookTickerV1RespItem
}

// UfuturesGetTickerBookTickerV1RespItemAsUfuturesGetTickerBookTickerV1Resp is a convenience function that returns UfuturesGetTickerBookTickerV1RespItem wrapped in UfuturesGetTickerBookTickerV1Resp
func UfuturesGetTickerBookTickerV1RespItemAsUfuturesGetTickerBookTickerV1Resp(v *UfuturesGetTickerBookTickerV1RespItem) UfuturesGetTickerBookTickerV1Resp {
	return UfuturesGetTickerBookTickerV1Resp{
		UfuturesGetTickerBookTickerV1RespItem: v,
	}
}

// []UfuturesGetTickerBookTickerV1RespItemAsUfuturesGetTickerBookTickerV1Resp is a convenience function that returns []UfuturesGetTickerBookTickerV1RespItem wrapped in UfuturesGetTickerBookTickerV1Resp
func ArrayOfUfuturesGetTickerBookTickerV1RespItemAsUfuturesGetTickerBookTickerV1Resp(v *[]UfuturesGetTickerBookTickerV1RespItem) UfuturesGetTickerBookTickerV1Resp {
	return UfuturesGetTickerBookTickerV1Resp{
		ArrayOfUfuturesGetTickerBookTickerV1RespItem: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UfuturesGetTickerBookTickerV1Resp) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UfuturesGetTickerBookTickerV1RespItem
	err = newStrictDecoder(data).Decode(&dst.UfuturesGetTickerBookTickerV1RespItem)
	if err == nil {
		jsonUfuturesGetTickerBookTickerV1RespItem, _ := json.Marshal(dst.UfuturesGetTickerBookTickerV1RespItem)
		if string(jsonUfuturesGetTickerBookTickerV1RespItem) == "{}" { // empty struct
			dst.UfuturesGetTickerBookTickerV1RespItem = nil
		} else {
			if err = validator.Validate(dst.UfuturesGetTickerBookTickerV1RespItem); err != nil {
				dst.UfuturesGetTickerBookTickerV1RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.UfuturesGetTickerBookTickerV1RespItem = nil
	}

	// try to unmarshal data into ArrayOfUfuturesGetTickerBookTickerV1RespItem
	err = newStrictDecoder(data).Decode(&dst.ArrayOfUfuturesGetTickerBookTickerV1RespItem)
	if err == nil {
		jsonArrayOfUfuturesGetTickerBookTickerV1RespItem, _ := json.Marshal(dst.ArrayOfUfuturesGetTickerBookTickerV1RespItem)
		if string(jsonArrayOfUfuturesGetTickerBookTickerV1RespItem) == "{}" { // empty struct
			dst.ArrayOfUfuturesGetTickerBookTickerV1RespItem = nil
		} else {
			if err = validator.Validate(dst.ArrayOfUfuturesGetTickerBookTickerV1RespItem); err != nil {
				dst.ArrayOfUfuturesGetTickerBookTickerV1RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfUfuturesGetTickerBookTickerV1RespItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UfuturesGetTickerBookTickerV1RespItem = nil
		dst.ArrayOfUfuturesGetTickerBookTickerV1RespItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UfuturesGetTickerBookTickerV1Resp)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UfuturesGetTickerBookTickerV1Resp)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UfuturesGetTickerBookTickerV1Resp) MarshalJSON() ([]byte, error) {
	if src.UfuturesGetTickerBookTickerV1RespItem != nil {
		return json.Marshal(&src.UfuturesGetTickerBookTickerV1RespItem)
	}

	if src.ArrayOfUfuturesGetTickerBookTickerV1RespItem != nil {
		return json.Marshal(&src.ArrayOfUfuturesGetTickerBookTickerV1RespItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UfuturesGetTickerBookTickerV1Resp) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.UfuturesGetTickerBookTickerV1RespItem != nil {
		return obj.UfuturesGetTickerBookTickerV1RespItem
	}

	if obj.ArrayOfUfuturesGetTickerBookTickerV1RespItem != nil {
		return obj.ArrayOfUfuturesGetTickerBookTickerV1RespItem
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UfuturesGetTickerBookTickerV1Resp) GetActualInstanceValue() (interface{}) {
	if obj.UfuturesGetTickerBookTickerV1RespItem != nil {
		return *obj.UfuturesGetTickerBookTickerV1RespItem
	}

	if obj.ArrayOfUfuturesGetTickerBookTickerV1RespItem != nil {
		return *obj.ArrayOfUfuturesGetTickerBookTickerV1RespItem
	}

	// all schemas are nil
	return nil
}

type NullableUfuturesGetTickerBookTickerV1Resp struct {
	value *UfuturesGetTickerBookTickerV1Resp
	isSet bool
}

func (v NullableUfuturesGetTickerBookTickerV1Resp) Get() *UfuturesGetTickerBookTickerV1Resp {
	return v.value
}

func (v *NullableUfuturesGetTickerBookTickerV1Resp) Set(val *UfuturesGetTickerBookTickerV1Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableUfuturesGetTickerBookTickerV1Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableUfuturesGetTickerBookTickerV1Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUfuturesGetTickerBookTickerV1Resp(val *UfuturesGetTickerBookTickerV1Resp) *NullableUfuturesGetTickerBookTickerV1Resp {
	return &NullableUfuturesGetTickerBookTickerV1Resp{value: val, isSet: true}
}

func (v NullableUfuturesGetTickerBookTickerV1Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUfuturesGetTickerBookTickerV1Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



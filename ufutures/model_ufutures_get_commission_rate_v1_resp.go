/*
Binance Ufutures API

OpenAPI specification for Binance cryptocurrency exchange - Ufutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ufutures

import (
	"encoding/json"
)

// checks if the UfuturesGetCommissionRateV1Resp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UfuturesGetCommissionRateV1Resp{}

// UfuturesGetCommissionRateV1Resp struct for UfuturesGetCommissionRateV1Resp
type UfuturesGetCommissionRateV1Resp struct {
	MakerCommissionRate *string `json:"makerCommissionRate,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	TakerCommissionRate *string `json:"takerCommissionRate,omitempty"`
}

// NewUfuturesGetCommissionRateV1Resp instantiates a new UfuturesGetCommissionRateV1Resp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUfuturesGetCommissionRateV1Resp() *UfuturesGetCommissionRateV1Resp {
	this := UfuturesGetCommissionRateV1Resp{}
	return &this
}

// NewUfuturesGetCommissionRateV1RespWithDefaults instantiates a new UfuturesGetCommissionRateV1Resp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUfuturesGetCommissionRateV1RespWithDefaults() *UfuturesGetCommissionRateV1Resp {
	this := UfuturesGetCommissionRateV1Resp{}
	return &this
}

// GetMakerCommissionRate returns the MakerCommissionRate field value if set, zero value otherwise.
func (o *UfuturesGetCommissionRateV1Resp) GetMakerCommissionRate() string {
	if o == nil || IsNil(o.MakerCommissionRate) {
		var ret string
		return ret
	}
	return *o.MakerCommissionRate
}

// GetMakerCommissionRateOk returns a tuple with the MakerCommissionRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UfuturesGetCommissionRateV1Resp) GetMakerCommissionRateOk() (*string, bool) {
	if o == nil || IsNil(o.MakerCommissionRate) {
		return nil, false
	}
	return o.MakerCommissionRate, true
}

// HasMakerCommissionRate returns a boolean if a field has been set.
func (o *UfuturesGetCommissionRateV1Resp) HasMakerCommissionRate() bool {
	if o != nil && !IsNil(o.MakerCommissionRate) {
		return true
	}

	return false
}

// SetMakerCommissionRate gets a reference to the given string and assigns it to the MakerCommissionRate field.
func (o *UfuturesGetCommissionRateV1Resp) SetMakerCommissionRate(v string) {
	o.MakerCommissionRate = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *UfuturesGetCommissionRateV1Resp) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UfuturesGetCommissionRateV1Resp) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *UfuturesGetCommissionRateV1Resp) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *UfuturesGetCommissionRateV1Resp) SetSymbol(v string) {
	o.Symbol = &v
}

// GetTakerCommissionRate returns the TakerCommissionRate field value if set, zero value otherwise.
func (o *UfuturesGetCommissionRateV1Resp) GetTakerCommissionRate() string {
	if o == nil || IsNil(o.TakerCommissionRate) {
		var ret string
		return ret
	}
	return *o.TakerCommissionRate
}

// GetTakerCommissionRateOk returns a tuple with the TakerCommissionRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UfuturesGetCommissionRateV1Resp) GetTakerCommissionRateOk() (*string, bool) {
	if o == nil || IsNil(o.TakerCommissionRate) {
		return nil, false
	}
	return o.TakerCommissionRate, true
}

// HasTakerCommissionRate returns a boolean if a field has been set.
func (o *UfuturesGetCommissionRateV1Resp) HasTakerCommissionRate() bool {
	if o != nil && !IsNil(o.TakerCommissionRate) {
		return true
	}

	return false
}

// SetTakerCommissionRate gets a reference to the given string and assigns it to the TakerCommissionRate field.
func (o *UfuturesGetCommissionRateV1Resp) SetTakerCommissionRate(v string) {
	o.TakerCommissionRate = &v
}

func (o UfuturesGetCommissionRateV1Resp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UfuturesGetCommissionRateV1Resp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MakerCommissionRate) {
		toSerialize["makerCommissionRate"] = o.MakerCommissionRate
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.TakerCommissionRate) {
		toSerialize["takerCommissionRate"] = o.TakerCommissionRate
	}
	return toSerialize, nil
}

type NullableUfuturesGetCommissionRateV1Resp struct {
	value *UfuturesGetCommissionRateV1Resp
	isSet bool
}

func (v NullableUfuturesGetCommissionRateV1Resp) Get() *UfuturesGetCommissionRateV1Resp {
	return v.value
}

func (v *NullableUfuturesGetCommissionRateV1Resp) Set(val *UfuturesGetCommissionRateV1Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableUfuturesGetCommissionRateV1Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableUfuturesGetCommissionRateV1Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUfuturesGetCommissionRateV1Resp(val *UfuturesGetCommissionRateV1Resp) *NullableUfuturesGetCommissionRateV1Resp {
	return &NullableUfuturesGetCommissionRateV1Resp{value: val, isSet: true}
}

func (v NullableUfuturesGetCommissionRateV1Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUfuturesGetCommissionRateV1Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



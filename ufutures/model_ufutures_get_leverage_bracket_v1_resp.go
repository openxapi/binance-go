/*
Binance Ufutures API

OpenAPI specification for Binance cryptocurrency exchange - Ufutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ufutures

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UfuturesGetLeverageBracketV1Resp - struct for UfuturesGetLeverageBracketV1Resp
type UfuturesGetLeverageBracketV1Resp struct {
	UfuturesGetLeverageBracketV1RespItem *UfuturesGetLeverageBracketV1RespItem
	ArrayOfUfuturesGetLeverageBracketV1RespItem *[]UfuturesGetLeverageBracketV1RespItem
}

// UfuturesGetLeverageBracketV1RespItemAsUfuturesGetLeverageBracketV1Resp is a convenience function that returns UfuturesGetLeverageBracketV1RespItem wrapped in UfuturesGetLeverageBracketV1Resp
func UfuturesGetLeverageBracketV1RespItemAsUfuturesGetLeverageBracketV1Resp(v *UfuturesGetLeverageBracketV1RespItem) UfuturesGetLeverageBracketV1Resp {
	return UfuturesGetLeverageBracketV1Resp{
		UfuturesGetLeverageBracketV1RespItem: v,
	}
}

// []UfuturesGetLeverageBracketV1RespItemAsUfuturesGetLeverageBracketV1Resp is a convenience function that returns []UfuturesGetLeverageBracketV1RespItem wrapped in UfuturesGetLeverageBracketV1Resp
func ArrayOfUfuturesGetLeverageBracketV1RespItemAsUfuturesGetLeverageBracketV1Resp(v *[]UfuturesGetLeverageBracketV1RespItem) UfuturesGetLeverageBracketV1Resp {
	return UfuturesGetLeverageBracketV1Resp{
		ArrayOfUfuturesGetLeverageBracketV1RespItem: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UfuturesGetLeverageBracketV1Resp) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UfuturesGetLeverageBracketV1RespItem
	err = newStrictDecoder(data).Decode(&dst.UfuturesGetLeverageBracketV1RespItem)
	if err == nil {
		jsonUfuturesGetLeverageBracketV1RespItem, _ := json.Marshal(dst.UfuturesGetLeverageBracketV1RespItem)
		if string(jsonUfuturesGetLeverageBracketV1RespItem) == "{}" { // empty struct
			dst.UfuturesGetLeverageBracketV1RespItem = nil
		} else {
			if err = validator.Validate(dst.UfuturesGetLeverageBracketV1RespItem); err != nil {
				dst.UfuturesGetLeverageBracketV1RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.UfuturesGetLeverageBracketV1RespItem = nil
	}

	// try to unmarshal data into ArrayOfUfuturesGetLeverageBracketV1RespItem
	err = newStrictDecoder(data).Decode(&dst.ArrayOfUfuturesGetLeverageBracketV1RespItem)
	if err == nil {
		jsonArrayOfUfuturesGetLeverageBracketV1RespItem, _ := json.Marshal(dst.ArrayOfUfuturesGetLeverageBracketV1RespItem)
		if string(jsonArrayOfUfuturesGetLeverageBracketV1RespItem) == "{}" { // empty struct
			dst.ArrayOfUfuturesGetLeverageBracketV1RespItem = nil
		} else {
			if err = validator.Validate(dst.ArrayOfUfuturesGetLeverageBracketV1RespItem); err != nil {
				dst.ArrayOfUfuturesGetLeverageBracketV1RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfUfuturesGetLeverageBracketV1RespItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UfuturesGetLeverageBracketV1RespItem = nil
		dst.ArrayOfUfuturesGetLeverageBracketV1RespItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UfuturesGetLeverageBracketV1Resp)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UfuturesGetLeverageBracketV1Resp)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UfuturesGetLeverageBracketV1Resp) MarshalJSON() ([]byte, error) {
	if src.UfuturesGetLeverageBracketV1RespItem != nil {
		return json.Marshal(&src.UfuturesGetLeverageBracketV1RespItem)
	}

	if src.ArrayOfUfuturesGetLeverageBracketV1RespItem != nil {
		return json.Marshal(&src.ArrayOfUfuturesGetLeverageBracketV1RespItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UfuturesGetLeverageBracketV1Resp) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.UfuturesGetLeverageBracketV1RespItem != nil {
		return obj.UfuturesGetLeverageBracketV1RespItem
	}

	if obj.ArrayOfUfuturesGetLeverageBracketV1RespItem != nil {
		return obj.ArrayOfUfuturesGetLeverageBracketV1RespItem
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UfuturesGetLeverageBracketV1Resp) GetActualInstanceValue() (interface{}) {
	if obj.UfuturesGetLeverageBracketV1RespItem != nil {
		return *obj.UfuturesGetLeverageBracketV1RespItem
	}

	if obj.ArrayOfUfuturesGetLeverageBracketV1RespItem != nil {
		return *obj.ArrayOfUfuturesGetLeverageBracketV1RespItem
	}

	// all schemas are nil
	return nil
}

type NullableUfuturesGetLeverageBracketV1Resp struct {
	value *UfuturesGetLeverageBracketV1Resp
	isSet bool
}

func (v NullableUfuturesGetLeverageBracketV1Resp) Get() *UfuturesGetLeverageBracketV1Resp {
	return v.value
}

func (v *NullableUfuturesGetLeverageBracketV1Resp) Set(val *UfuturesGetLeverageBracketV1Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableUfuturesGetLeverageBracketV1Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableUfuturesGetLeverageBracketV1Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUfuturesGetLeverageBracketV1Resp(val *UfuturesGetLeverageBracketV1Resp) *NullableUfuturesGetLeverageBracketV1Resp {
	return &NullableUfuturesGetLeverageBracketV1Resp{value: val, isSet: true}
}

func (v NullableUfuturesGetLeverageBracketV1Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUfuturesGetLeverageBracketV1Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Binance Ufutures API

OpenAPI specification for Binance cryptocurrency exchange - Ufutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ufutures

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UfuturesCreateCountdownCancelAllV1Req type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UfuturesCreateCountdownCancelAllV1Req{}

// UfuturesCreateCountdownCancelAllV1Req struct for UfuturesCreateCountdownCancelAllV1Req
type UfuturesCreateCountdownCancelAllV1Req struct {
	CountdownTime int64 `json:"countdownTime"`
	RecvWindow *int64 `json:"recvWindow,omitempty"`
	Symbol string `json:"symbol"`
	Timestamp int64 `json:"timestamp"`
}

type _UfuturesCreateCountdownCancelAllV1Req UfuturesCreateCountdownCancelAllV1Req

// NewUfuturesCreateCountdownCancelAllV1Req instantiates a new UfuturesCreateCountdownCancelAllV1Req object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUfuturesCreateCountdownCancelAllV1Req(countdownTime int64, symbol string, timestamp int64) *UfuturesCreateCountdownCancelAllV1Req {
	this := UfuturesCreateCountdownCancelAllV1Req{}
	this.CountdownTime = countdownTime
	this.Symbol = symbol
	this.Timestamp = timestamp
	return &this
}

// NewUfuturesCreateCountdownCancelAllV1ReqWithDefaults instantiates a new UfuturesCreateCountdownCancelAllV1Req object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUfuturesCreateCountdownCancelAllV1ReqWithDefaults() *UfuturesCreateCountdownCancelAllV1Req {
	this := UfuturesCreateCountdownCancelAllV1Req{}
	var symbol string = ""
	this.Symbol = symbol
	return &this
}

// GetCountdownTime returns the CountdownTime field value
func (o *UfuturesCreateCountdownCancelAllV1Req) GetCountdownTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CountdownTime
}

// GetCountdownTimeOk returns a tuple with the CountdownTime field value
// and a boolean to check if the value has been set.
func (o *UfuturesCreateCountdownCancelAllV1Req) GetCountdownTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountdownTime, true
}

// SetCountdownTime sets field value
func (o *UfuturesCreateCountdownCancelAllV1Req) SetCountdownTime(v int64) {
	o.CountdownTime = v
}

// GetRecvWindow returns the RecvWindow field value if set, zero value otherwise.
func (o *UfuturesCreateCountdownCancelAllV1Req) GetRecvWindow() int64 {
	if o == nil || IsNil(o.RecvWindow) {
		var ret int64
		return ret
	}
	return *o.RecvWindow
}

// GetRecvWindowOk returns a tuple with the RecvWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UfuturesCreateCountdownCancelAllV1Req) GetRecvWindowOk() (*int64, bool) {
	if o == nil || IsNil(o.RecvWindow) {
		return nil, false
	}
	return o.RecvWindow, true
}

// HasRecvWindow returns a boolean if a field has been set.
func (o *UfuturesCreateCountdownCancelAllV1Req) HasRecvWindow() bool {
	if o != nil && !IsNil(o.RecvWindow) {
		return true
	}

	return false
}

// SetRecvWindow gets a reference to the given int64 and assigns it to the RecvWindow field.
func (o *UfuturesCreateCountdownCancelAllV1Req) SetRecvWindow(v int64) {
	o.RecvWindow = &v
}

// GetSymbol returns the Symbol field value
func (o *UfuturesCreateCountdownCancelAllV1Req) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *UfuturesCreateCountdownCancelAllV1Req) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *UfuturesCreateCountdownCancelAllV1Req) SetSymbol(v string) {
	o.Symbol = v
}

// GetTimestamp returns the Timestamp field value
func (o *UfuturesCreateCountdownCancelAllV1Req) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *UfuturesCreateCountdownCancelAllV1Req) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *UfuturesCreateCountdownCancelAllV1Req) SetTimestamp(v int64) {
	o.Timestamp = v
}

func (o UfuturesCreateCountdownCancelAllV1Req) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UfuturesCreateCountdownCancelAllV1Req) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["countdownTime"] = o.CountdownTime
	if !IsNil(o.RecvWindow) {
		toSerialize["recvWindow"] = o.RecvWindow
	}
	toSerialize["symbol"] = o.Symbol
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

func (o *UfuturesCreateCountdownCancelAllV1Req) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"countdownTime",
		"symbol",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUfuturesCreateCountdownCancelAllV1Req := _UfuturesCreateCountdownCancelAllV1Req{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUfuturesCreateCountdownCancelAllV1Req)

	if err != nil {
		return err
	}

	*o = UfuturesCreateCountdownCancelAllV1Req(varUfuturesCreateCountdownCancelAllV1Req)

	return err
}

type NullableUfuturesCreateCountdownCancelAllV1Req struct {
	value *UfuturesCreateCountdownCancelAllV1Req
	isSet bool
}

func (v NullableUfuturesCreateCountdownCancelAllV1Req) Get() *UfuturesCreateCountdownCancelAllV1Req {
	return v.value
}

func (v *NullableUfuturesCreateCountdownCancelAllV1Req) Set(val *UfuturesCreateCountdownCancelAllV1Req) {
	v.value = val
	v.isSet = true
}

func (v NullableUfuturesCreateCountdownCancelAllV1Req) IsSet() bool {
	return v.isSet
}

func (v *NullableUfuturesCreateCountdownCancelAllV1Req) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUfuturesCreateCountdownCancelAllV1Req(val *UfuturesCreateCountdownCancelAllV1Req) *NullableUfuturesCreateCountdownCancelAllV1Req {
	return &NullableUfuturesCreateCountdownCancelAllV1Req{value: val, isSet: true}
}

func (v NullableUfuturesCreateCountdownCancelAllV1Req) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUfuturesCreateCountdownCancelAllV1Req) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



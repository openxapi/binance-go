/*
Binance Ufutures API

OpenAPI specification for Binance cryptocurrency exchange - Ufutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ufutures

import (
	"encoding/json"
)

// checks if the UfuturesGetLeverageBracketV1RespItemBracketsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UfuturesGetLeverageBracketV1RespItemBracketsInner{}

// UfuturesGetLeverageBracketV1RespItemBracketsInner struct for UfuturesGetLeverageBracketV1RespItemBracketsInner
type UfuturesGetLeverageBracketV1RespItemBracketsInner struct {
	Bracket *int32 `json:"bracket,omitempty"`
	Cum *int32 `json:"cum,omitempty"`
	InitialLeverage *int32 `json:"initialLeverage,omitempty"`
	MaintMarginRatio *float32 `json:"maintMarginRatio,omitempty"`
	NotionalCap *int32 `json:"notionalCap,omitempty"`
	NotionalFloor *int32 `json:"notionalFloor,omitempty"`
}

// NewUfuturesGetLeverageBracketV1RespItemBracketsInner instantiates a new UfuturesGetLeverageBracketV1RespItemBracketsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUfuturesGetLeverageBracketV1RespItemBracketsInner() *UfuturesGetLeverageBracketV1RespItemBracketsInner {
	this := UfuturesGetLeverageBracketV1RespItemBracketsInner{}
	return &this
}

// NewUfuturesGetLeverageBracketV1RespItemBracketsInnerWithDefaults instantiates a new UfuturesGetLeverageBracketV1RespItemBracketsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUfuturesGetLeverageBracketV1RespItemBracketsInnerWithDefaults() *UfuturesGetLeverageBracketV1RespItemBracketsInner {
	this := UfuturesGetLeverageBracketV1RespItemBracketsInner{}
	return &this
}

// GetBracket returns the Bracket field value if set, zero value otherwise.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) GetBracket() int32 {
	if o == nil || IsNil(o.Bracket) {
		var ret int32
		return ret
	}
	return *o.Bracket
}

// GetBracketOk returns a tuple with the Bracket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) GetBracketOk() (*int32, bool) {
	if o == nil || IsNil(o.Bracket) {
		return nil, false
	}
	return o.Bracket, true
}

// HasBracket returns a boolean if a field has been set.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) HasBracket() bool {
	if o != nil && !IsNil(o.Bracket) {
		return true
	}

	return false
}

// SetBracket gets a reference to the given int32 and assigns it to the Bracket field.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) SetBracket(v int32) {
	o.Bracket = &v
}

// GetCum returns the Cum field value if set, zero value otherwise.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) GetCum() int32 {
	if o == nil || IsNil(o.Cum) {
		var ret int32
		return ret
	}
	return *o.Cum
}

// GetCumOk returns a tuple with the Cum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) GetCumOk() (*int32, bool) {
	if o == nil || IsNil(o.Cum) {
		return nil, false
	}
	return o.Cum, true
}

// HasCum returns a boolean if a field has been set.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) HasCum() bool {
	if o != nil && !IsNil(o.Cum) {
		return true
	}

	return false
}

// SetCum gets a reference to the given int32 and assigns it to the Cum field.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) SetCum(v int32) {
	o.Cum = &v
}

// GetInitialLeverage returns the InitialLeverage field value if set, zero value otherwise.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) GetInitialLeverage() int32 {
	if o == nil || IsNil(o.InitialLeverage) {
		var ret int32
		return ret
	}
	return *o.InitialLeverage
}

// GetInitialLeverageOk returns a tuple with the InitialLeverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) GetInitialLeverageOk() (*int32, bool) {
	if o == nil || IsNil(o.InitialLeverage) {
		return nil, false
	}
	return o.InitialLeverage, true
}

// HasInitialLeverage returns a boolean if a field has been set.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) HasInitialLeverage() bool {
	if o != nil && !IsNil(o.InitialLeverage) {
		return true
	}

	return false
}

// SetInitialLeverage gets a reference to the given int32 and assigns it to the InitialLeverage field.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) SetInitialLeverage(v int32) {
	o.InitialLeverage = &v
}

// GetMaintMarginRatio returns the MaintMarginRatio field value if set, zero value otherwise.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) GetMaintMarginRatio() float32 {
	if o == nil || IsNil(o.MaintMarginRatio) {
		var ret float32
		return ret
	}
	return *o.MaintMarginRatio
}

// GetMaintMarginRatioOk returns a tuple with the MaintMarginRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) GetMaintMarginRatioOk() (*float32, bool) {
	if o == nil || IsNil(o.MaintMarginRatio) {
		return nil, false
	}
	return o.MaintMarginRatio, true
}

// HasMaintMarginRatio returns a boolean if a field has been set.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) HasMaintMarginRatio() bool {
	if o != nil && !IsNil(o.MaintMarginRatio) {
		return true
	}

	return false
}

// SetMaintMarginRatio gets a reference to the given float32 and assigns it to the MaintMarginRatio field.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) SetMaintMarginRatio(v float32) {
	o.MaintMarginRatio = &v
}

// GetNotionalCap returns the NotionalCap field value if set, zero value otherwise.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) GetNotionalCap() int32 {
	if o == nil || IsNil(o.NotionalCap) {
		var ret int32
		return ret
	}
	return *o.NotionalCap
}

// GetNotionalCapOk returns a tuple with the NotionalCap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) GetNotionalCapOk() (*int32, bool) {
	if o == nil || IsNil(o.NotionalCap) {
		return nil, false
	}
	return o.NotionalCap, true
}

// HasNotionalCap returns a boolean if a field has been set.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) HasNotionalCap() bool {
	if o != nil && !IsNil(o.NotionalCap) {
		return true
	}

	return false
}

// SetNotionalCap gets a reference to the given int32 and assigns it to the NotionalCap field.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) SetNotionalCap(v int32) {
	o.NotionalCap = &v
}

// GetNotionalFloor returns the NotionalFloor field value if set, zero value otherwise.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) GetNotionalFloor() int32 {
	if o == nil || IsNil(o.NotionalFloor) {
		var ret int32
		return ret
	}
	return *o.NotionalFloor
}

// GetNotionalFloorOk returns a tuple with the NotionalFloor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) GetNotionalFloorOk() (*int32, bool) {
	if o == nil || IsNil(o.NotionalFloor) {
		return nil, false
	}
	return o.NotionalFloor, true
}

// HasNotionalFloor returns a boolean if a field has been set.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) HasNotionalFloor() bool {
	if o != nil && !IsNil(o.NotionalFloor) {
		return true
	}

	return false
}

// SetNotionalFloor gets a reference to the given int32 and assigns it to the NotionalFloor field.
func (o *UfuturesGetLeverageBracketV1RespItemBracketsInner) SetNotionalFloor(v int32) {
	o.NotionalFloor = &v
}

func (o UfuturesGetLeverageBracketV1RespItemBracketsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UfuturesGetLeverageBracketV1RespItemBracketsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bracket) {
		toSerialize["bracket"] = o.Bracket
	}
	if !IsNil(o.Cum) {
		toSerialize["cum"] = o.Cum
	}
	if !IsNil(o.InitialLeverage) {
		toSerialize["initialLeverage"] = o.InitialLeverage
	}
	if !IsNil(o.MaintMarginRatio) {
		toSerialize["maintMarginRatio"] = o.MaintMarginRatio
	}
	if !IsNil(o.NotionalCap) {
		toSerialize["notionalCap"] = o.NotionalCap
	}
	if !IsNil(o.NotionalFloor) {
		toSerialize["notionalFloor"] = o.NotionalFloor
	}
	return toSerialize, nil
}

type NullableUfuturesGetLeverageBracketV1RespItemBracketsInner struct {
	value *UfuturesGetLeverageBracketV1RespItemBracketsInner
	isSet bool
}

func (v NullableUfuturesGetLeverageBracketV1RespItemBracketsInner) Get() *UfuturesGetLeverageBracketV1RespItemBracketsInner {
	return v.value
}

func (v *NullableUfuturesGetLeverageBracketV1RespItemBracketsInner) Set(val *UfuturesGetLeverageBracketV1RespItemBracketsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableUfuturesGetLeverageBracketV1RespItemBracketsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableUfuturesGetLeverageBracketV1RespItemBracketsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUfuturesGetLeverageBracketV1RespItemBracketsInner(val *UfuturesGetLeverageBracketV1RespItemBracketsInner) *NullableUfuturesGetLeverageBracketV1RespItemBracketsInner {
	return &NullableUfuturesGetLeverageBracketV1RespItemBracketsInner{value: val, isSet: true}
}

func (v NullableUfuturesGetLeverageBracketV1RespItemBracketsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUfuturesGetLeverageBracketV1RespItemBracketsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



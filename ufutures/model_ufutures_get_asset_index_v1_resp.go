/*
Binance Ufutures API

OpenAPI specification for Binance cryptocurrency exchange - Ufutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ufutures

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UfuturesGetAssetIndexV1Resp - struct for UfuturesGetAssetIndexV1Resp
type UfuturesGetAssetIndexV1Resp struct {
	UfuturesGetAssetIndexV1RespItem *UfuturesGetAssetIndexV1RespItem
	ArrayOfUfuturesGetAssetIndexV1RespItem *[]UfuturesGetAssetIndexV1RespItem
}

// UfuturesGetAssetIndexV1RespItemAsUfuturesGetAssetIndexV1Resp is a convenience function that returns UfuturesGetAssetIndexV1RespItem wrapped in UfuturesGetAssetIndexV1Resp
func UfuturesGetAssetIndexV1RespItemAsUfuturesGetAssetIndexV1Resp(v *UfuturesGetAssetIndexV1RespItem) UfuturesGetAssetIndexV1Resp {
	return UfuturesGetAssetIndexV1Resp{
		UfuturesGetAssetIndexV1RespItem: v,
	}
}

// []UfuturesGetAssetIndexV1RespItemAsUfuturesGetAssetIndexV1Resp is a convenience function that returns []UfuturesGetAssetIndexV1RespItem wrapped in UfuturesGetAssetIndexV1Resp
func ArrayOfUfuturesGetAssetIndexV1RespItemAsUfuturesGetAssetIndexV1Resp(v *[]UfuturesGetAssetIndexV1RespItem) UfuturesGetAssetIndexV1Resp {
	return UfuturesGetAssetIndexV1Resp{
		ArrayOfUfuturesGetAssetIndexV1RespItem: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UfuturesGetAssetIndexV1Resp) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UfuturesGetAssetIndexV1RespItem
	err = newStrictDecoder(data).Decode(&dst.UfuturesGetAssetIndexV1RespItem)
	if err == nil {
		jsonUfuturesGetAssetIndexV1RespItem, _ := json.Marshal(dst.UfuturesGetAssetIndexV1RespItem)
		if string(jsonUfuturesGetAssetIndexV1RespItem) == "{}" { // empty struct
			dst.UfuturesGetAssetIndexV1RespItem = nil
		} else {
			if err = validator.Validate(dst.UfuturesGetAssetIndexV1RespItem); err != nil {
				dst.UfuturesGetAssetIndexV1RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.UfuturesGetAssetIndexV1RespItem = nil
	}

	// try to unmarshal data into ArrayOfUfuturesGetAssetIndexV1RespItem
	err = newStrictDecoder(data).Decode(&dst.ArrayOfUfuturesGetAssetIndexV1RespItem)
	if err == nil {
		jsonArrayOfUfuturesGetAssetIndexV1RespItem, _ := json.Marshal(dst.ArrayOfUfuturesGetAssetIndexV1RespItem)
		if string(jsonArrayOfUfuturesGetAssetIndexV1RespItem) == "{}" { // empty struct
			dst.ArrayOfUfuturesGetAssetIndexV1RespItem = nil
		} else {
			if err = validator.Validate(dst.ArrayOfUfuturesGetAssetIndexV1RespItem); err != nil {
				dst.ArrayOfUfuturesGetAssetIndexV1RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfUfuturesGetAssetIndexV1RespItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UfuturesGetAssetIndexV1RespItem = nil
		dst.ArrayOfUfuturesGetAssetIndexV1RespItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UfuturesGetAssetIndexV1Resp)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UfuturesGetAssetIndexV1Resp)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UfuturesGetAssetIndexV1Resp) MarshalJSON() ([]byte, error) {
	if src.UfuturesGetAssetIndexV1RespItem != nil {
		return json.Marshal(&src.UfuturesGetAssetIndexV1RespItem)
	}

	if src.ArrayOfUfuturesGetAssetIndexV1RespItem != nil {
		return json.Marshal(&src.ArrayOfUfuturesGetAssetIndexV1RespItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UfuturesGetAssetIndexV1Resp) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.UfuturesGetAssetIndexV1RespItem != nil {
		return obj.UfuturesGetAssetIndexV1RespItem
	}

	if obj.ArrayOfUfuturesGetAssetIndexV1RespItem != nil {
		return obj.ArrayOfUfuturesGetAssetIndexV1RespItem
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UfuturesGetAssetIndexV1Resp) GetActualInstanceValue() (interface{}) {
	if obj.UfuturesGetAssetIndexV1RespItem != nil {
		return *obj.UfuturesGetAssetIndexV1RespItem
	}

	if obj.ArrayOfUfuturesGetAssetIndexV1RespItem != nil {
		return *obj.ArrayOfUfuturesGetAssetIndexV1RespItem
	}

	// all schemas are nil
	return nil
}

type NullableUfuturesGetAssetIndexV1Resp struct {
	value *UfuturesGetAssetIndexV1Resp
	isSet bool
}

func (v NullableUfuturesGetAssetIndexV1Resp) Get() *UfuturesGetAssetIndexV1Resp {
	return v.value
}

func (v *NullableUfuturesGetAssetIndexV1Resp) Set(val *UfuturesGetAssetIndexV1Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableUfuturesGetAssetIndexV1Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableUfuturesGetAssetIndexV1Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUfuturesGetAssetIndexV1Resp(val *UfuturesGetAssetIndexV1Resp) *NullableUfuturesGetAssetIndexV1Resp {
	return &NullableUfuturesGetAssetIndexV1Resp{value: val, isSet: true}
}

func (v NullableUfuturesGetAssetIndexV1Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUfuturesGetAssetIndexV1Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



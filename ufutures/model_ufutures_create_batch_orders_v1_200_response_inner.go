/*
Binance Ufutures API

OpenAPI specification for Binance cryptocurrency exchange - Ufutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ufutures

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UfuturesCreateBatchOrdersV1200ResponseInner - struct for UfuturesCreateBatchOrdersV1200ResponseInner
type UfuturesCreateBatchOrdersV1200ResponseInner struct {
	APIError *APIError
	UfuturesCreateBatchOrdersV1RespItem *UfuturesCreateBatchOrdersV1RespItem
}

// APIErrorAsUfuturesCreateBatchOrdersV1200ResponseInner is a convenience function that returns APIError wrapped in UfuturesCreateBatchOrdersV1200ResponseInner
func APIErrorAsUfuturesCreateBatchOrdersV1200ResponseInner(v *APIError) UfuturesCreateBatchOrdersV1200ResponseInner {
	return UfuturesCreateBatchOrdersV1200ResponseInner{
		APIError: v,
	}
}

// UfuturesCreateBatchOrdersV1RespItemAsUfuturesCreateBatchOrdersV1200ResponseInner is a convenience function that returns UfuturesCreateBatchOrdersV1RespItem wrapped in UfuturesCreateBatchOrdersV1200ResponseInner
func UfuturesCreateBatchOrdersV1RespItemAsUfuturesCreateBatchOrdersV1200ResponseInner(v *UfuturesCreateBatchOrdersV1RespItem) UfuturesCreateBatchOrdersV1200ResponseInner {
	return UfuturesCreateBatchOrdersV1200ResponseInner{
		UfuturesCreateBatchOrdersV1RespItem: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UfuturesCreateBatchOrdersV1200ResponseInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into APIError
	err = newStrictDecoder(data).Decode(&dst.APIError)
	if err == nil {
		jsonAPIError, _ := json.Marshal(dst.APIError)
		if string(jsonAPIError) == "{}" { // empty struct
			dst.APIError = nil
		} else {
			if err = validator.Validate(dst.APIError); err != nil {
				dst.APIError = nil
			} else {
				match++
			}
		}
	} else {
		dst.APIError = nil
	}

	// try to unmarshal data into UfuturesCreateBatchOrdersV1RespItem
	err = newStrictDecoder(data).Decode(&dst.UfuturesCreateBatchOrdersV1RespItem)
	if err == nil {
		jsonUfuturesCreateBatchOrdersV1RespItem, _ := json.Marshal(dst.UfuturesCreateBatchOrdersV1RespItem)
		if string(jsonUfuturesCreateBatchOrdersV1RespItem) == "{}" { // empty struct
			dst.UfuturesCreateBatchOrdersV1RespItem = nil
		} else {
			if err = validator.Validate(dst.UfuturesCreateBatchOrdersV1RespItem); err != nil {
				dst.UfuturesCreateBatchOrdersV1RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.UfuturesCreateBatchOrdersV1RespItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.APIError = nil
		dst.UfuturesCreateBatchOrdersV1RespItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UfuturesCreateBatchOrdersV1200ResponseInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UfuturesCreateBatchOrdersV1200ResponseInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UfuturesCreateBatchOrdersV1200ResponseInner) MarshalJSON() ([]byte, error) {
	if src.APIError != nil {
		return json.Marshal(&src.APIError)
	}

	if src.UfuturesCreateBatchOrdersV1RespItem != nil {
		return json.Marshal(&src.UfuturesCreateBatchOrdersV1RespItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UfuturesCreateBatchOrdersV1200ResponseInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.APIError != nil {
		return obj.APIError
	}

	if obj.UfuturesCreateBatchOrdersV1RespItem != nil {
		return obj.UfuturesCreateBatchOrdersV1RespItem
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UfuturesCreateBatchOrdersV1200ResponseInner) GetActualInstanceValue() (interface{}) {
	if obj.APIError != nil {
		return *obj.APIError
	}

	if obj.UfuturesCreateBatchOrdersV1RespItem != nil {
		return *obj.UfuturesCreateBatchOrdersV1RespItem
	}

	// all schemas are nil
	return nil
}

type NullableUfuturesCreateBatchOrdersV1200ResponseInner struct {
	value *UfuturesCreateBatchOrdersV1200ResponseInner
	isSet bool
}

func (v NullableUfuturesCreateBatchOrdersV1200ResponseInner) Get() *UfuturesCreateBatchOrdersV1200ResponseInner {
	return v.value
}

func (v *NullableUfuturesCreateBatchOrdersV1200ResponseInner) Set(val *UfuturesCreateBatchOrdersV1200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableUfuturesCreateBatchOrdersV1200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableUfuturesCreateBatchOrdersV1200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUfuturesCreateBatchOrdersV1200ResponseInner(val *UfuturesCreateBatchOrdersV1200ResponseInner) *NullableUfuturesCreateBatchOrdersV1200ResponseInner {
	return &NullableUfuturesCreateBatchOrdersV1200ResponseInner{value: val, isSet: true}
}

func (v NullableUfuturesCreateBatchOrdersV1200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUfuturesCreateBatchOrdersV1200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



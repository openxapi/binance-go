/*
Binance Options API

OpenAPI specification for Binance exchange - Options API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package options

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// TradeAPIService TradeAPI service
type TradeAPIService service

type ApiOptionsCreateBatchOrdersV1Request struct {
	ctx context.Context
	ApiService *TradeAPIService
	orders *[]OptionsCreateBatchOrdersV1ReqOrdersItem
	timestamp *int64
	recvWindow *int64
}

func (r ApiOptionsCreateBatchOrdersV1Request) Orders(orders []OptionsCreateBatchOrdersV1ReqOrdersItem) ApiOptionsCreateBatchOrdersV1Request {
	r.orders = &orders
	return r
}

func (r ApiOptionsCreateBatchOrdersV1Request) Timestamp(timestamp int64) ApiOptionsCreateBatchOrdersV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiOptionsCreateBatchOrdersV1Request) RecvWindow(recvWindow int64) ApiOptionsCreateBatchOrdersV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiOptionsCreateBatchOrdersV1Request) Execute() ([]OptionsCreateBatchOrdersV1RespInner, *http.Response, error) {
	return r.ApiService.OptionsCreateBatchOrdersV1Execute(r)
}

/*
OptionsCreateBatchOrdersV1 Place Multiple Orders(TRADE)

Send multiple option orders.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOptionsCreateBatchOrdersV1Request
*/
func (a *TradeAPIService) OptionsCreateBatchOrdersV1(ctx context.Context) ApiOptionsCreateBatchOrdersV1Request {
	return ApiOptionsCreateBatchOrdersV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []OptionsCreateBatchOrdersV1RespInner
func (a *TradeAPIService) OptionsCreateBatchOrdersV1Execute(r ApiOptionsCreateBatchOrdersV1Request) ([]OptionsCreateBatchOrdersV1RespInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OptionsCreateBatchOrdersV1RespInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TradeAPIService.OptionsCreateBatchOrdersV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/eapi/v1/batchOrders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.orders == nil {
		return localVarReturnValue, nil, reportError("orders is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "orders", r.orders, "", "csv")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOptionsCreateOrderV1Request struct {
	ctx context.Context
	ApiService *TradeAPIService
	quantity *string
	side *string
	symbol *string
	timestamp *int64
	type_ *string
	clientOrderId *string
	isMmp *bool
	newOrderRespType *string
	postOnly *bool
	price *string
	recvWindow *int64
	reduceOnly *bool
	timeInForce *string
}

func (r ApiOptionsCreateOrderV1Request) Quantity(quantity string) ApiOptionsCreateOrderV1Request {
	r.quantity = &quantity
	return r
}

func (r ApiOptionsCreateOrderV1Request) Side(side string) ApiOptionsCreateOrderV1Request {
	r.side = &side
	return r
}

func (r ApiOptionsCreateOrderV1Request) Symbol(symbol string) ApiOptionsCreateOrderV1Request {
	r.symbol = &symbol
	return r
}

func (r ApiOptionsCreateOrderV1Request) Timestamp(timestamp int64) ApiOptionsCreateOrderV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiOptionsCreateOrderV1Request) Type_(type_ string) ApiOptionsCreateOrderV1Request {
	r.type_ = &type_
	return r
}

func (r ApiOptionsCreateOrderV1Request) ClientOrderId(clientOrderId string) ApiOptionsCreateOrderV1Request {
	r.clientOrderId = &clientOrderId
	return r
}

func (r ApiOptionsCreateOrderV1Request) IsMmp(isMmp bool) ApiOptionsCreateOrderV1Request {
	r.isMmp = &isMmp
	return r
}

func (r ApiOptionsCreateOrderV1Request) NewOrderRespType(newOrderRespType string) ApiOptionsCreateOrderV1Request {
	r.newOrderRespType = &newOrderRespType
	return r
}

func (r ApiOptionsCreateOrderV1Request) PostOnly(postOnly bool) ApiOptionsCreateOrderV1Request {
	r.postOnly = &postOnly
	return r
}

func (r ApiOptionsCreateOrderV1Request) Price(price string) ApiOptionsCreateOrderV1Request {
	r.price = &price
	return r
}

func (r ApiOptionsCreateOrderV1Request) RecvWindow(recvWindow int64) ApiOptionsCreateOrderV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiOptionsCreateOrderV1Request) ReduceOnly(reduceOnly bool) ApiOptionsCreateOrderV1Request {
	r.reduceOnly = &reduceOnly
	return r
}

func (r ApiOptionsCreateOrderV1Request) TimeInForce(timeInForce string) ApiOptionsCreateOrderV1Request {
	r.timeInForce = &timeInForce
	return r
}

func (r ApiOptionsCreateOrderV1Request) Execute() (*OptionsCreateOrderV1Resp, *http.Response, error) {
	return r.ApiService.OptionsCreateOrderV1Execute(r)
}

/*
OptionsCreateOrderV1 New Order (TRADE)

Send a new order.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOptionsCreateOrderV1Request
*/
func (a *TradeAPIService) OptionsCreateOrderV1(ctx context.Context) ApiOptionsCreateOrderV1Request {
	return ApiOptionsCreateOrderV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OptionsCreateOrderV1Resp
func (a *TradeAPIService) OptionsCreateOrderV1Execute(r ApiOptionsCreateOrderV1Request) (*OptionsCreateOrderV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OptionsCreateOrderV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TradeAPIService.OptionsCreateOrderV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/eapi/v1/order"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.quantity == nil {
		return localVarReturnValue, nil, reportError("quantity is required and must be specified")
	}
	if r.side == nil {
		return localVarReturnValue, nil, reportError("side is required and must be specified")
	}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}
	if r.type_ == nil {
		return localVarReturnValue, nil, reportError("type_ is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientOrderId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "clientOrderId", r.clientOrderId, "", "")
	}
	if r.isMmp != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "isMmp", r.isMmp, "", "")
	}
	if r.newOrderRespType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "newOrderRespType", r.newOrderRespType, "", "")
	}
	if r.postOnly != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "postOnly", r.postOnly, "", "")
	}
	if r.price != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "price", r.price, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "quantity", r.quantity, "", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	if r.reduceOnly != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "reduceOnly", r.reduceOnly, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "side", r.side, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "symbol", r.symbol, "", "")
	if r.timeInForce != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "timeInForce", r.timeInForce, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "type", r.type_, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOptionsDeleteBatchOrdersV1Request struct {
	ctx context.Context
	ApiService *TradeAPIService
	symbol *string
	timestamp *int64
	orderIds *[]int64
	clientOrderIds *[]string
	recvWindow *int64
}

// Option trading pair, e.g BTC-200730-9000-C
func (r ApiOptionsDeleteBatchOrdersV1Request) Symbol(symbol string) ApiOptionsDeleteBatchOrdersV1Request {
	r.symbol = &symbol
	return r
}

func (r ApiOptionsDeleteBatchOrdersV1Request) Timestamp(timestamp int64) ApiOptionsDeleteBatchOrdersV1Request {
	r.timestamp = &timestamp
	return r
}

// Order ID, e.g [4611875134427365377,4611875134427365378]
func (r ApiOptionsDeleteBatchOrdersV1Request) OrderIds(orderIds []int64) ApiOptionsDeleteBatchOrdersV1Request {
	r.orderIds = &orderIds
	return r
}

// User-defined order ID, e.g [&amp;#34;my_id_1&amp;#34;,&amp;#34;my_id_2&amp;#34;]
func (r ApiOptionsDeleteBatchOrdersV1Request) ClientOrderIds(clientOrderIds []string) ApiOptionsDeleteBatchOrdersV1Request {
	r.clientOrderIds = &clientOrderIds
	return r
}

func (r ApiOptionsDeleteBatchOrdersV1Request) RecvWindow(recvWindow int64) ApiOptionsDeleteBatchOrdersV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiOptionsDeleteBatchOrdersV1Request) Execute() ([]OptionsDeleteBatchOrdersV1RespInner, *http.Response, error) {
	return r.ApiService.OptionsDeleteBatchOrdersV1Execute(r)
}

/*
OptionsDeleteBatchOrdersV1 Cancel Multiple Option Orders (TRADE)

Cancel multiple orders.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOptionsDeleteBatchOrdersV1Request
*/
func (a *TradeAPIService) OptionsDeleteBatchOrdersV1(ctx context.Context) ApiOptionsDeleteBatchOrdersV1Request {
	return ApiOptionsDeleteBatchOrdersV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []OptionsDeleteBatchOrdersV1RespInner
func (a *TradeAPIService) OptionsDeleteBatchOrdersV1Execute(r ApiOptionsDeleteBatchOrdersV1Request) ([]OptionsDeleteBatchOrdersV1RespInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OptionsDeleteBatchOrdersV1RespInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TradeAPIService.OptionsDeleteBatchOrdersV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/eapi/v1/batchOrders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "symbol", r.symbol, "form", "")
	if r.orderIds != nil {
		t := *r.orderIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "orderIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "orderIds", t, "form", "multi")
		}
	}
	if r.clientOrderIds != nil {
		t := *r.clientOrderIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "clientOrderIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "clientOrderIds", t, "form", "multi")
		}
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

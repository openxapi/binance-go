/*
Binance Options API

OpenAPI specification for Binance exchange - Options API

API version: 0.2.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package options

import (
	"encoding/json"
)

// checks if the GetPositionV1RespItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetPositionV1RespItem{}

// GetPositionV1RespItem struct for GetPositionV1RespItem
type GetPositionV1RespItem struct {
	EntryPrice *string `json:"entryPrice,omitempty"`
	ExpiryDate *int32 `json:"expiryDate,omitempty"`
	MarkPrice *string `json:"markPrice,omitempty"`
	MarkValue *string `json:"markValue,omitempty"`
	OptionSide *string `json:"optionSide,omitempty"`
	PositionCost *string `json:"positionCost,omitempty"`
	PriceScale *int32 `json:"priceScale,omitempty"`
	Quantity *string `json:"quantity,omitempty"`
	QuantityScale *int32 `json:"quantityScale,omitempty"`
	QuoteAsset *string `json:"quoteAsset,omitempty"`
	ReducibleQty *string `json:"reducibleQty,omitempty"`
	Ror *string `json:"ror,omitempty"`
	Side *string `json:"side,omitempty"`
	StrikePrice *string `json:"strikePrice,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	UnrealizedPNL *string `json:"unrealizedPNL,omitempty"`
}

// NewGetPositionV1RespItem instantiates a new GetPositionV1RespItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetPositionV1RespItem() *GetPositionV1RespItem {
	this := GetPositionV1RespItem{}
	return &this
}

// NewGetPositionV1RespItemWithDefaults instantiates a new GetPositionV1RespItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetPositionV1RespItemWithDefaults() *GetPositionV1RespItem {
	this := GetPositionV1RespItem{}
	return &this
}

// GetEntryPrice returns the EntryPrice field value if set, zero value otherwise.
func (o *GetPositionV1RespItem) GetEntryPrice() string {
	if o == nil || IsNil(o.EntryPrice) {
		var ret string
		return ret
	}
	return *o.EntryPrice
}

// GetEntryPriceOk returns a tuple with the EntryPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPositionV1RespItem) GetEntryPriceOk() (*string, bool) {
	if o == nil || IsNil(o.EntryPrice) {
		return nil, false
	}
	return o.EntryPrice, true
}

// HasEntryPrice returns a boolean if a field has been set.
func (o *GetPositionV1RespItem) HasEntryPrice() bool {
	if o != nil && !IsNil(o.EntryPrice) {
		return true
	}

	return false
}

// SetEntryPrice gets a reference to the given string and assigns it to the EntryPrice field.
func (o *GetPositionV1RespItem) SetEntryPrice(v string) {
	o.EntryPrice = &v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *GetPositionV1RespItem) GetExpiryDate() int32 {
	if o == nil || IsNil(o.ExpiryDate) {
		var ret int32
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPositionV1RespItem) GetExpiryDateOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiryDate) {
		return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *GetPositionV1RespItem) HasExpiryDate() bool {
	if o != nil && !IsNil(o.ExpiryDate) {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given int32 and assigns it to the ExpiryDate field.
func (o *GetPositionV1RespItem) SetExpiryDate(v int32) {
	o.ExpiryDate = &v
}

// GetMarkPrice returns the MarkPrice field value if set, zero value otherwise.
func (o *GetPositionV1RespItem) GetMarkPrice() string {
	if o == nil || IsNil(o.MarkPrice) {
		var ret string
		return ret
	}
	return *o.MarkPrice
}

// GetMarkPriceOk returns a tuple with the MarkPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPositionV1RespItem) GetMarkPriceOk() (*string, bool) {
	if o == nil || IsNil(o.MarkPrice) {
		return nil, false
	}
	return o.MarkPrice, true
}

// HasMarkPrice returns a boolean if a field has been set.
func (o *GetPositionV1RespItem) HasMarkPrice() bool {
	if o != nil && !IsNil(o.MarkPrice) {
		return true
	}

	return false
}

// SetMarkPrice gets a reference to the given string and assigns it to the MarkPrice field.
func (o *GetPositionV1RespItem) SetMarkPrice(v string) {
	o.MarkPrice = &v
}

// GetMarkValue returns the MarkValue field value if set, zero value otherwise.
func (o *GetPositionV1RespItem) GetMarkValue() string {
	if o == nil || IsNil(o.MarkValue) {
		var ret string
		return ret
	}
	return *o.MarkValue
}

// GetMarkValueOk returns a tuple with the MarkValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPositionV1RespItem) GetMarkValueOk() (*string, bool) {
	if o == nil || IsNil(o.MarkValue) {
		return nil, false
	}
	return o.MarkValue, true
}

// HasMarkValue returns a boolean if a field has been set.
func (o *GetPositionV1RespItem) HasMarkValue() bool {
	if o != nil && !IsNil(o.MarkValue) {
		return true
	}

	return false
}

// SetMarkValue gets a reference to the given string and assigns it to the MarkValue field.
func (o *GetPositionV1RespItem) SetMarkValue(v string) {
	o.MarkValue = &v
}

// GetOptionSide returns the OptionSide field value if set, zero value otherwise.
func (o *GetPositionV1RespItem) GetOptionSide() string {
	if o == nil || IsNil(o.OptionSide) {
		var ret string
		return ret
	}
	return *o.OptionSide
}

// GetOptionSideOk returns a tuple with the OptionSide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPositionV1RespItem) GetOptionSideOk() (*string, bool) {
	if o == nil || IsNil(o.OptionSide) {
		return nil, false
	}
	return o.OptionSide, true
}

// HasOptionSide returns a boolean if a field has been set.
func (o *GetPositionV1RespItem) HasOptionSide() bool {
	if o != nil && !IsNil(o.OptionSide) {
		return true
	}

	return false
}

// SetOptionSide gets a reference to the given string and assigns it to the OptionSide field.
func (o *GetPositionV1RespItem) SetOptionSide(v string) {
	o.OptionSide = &v
}

// GetPositionCost returns the PositionCost field value if set, zero value otherwise.
func (o *GetPositionV1RespItem) GetPositionCost() string {
	if o == nil || IsNil(o.PositionCost) {
		var ret string
		return ret
	}
	return *o.PositionCost
}

// GetPositionCostOk returns a tuple with the PositionCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPositionV1RespItem) GetPositionCostOk() (*string, bool) {
	if o == nil || IsNil(o.PositionCost) {
		return nil, false
	}
	return o.PositionCost, true
}

// HasPositionCost returns a boolean if a field has been set.
func (o *GetPositionV1RespItem) HasPositionCost() bool {
	if o != nil && !IsNil(o.PositionCost) {
		return true
	}

	return false
}

// SetPositionCost gets a reference to the given string and assigns it to the PositionCost field.
func (o *GetPositionV1RespItem) SetPositionCost(v string) {
	o.PositionCost = &v
}

// GetPriceScale returns the PriceScale field value if set, zero value otherwise.
func (o *GetPositionV1RespItem) GetPriceScale() int32 {
	if o == nil || IsNil(o.PriceScale) {
		var ret int32
		return ret
	}
	return *o.PriceScale
}

// GetPriceScaleOk returns a tuple with the PriceScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPositionV1RespItem) GetPriceScaleOk() (*int32, bool) {
	if o == nil || IsNil(o.PriceScale) {
		return nil, false
	}
	return o.PriceScale, true
}

// HasPriceScale returns a boolean if a field has been set.
func (o *GetPositionV1RespItem) HasPriceScale() bool {
	if o != nil && !IsNil(o.PriceScale) {
		return true
	}

	return false
}

// SetPriceScale gets a reference to the given int32 and assigns it to the PriceScale field.
func (o *GetPositionV1RespItem) SetPriceScale(v int32) {
	o.PriceScale = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *GetPositionV1RespItem) GetQuantity() string {
	if o == nil || IsNil(o.Quantity) {
		var ret string
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPositionV1RespItem) GetQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *GetPositionV1RespItem) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given string and assigns it to the Quantity field.
func (o *GetPositionV1RespItem) SetQuantity(v string) {
	o.Quantity = &v
}

// GetQuantityScale returns the QuantityScale field value if set, zero value otherwise.
func (o *GetPositionV1RespItem) GetQuantityScale() int32 {
	if o == nil || IsNil(o.QuantityScale) {
		var ret int32
		return ret
	}
	return *o.QuantityScale
}

// GetQuantityScaleOk returns a tuple with the QuantityScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPositionV1RespItem) GetQuantityScaleOk() (*int32, bool) {
	if o == nil || IsNil(o.QuantityScale) {
		return nil, false
	}
	return o.QuantityScale, true
}

// HasQuantityScale returns a boolean if a field has been set.
func (o *GetPositionV1RespItem) HasQuantityScale() bool {
	if o != nil && !IsNil(o.QuantityScale) {
		return true
	}

	return false
}

// SetQuantityScale gets a reference to the given int32 and assigns it to the QuantityScale field.
func (o *GetPositionV1RespItem) SetQuantityScale(v int32) {
	o.QuantityScale = &v
}

// GetQuoteAsset returns the QuoteAsset field value if set, zero value otherwise.
func (o *GetPositionV1RespItem) GetQuoteAsset() string {
	if o == nil || IsNil(o.QuoteAsset) {
		var ret string
		return ret
	}
	return *o.QuoteAsset
}

// GetQuoteAssetOk returns a tuple with the QuoteAsset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPositionV1RespItem) GetQuoteAssetOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteAsset) {
		return nil, false
	}
	return o.QuoteAsset, true
}

// HasQuoteAsset returns a boolean if a field has been set.
func (o *GetPositionV1RespItem) HasQuoteAsset() bool {
	if o != nil && !IsNil(o.QuoteAsset) {
		return true
	}

	return false
}

// SetQuoteAsset gets a reference to the given string and assigns it to the QuoteAsset field.
func (o *GetPositionV1RespItem) SetQuoteAsset(v string) {
	o.QuoteAsset = &v
}

// GetReducibleQty returns the ReducibleQty field value if set, zero value otherwise.
func (o *GetPositionV1RespItem) GetReducibleQty() string {
	if o == nil || IsNil(o.ReducibleQty) {
		var ret string
		return ret
	}
	return *o.ReducibleQty
}

// GetReducibleQtyOk returns a tuple with the ReducibleQty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPositionV1RespItem) GetReducibleQtyOk() (*string, bool) {
	if o == nil || IsNil(o.ReducibleQty) {
		return nil, false
	}
	return o.ReducibleQty, true
}

// HasReducibleQty returns a boolean if a field has been set.
func (o *GetPositionV1RespItem) HasReducibleQty() bool {
	if o != nil && !IsNil(o.ReducibleQty) {
		return true
	}

	return false
}

// SetReducibleQty gets a reference to the given string and assigns it to the ReducibleQty field.
func (o *GetPositionV1RespItem) SetReducibleQty(v string) {
	o.ReducibleQty = &v
}

// GetRor returns the Ror field value if set, zero value otherwise.
func (o *GetPositionV1RespItem) GetRor() string {
	if o == nil || IsNil(o.Ror) {
		var ret string
		return ret
	}
	return *o.Ror
}

// GetRorOk returns a tuple with the Ror field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPositionV1RespItem) GetRorOk() (*string, bool) {
	if o == nil || IsNil(o.Ror) {
		return nil, false
	}
	return o.Ror, true
}

// HasRor returns a boolean if a field has been set.
func (o *GetPositionV1RespItem) HasRor() bool {
	if o != nil && !IsNil(o.Ror) {
		return true
	}

	return false
}

// SetRor gets a reference to the given string and assigns it to the Ror field.
func (o *GetPositionV1RespItem) SetRor(v string) {
	o.Ror = &v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *GetPositionV1RespItem) GetSide() string {
	if o == nil || IsNil(o.Side) {
		var ret string
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPositionV1RespItem) GetSideOk() (*string, bool) {
	if o == nil || IsNil(o.Side) {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *GetPositionV1RespItem) HasSide() bool {
	if o != nil && !IsNil(o.Side) {
		return true
	}

	return false
}

// SetSide gets a reference to the given string and assigns it to the Side field.
func (o *GetPositionV1RespItem) SetSide(v string) {
	o.Side = &v
}

// GetStrikePrice returns the StrikePrice field value if set, zero value otherwise.
func (o *GetPositionV1RespItem) GetStrikePrice() string {
	if o == nil || IsNil(o.StrikePrice) {
		var ret string
		return ret
	}
	return *o.StrikePrice
}

// GetStrikePriceOk returns a tuple with the StrikePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPositionV1RespItem) GetStrikePriceOk() (*string, bool) {
	if o == nil || IsNil(o.StrikePrice) {
		return nil, false
	}
	return o.StrikePrice, true
}

// HasStrikePrice returns a boolean if a field has been set.
func (o *GetPositionV1RespItem) HasStrikePrice() bool {
	if o != nil && !IsNil(o.StrikePrice) {
		return true
	}

	return false
}

// SetStrikePrice gets a reference to the given string and assigns it to the StrikePrice field.
func (o *GetPositionV1RespItem) SetStrikePrice(v string) {
	o.StrikePrice = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *GetPositionV1RespItem) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPositionV1RespItem) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *GetPositionV1RespItem) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *GetPositionV1RespItem) SetSymbol(v string) {
	o.Symbol = &v
}

// GetUnrealizedPNL returns the UnrealizedPNL field value if set, zero value otherwise.
func (o *GetPositionV1RespItem) GetUnrealizedPNL() string {
	if o == nil || IsNil(o.UnrealizedPNL) {
		var ret string
		return ret
	}
	return *o.UnrealizedPNL
}

// GetUnrealizedPNLOk returns a tuple with the UnrealizedPNL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPositionV1RespItem) GetUnrealizedPNLOk() (*string, bool) {
	if o == nil || IsNil(o.UnrealizedPNL) {
		return nil, false
	}
	return o.UnrealizedPNL, true
}

// HasUnrealizedPNL returns a boolean if a field has been set.
func (o *GetPositionV1RespItem) HasUnrealizedPNL() bool {
	if o != nil && !IsNil(o.UnrealizedPNL) {
		return true
	}

	return false
}

// SetUnrealizedPNL gets a reference to the given string and assigns it to the UnrealizedPNL field.
func (o *GetPositionV1RespItem) SetUnrealizedPNL(v string) {
	o.UnrealizedPNL = &v
}

func (o GetPositionV1RespItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetPositionV1RespItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryPrice) {
		toSerialize["entryPrice"] = o.EntryPrice
	}
	if !IsNil(o.ExpiryDate) {
		toSerialize["expiryDate"] = o.ExpiryDate
	}
	if !IsNil(o.MarkPrice) {
		toSerialize["markPrice"] = o.MarkPrice
	}
	if !IsNil(o.MarkValue) {
		toSerialize["markValue"] = o.MarkValue
	}
	if !IsNil(o.OptionSide) {
		toSerialize["optionSide"] = o.OptionSide
	}
	if !IsNil(o.PositionCost) {
		toSerialize["positionCost"] = o.PositionCost
	}
	if !IsNil(o.PriceScale) {
		toSerialize["priceScale"] = o.PriceScale
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.QuantityScale) {
		toSerialize["quantityScale"] = o.QuantityScale
	}
	if !IsNil(o.QuoteAsset) {
		toSerialize["quoteAsset"] = o.QuoteAsset
	}
	if !IsNil(o.ReducibleQty) {
		toSerialize["reducibleQty"] = o.ReducibleQty
	}
	if !IsNil(o.Ror) {
		toSerialize["ror"] = o.Ror
	}
	if !IsNil(o.Side) {
		toSerialize["side"] = o.Side
	}
	if !IsNil(o.StrikePrice) {
		toSerialize["strikePrice"] = o.StrikePrice
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.UnrealizedPNL) {
		toSerialize["unrealizedPNL"] = o.UnrealizedPNL
	}
	return toSerialize, nil
}

type NullableGetPositionV1RespItem struct {
	value *GetPositionV1RespItem
	isSet bool
}

func (v NullableGetPositionV1RespItem) Get() *GetPositionV1RespItem {
	return v.value
}

func (v *NullableGetPositionV1RespItem) Set(val *GetPositionV1RespItem) {
	v.value = val
	v.isSet = true
}

func (v NullableGetPositionV1RespItem) IsSet() bool {
	return v.isSet
}

func (v *NullableGetPositionV1RespItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetPositionV1RespItem(val *GetPositionV1RespItem) *NullableGetPositionV1RespItem {
	return &NullableGetPositionV1RespItem{value: val, isSet: true}
}

func (v NullableGetPositionV1RespItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetPositionV1RespItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



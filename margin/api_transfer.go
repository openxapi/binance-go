/*
Binance Margin API

OpenAPI specification for Binance cryptocurrency exchange - Margin API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package margin

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// TransferAPIService TransferAPI service
type TransferAPIService service

type TransferAPIMarginGetMarginMaxTransferableV1Request struct {
	ctx context.Context
	ApiService *TransferAPIService
	asset *string
	timestamp *int64
	isolatedSymbol *string
	recvWindow *int64
}

func (r TransferAPIMarginGetMarginMaxTransferableV1Request) Asset(asset string) TransferAPIMarginGetMarginMaxTransferableV1Request {
	r.asset = &asset
	return r
}

func (r TransferAPIMarginGetMarginMaxTransferableV1Request) Timestamp(timestamp int64) TransferAPIMarginGetMarginMaxTransferableV1Request {
	r.timestamp = &timestamp
	return r
}

// isolated symbol
func (r TransferAPIMarginGetMarginMaxTransferableV1Request) IsolatedSymbol(isolatedSymbol string) TransferAPIMarginGetMarginMaxTransferableV1Request {
	r.isolatedSymbol = &isolatedSymbol
	return r
}

// The value cannot be greater than &#x60;60000&#x60;
func (r TransferAPIMarginGetMarginMaxTransferableV1Request) RecvWindow(recvWindow int64) TransferAPIMarginGetMarginMaxTransferableV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r TransferAPIMarginGetMarginMaxTransferableV1Request) Execute() (*MarginGetMarginMaxTransferableV1Resp, *http.Response, error) {
	return r.ApiService.MarginGetMarginMaxTransferableV1Execute(r)
}

/*
MarginGetMarginMaxTransferableV1 Query Max Transfer-Out Amount (USER_DATA)

Query Max Transfer-Out Amount

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return TransferAPIMarginGetMarginMaxTransferableV1Request
*/
func (a *TransferAPIService) MarginGetMarginMaxTransferableV1(ctx context.Context) TransferAPIMarginGetMarginMaxTransferableV1Request {
	return TransferAPIMarginGetMarginMaxTransferableV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MarginGetMarginMaxTransferableV1Resp
func (a *TransferAPIService) MarginGetMarginMaxTransferableV1Execute(r TransferAPIMarginGetMarginMaxTransferableV1Request) (*MarginGetMarginMaxTransferableV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MarginGetMarginMaxTransferableV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TransferAPIService.MarginGetMarginMaxTransferableV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/margin/maxTransferable"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.asset == nil {
		return localVarReturnValue, nil, reportError("asset is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "asset", r.asset, "form", "")
	if r.isolatedSymbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isolatedSymbol", r.isolatedSymbol, "form", "")
	} else {
		var defaultValue string = ""
		r.isolatedSymbol = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TransferAPIMarginGetMarginTransferV1Request struct {
	ctx context.Context
	ApiService *TransferAPIService
	timestamp *int64
	asset *string
	type_ *string
	startTime *int64
	endTime *int64
	current *int64
	size *int64
	isolatedSymbol *string
	recvWindow *int64
}

func (r TransferAPIMarginGetMarginTransferV1Request) Timestamp(timestamp int64) TransferAPIMarginGetMarginTransferV1Request {
	r.timestamp = &timestamp
	return r
}

func (r TransferAPIMarginGetMarginTransferV1Request) Asset(asset string) TransferAPIMarginGetMarginTransferV1Request {
	r.asset = &asset
	return r
}

// Transfer Type: ROLL_IN, ROLL_OUT
func (r TransferAPIMarginGetMarginTransferV1Request) Type_(type_ string) TransferAPIMarginGetMarginTransferV1Request {
	r.type_ = &type_
	return r
}

func (r TransferAPIMarginGetMarginTransferV1Request) StartTime(startTime int64) TransferAPIMarginGetMarginTransferV1Request {
	r.startTime = &startTime
	return r
}

func (r TransferAPIMarginGetMarginTransferV1Request) EndTime(endTime int64) TransferAPIMarginGetMarginTransferV1Request {
	r.endTime = &endTime
	return r
}

// Currently querying page. Start from 1. Default:1
func (r TransferAPIMarginGetMarginTransferV1Request) Current(current int64) TransferAPIMarginGetMarginTransferV1Request {
	r.current = &current
	return r
}

// Default:10 Max:100
func (r TransferAPIMarginGetMarginTransferV1Request) Size(size int64) TransferAPIMarginGetMarginTransferV1Request {
	r.size = &size
	return r
}

// Symbol in Isolated Margin
func (r TransferAPIMarginGetMarginTransferV1Request) IsolatedSymbol(isolatedSymbol string) TransferAPIMarginGetMarginTransferV1Request {
	r.isolatedSymbol = &isolatedSymbol
	return r
}

// The value cannot be greater than &#x60;60000&#x60;
func (r TransferAPIMarginGetMarginTransferV1Request) RecvWindow(recvWindow int64) TransferAPIMarginGetMarginTransferV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r TransferAPIMarginGetMarginTransferV1Request) Execute() (*MarginGetMarginTransferV1Resp, *http.Response, error) {
	return r.ApiService.MarginGetMarginTransferV1Execute(r)
}

/*
MarginGetMarginTransferV1 Get Cross Margin Transfer History (USER_DATA)

Get Cross Margin Transfer History

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return TransferAPIMarginGetMarginTransferV1Request
*/
func (a *TransferAPIService) MarginGetMarginTransferV1(ctx context.Context) TransferAPIMarginGetMarginTransferV1Request {
	return TransferAPIMarginGetMarginTransferV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MarginGetMarginTransferV1Resp
func (a *TransferAPIService) MarginGetMarginTransferV1Execute(r TransferAPIMarginGetMarginTransferV1Request) (*MarginGetMarginTransferV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MarginGetMarginTransferV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TransferAPIService.MarginGetMarginTransferV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/margin/transfer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.asset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asset", r.asset, "form", "")
	} else {
		var defaultValue string = ""
		r.asset = &defaultValue
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	} else {
		var defaultValue string = ""
		r.type_ = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.current != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "current", r.current, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.isolatedSymbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isolatedSymbol", r.isolatedSymbol, "form", "")
	} else {
		var defaultValue string = ""
		r.isolatedSymbol = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

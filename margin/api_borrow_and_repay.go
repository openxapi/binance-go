/*
Binance Margin API

OpenAPI specification for Binance cryptocurrency exchange - Margin API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package margin

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// BorrowAndRepayAPIService BorrowAndRepayAPI service
type BorrowAndRepayAPIService service

type BorrowAndRepayAPIMarginCreateMarginBorrowRepayV1Request struct {
	ctx context.Context
	ApiService *BorrowAndRepayAPIService
	amount *string
	asset *string
	isIsolated *string
	symbol *string
	timestamp *int64
	type_ *string
	recvWindow *int64
}

func (r BorrowAndRepayAPIMarginCreateMarginBorrowRepayV1Request) Amount(amount string) BorrowAndRepayAPIMarginCreateMarginBorrowRepayV1Request {
	r.amount = &amount
	return r
}

func (r BorrowAndRepayAPIMarginCreateMarginBorrowRepayV1Request) Asset(asset string) BorrowAndRepayAPIMarginCreateMarginBorrowRepayV1Request {
	r.asset = &asset
	return r
}

func (r BorrowAndRepayAPIMarginCreateMarginBorrowRepayV1Request) IsIsolated(isIsolated string) BorrowAndRepayAPIMarginCreateMarginBorrowRepayV1Request {
	r.isIsolated = &isIsolated
	return r
}

func (r BorrowAndRepayAPIMarginCreateMarginBorrowRepayV1Request) Symbol(symbol string) BorrowAndRepayAPIMarginCreateMarginBorrowRepayV1Request {
	r.symbol = &symbol
	return r
}

func (r BorrowAndRepayAPIMarginCreateMarginBorrowRepayV1Request) Timestamp(timestamp int64) BorrowAndRepayAPIMarginCreateMarginBorrowRepayV1Request {
	r.timestamp = &timestamp
	return r
}

func (r BorrowAndRepayAPIMarginCreateMarginBorrowRepayV1Request) Type_(type_ string) BorrowAndRepayAPIMarginCreateMarginBorrowRepayV1Request {
	r.type_ = &type_
	return r
}

func (r BorrowAndRepayAPIMarginCreateMarginBorrowRepayV1Request) RecvWindow(recvWindow int64) BorrowAndRepayAPIMarginCreateMarginBorrowRepayV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r BorrowAndRepayAPIMarginCreateMarginBorrowRepayV1Request) Execute() (*MarginCreateMarginBorrowRepayV1Resp, *http.Response, error) {
	return r.ApiService.MarginCreateMarginBorrowRepayV1Execute(r)
}

/*
MarginCreateMarginBorrowRepayV1 Margin account borrow/repay(MARGIN)

Margin account borrow/repay(MARGIN)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BorrowAndRepayAPIMarginCreateMarginBorrowRepayV1Request
*/
func (a *BorrowAndRepayAPIService) MarginCreateMarginBorrowRepayV1(ctx context.Context) BorrowAndRepayAPIMarginCreateMarginBorrowRepayV1Request {
	return BorrowAndRepayAPIMarginCreateMarginBorrowRepayV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MarginCreateMarginBorrowRepayV1Resp
func (a *BorrowAndRepayAPIService) MarginCreateMarginBorrowRepayV1Execute(r BorrowAndRepayAPIMarginCreateMarginBorrowRepayV1Request) (*MarginCreateMarginBorrowRepayV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MarginCreateMarginBorrowRepayV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BorrowAndRepayAPIService.MarginCreateMarginBorrowRepayV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/margin/borrow-repay"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.amount == nil {
		return localVarReturnValue, nil, reportError("amount is required and must be specified")
	}
	if r.asset == nil {
		return localVarReturnValue, nil, reportError("asset is required and must be specified")
	}
	if r.isIsolated == nil {
		return localVarReturnValue, nil, reportError("isIsolated is required and must be specified")
	}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}
	if r.type_ == nil {
		return localVarReturnValue, nil, reportError("type_ is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "amount", r.amount, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "asset", r.asset, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "isIsolated", r.isIsolated, "", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "symbol", r.symbol, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "type", r.type_, "", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request struct {
	ctx context.Context
	ApiService *BorrowAndRepayAPIService
	type_ *string
	timestamp *int64
	asset *string
	isolatedSymbol *string
	txId *int64
	startTime *int64
	endTime *int64
	current *int64
	size *int64
	recvWindow *int64
}

// &#x60;BORROW&#x60; or &#x60;REPAY&#x60;
func (r BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request) Type_(type_ string) BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request {
	r.type_ = &type_
	return r
}

func (r BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request) Timestamp(timestamp int64) BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request {
	r.timestamp = &timestamp
	return r
}

func (r BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request) Asset(asset string) BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request {
	r.asset = &asset
	return r
}

// Symbol in Isolated Margin
func (r BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request) IsolatedSymbol(isolatedSymbol string) BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request {
	r.isolatedSymbol = &isolatedSymbol
	return r
}

// &#x60;tranId&#x60; in &#x60;POST /sapi/v1/margin/loan&#x60;
func (r BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request) TxId(txId int64) BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request {
	r.txId = &txId
	return r
}

func (r BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request) StartTime(startTime int64) BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request {
	r.startTime = &startTime
	return r
}

func (r BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request) EndTime(endTime int64) BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request {
	r.endTime = &endTime
	return r
}

// Current querying page. Start from 1. Default:1
func (r BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request) Current(current int64) BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request {
	r.current = &current
	return r
}

// Default:10 Max:100
func (r BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request) Size(size int64) BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request {
	r.size = &size
	return r
}

// The value cannot be greater than 60000
func (r BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request) RecvWindow(recvWindow int64) BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request) Execute() (*MarginGetMarginBorrowRepayV1Resp, *http.Response, error) {
	return r.ApiService.MarginGetMarginBorrowRepayV1Execute(r)
}

/*
MarginGetMarginBorrowRepayV1 Query borrow/repay records in Margin account(USER_DATA)

Query borrow/repay records in Margin account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request
*/
func (a *BorrowAndRepayAPIService) MarginGetMarginBorrowRepayV1(ctx context.Context) BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request {
	return BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MarginGetMarginBorrowRepayV1Resp
func (a *BorrowAndRepayAPIService) MarginGetMarginBorrowRepayV1Execute(r BorrowAndRepayAPIMarginGetMarginBorrowRepayV1Request) (*MarginGetMarginBorrowRepayV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MarginGetMarginBorrowRepayV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BorrowAndRepayAPIService.MarginGetMarginBorrowRepayV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/margin/borrow-repay"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.type_ == nil {
		return localVarReturnValue, nil, reportError("type_ is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.asset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asset", r.asset, "form", "")
	} else {
		var defaultValue string = ""
		r.asset = &defaultValue
	}
	if r.isolatedSymbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isolatedSymbol", r.isolatedSymbol, "form", "")
	} else {
		var defaultValue string = ""
		r.isolatedSymbol = &defaultValue
	}
	if r.txId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "txId", r.txId, "form", "")
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.current != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "current", r.current, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BorrowAndRepayAPIMarginGetMarginInterestHistoryV1Request struct {
	ctx context.Context
	ApiService *BorrowAndRepayAPIService
	timestamp *int64
	asset *string
	isolatedSymbol *string
	startTime *int64
	endTime *int64
	current *int64
	size *int64
	recvWindow *int64
}

func (r BorrowAndRepayAPIMarginGetMarginInterestHistoryV1Request) Timestamp(timestamp int64) BorrowAndRepayAPIMarginGetMarginInterestHistoryV1Request {
	r.timestamp = &timestamp
	return r
}

func (r BorrowAndRepayAPIMarginGetMarginInterestHistoryV1Request) Asset(asset string) BorrowAndRepayAPIMarginGetMarginInterestHistoryV1Request {
	r.asset = &asset
	return r
}

// isolated symbol
func (r BorrowAndRepayAPIMarginGetMarginInterestHistoryV1Request) IsolatedSymbol(isolatedSymbol string) BorrowAndRepayAPIMarginGetMarginInterestHistoryV1Request {
	r.isolatedSymbol = &isolatedSymbol
	return r
}

func (r BorrowAndRepayAPIMarginGetMarginInterestHistoryV1Request) StartTime(startTime int64) BorrowAndRepayAPIMarginGetMarginInterestHistoryV1Request {
	r.startTime = &startTime
	return r
}

func (r BorrowAndRepayAPIMarginGetMarginInterestHistoryV1Request) EndTime(endTime int64) BorrowAndRepayAPIMarginGetMarginInterestHistoryV1Request {
	r.endTime = &endTime
	return r
}

// Currently querying page. Start from 1. Default:1
func (r BorrowAndRepayAPIMarginGetMarginInterestHistoryV1Request) Current(current int64) BorrowAndRepayAPIMarginGetMarginInterestHistoryV1Request {
	r.current = &current
	return r
}

// Default:10 Max:100
func (r BorrowAndRepayAPIMarginGetMarginInterestHistoryV1Request) Size(size int64) BorrowAndRepayAPIMarginGetMarginInterestHistoryV1Request {
	r.size = &size
	return r
}

// The value cannot be greater than &#x60;60000&#x60;
func (r BorrowAndRepayAPIMarginGetMarginInterestHistoryV1Request) RecvWindow(recvWindow int64) BorrowAndRepayAPIMarginGetMarginInterestHistoryV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r BorrowAndRepayAPIMarginGetMarginInterestHistoryV1Request) Execute() (*MarginGetMarginInterestHistoryV1Resp, *http.Response, error) {
	return r.ApiService.MarginGetMarginInterestHistoryV1Execute(r)
}

/*
MarginGetMarginInterestHistoryV1 Get Interest History (USER_DATA)

Get Interest History

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BorrowAndRepayAPIMarginGetMarginInterestHistoryV1Request
*/
func (a *BorrowAndRepayAPIService) MarginGetMarginInterestHistoryV1(ctx context.Context) BorrowAndRepayAPIMarginGetMarginInterestHistoryV1Request {
	return BorrowAndRepayAPIMarginGetMarginInterestHistoryV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MarginGetMarginInterestHistoryV1Resp
func (a *BorrowAndRepayAPIService) MarginGetMarginInterestHistoryV1Execute(r BorrowAndRepayAPIMarginGetMarginInterestHistoryV1Request) (*MarginGetMarginInterestHistoryV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MarginGetMarginInterestHistoryV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BorrowAndRepayAPIService.MarginGetMarginInterestHistoryV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/margin/interestHistory"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.asset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asset", r.asset, "form", "")
	} else {
		var defaultValue string = ""
		r.asset = &defaultValue
	}
	if r.isolatedSymbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isolatedSymbol", r.isolatedSymbol, "form", "")
	} else {
		var defaultValue string = ""
		r.isolatedSymbol = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.current != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "current", r.current, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BorrowAndRepayAPIMarginGetMarginInterestRateHistoryV1Request struct {
	ctx context.Context
	ApiService *BorrowAndRepayAPIService
	asset *string
	timestamp *int64
	vipLevel *int32
	startTime *int64
	endTime *int64
	recvWindow *int64
}

func (r BorrowAndRepayAPIMarginGetMarginInterestRateHistoryV1Request) Asset(asset string) BorrowAndRepayAPIMarginGetMarginInterestRateHistoryV1Request {
	r.asset = &asset
	return r
}

func (r BorrowAndRepayAPIMarginGetMarginInterestRateHistoryV1Request) Timestamp(timestamp int64) BorrowAndRepayAPIMarginGetMarginInterestRateHistoryV1Request {
	r.timestamp = &timestamp
	return r
}

// Default: user&amp;#39;s vip level
func (r BorrowAndRepayAPIMarginGetMarginInterestRateHistoryV1Request) VipLevel(vipLevel int32) BorrowAndRepayAPIMarginGetMarginInterestRateHistoryV1Request {
	r.vipLevel = &vipLevel
	return r
}

// Default: 7 days ago
func (r BorrowAndRepayAPIMarginGetMarginInterestRateHistoryV1Request) StartTime(startTime int64) BorrowAndRepayAPIMarginGetMarginInterestRateHistoryV1Request {
	r.startTime = &startTime
	return r
}

// Default: present. Maximum range: 1 months.
func (r BorrowAndRepayAPIMarginGetMarginInterestRateHistoryV1Request) EndTime(endTime int64) BorrowAndRepayAPIMarginGetMarginInterestRateHistoryV1Request {
	r.endTime = &endTime
	return r
}

// No more than 60000
func (r BorrowAndRepayAPIMarginGetMarginInterestRateHistoryV1Request) RecvWindow(recvWindow int64) BorrowAndRepayAPIMarginGetMarginInterestRateHistoryV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r BorrowAndRepayAPIMarginGetMarginInterestRateHistoryV1Request) Execute() ([]MarginGetMarginInterestRateHistoryV1RespItem, *http.Response, error) {
	return r.ApiService.MarginGetMarginInterestRateHistoryV1Execute(r)
}

/*
MarginGetMarginInterestRateHistoryV1 Query Margin Interest Rate History (USER_DATA)

Query Margin Interest Rate History

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BorrowAndRepayAPIMarginGetMarginInterestRateHistoryV1Request
*/
func (a *BorrowAndRepayAPIService) MarginGetMarginInterestRateHistoryV1(ctx context.Context) BorrowAndRepayAPIMarginGetMarginInterestRateHistoryV1Request {
	return BorrowAndRepayAPIMarginGetMarginInterestRateHistoryV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MarginGetMarginInterestRateHistoryV1RespItem
func (a *BorrowAndRepayAPIService) MarginGetMarginInterestRateHistoryV1Execute(r BorrowAndRepayAPIMarginGetMarginInterestRateHistoryV1Request) ([]MarginGetMarginInterestRateHistoryV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []MarginGetMarginInterestRateHistoryV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BorrowAndRepayAPIService.MarginGetMarginInterestRateHistoryV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/margin/interestRateHistory"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.asset == nil {
		return localVarReturnValue, nil, reportError("asset is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "asset", r.asset, "form", "")
	if r.vipLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vipLevel", r.vipLevel, "form", "")
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BorrowAndRepayAPIMarginGetMarginMaxBorrowableV1Request struct {
	ctx context.Context
	ApiService *BorrowAndRepayAPIService
	asset *string
	timestamp *int64
	isolatedSymbol *string
	recvWindow *int64
}

func (r BorrowAndRepayAPIMarginGetMarginMaxBorrowableV1Request) Asset(asset string) BorrowAndRepayAPIMarginGetMarginMaxBorrowableV1Request {
	r.asset = &asset
	return r
}

func (r BorrowAndRepayAPIMarginGetMarginMaxBorrowableV1Request) Timestamp(timestamp int64) BorrowAndRepayAPIMarginGetMarginMaxBorrowableV1Request {
	r.timestamp = &timestamp
	return r
}

// isolated symbol
func (r BorrowAndRepayAPIMarginGetMarginMaxBorrowableV1Request) IsolatedSymbol(isolatedSymbol string) BorrowAndRepayAPIMarginGetMarginMaxBorrowableV1Request {
	r.isolatedSymbol = &isolatedSymbol
	return r
}

// The value cannot be greater than &#x60;60000&#x60;
func (r BorrowAndRepayAPIMarginGetMarginMaxBorrowableV1Request) RecvWindow(recvWindow int64) BorrowAndRepayAPIMarginGetMarginMaxBorrowableV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r BorrowAndRepayAPIMarginGetMarginMaxBorrowableV1Request) Execute() (*MarginGetMarginMaxBorrowableV1Resp, *http.Response, error) {
	return r.ApiService.MarginGetMarginMaxBorrowableV1Execute(r)
}

/*
MarginGetMarginMaxBorrowableV1 Query Max Borrow (USER_DATA)

Query Max Borrow

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BorrowAndRepayAPIMarginGetMarginMaxBorrowableV1Request
*/
func (a *BorrowAndRepayAPIService) MarginGetMarginMaxBorrowableV1(ctx context.Context) BorrowAndRepayAPIMarginGetMarginMaxBorrowableV1Request {
	return BorrowAndRepayAPIMarginGetMarginMaxBorrowableV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MarginGetMarginMaxBorrowableV1Resp
func (a *BorrowAndRepayAPIService) MarginGetMarginMaxBorrowableV1Execute(r BorrowAndRepayAPIMarginGetMarginMaxBorrowableV1Request) (*MarginGetMarginMaxBorrowableV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MarginGetMarginMaxBorrowableV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BorrowAndRepayAPIService.MarginGetMarginMaxBorrowableV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/margin/maxBorrowable"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.asset == nil {
		return localVarReturnValue, nil, reportError("asset is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "asset", r.asset, "form", "")
	if r.isolatedSymbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isolatedSymbol", r.isolatedSymbol, "form", "")
	} else {
		var defaultValue string = ""
		r.isolatedSymbol = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BorrowAndRepayAPIMarginGetMarginNextHourlyInterestRateV1Request struct {
	ctx context.Context
	ApiService *BorrowAndRepayAPIService
	assets *string
	isIsolated *bool
}

// List of assets, separated by commas, up to 20
func (r BorrowAndRepayAPIMarginGetMarginNextHourlyInterestRateV1Request) Assets(assets string) BorrowAndRepayAPIMarginGetMarginNextHourlyInterestRateV1Request {
	r.assets = &assets
	return r
}

// for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;
func (r BorrowAndRepayAPIMarginGetMarginNextHourlyInterestRateV1Request) IsIsolated(isIsolated bool) BorrowAndRepayAPIMarginGetMarginNextHourlyInterestRateV1Request {
	r.isIsolated = &isIsolated
	return r
}

func (r BorrowAndRepayAPIMarginGetMarginNextHourlyInterestRateV1Request) Execute() ([]MarginGetMarginNextHourlyInterestRateV1RespItem, *http.Response, error) {
	return r.ApiService.MarginGetMarginNextHourlyInterestRateV1Execute(r)
}

/*
MarginGetMarginNextHourlyInterestRateV1 Get future hourly interest rate (USER_DATA)

Get future hourly interest rate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BorrowAndRepayAPIMarginGetMarginNextHourlyInterestRateV1Request
*/
func (a *BorrowAndRepayAPIService) MarginGetMarginNextHourlyInterestRateV1(ctx context.Context) BorrowAndRepayAPIMarginGetMarginNextHourlyInterestRateV1Request {
	return BorrowAndRepayAPIMarginGetMarginNextHourlyInterestRateV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MarginGetMarginNextHourlyInterestRateV1RespItem
func (a *BorrowAndRepayAPIService) MarginGetMarginNextHourlyInterestRateV1Execute(r BorrowAndRepayAPIMarginGetMarginNextHourlyInterestRateV1Request) ([]MarginGetMarginNextHourlyInterestRateV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []MarginGetMarginNextHourlyInterestRateV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BorrowAndRepayAPIService.MarginGetMarginNextHourlyInterestRateV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/margin/next-hourly-interest-rate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.assets == nil {
		return localVarReturnValue, nil, reportError("assets is required and must be specified")
	}
	if r.isIsolated == nil {
		return localVarReturnValue, nil, reportError("isIsolated is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "assets", r.assets, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "isIsolated", r.isIsolated, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

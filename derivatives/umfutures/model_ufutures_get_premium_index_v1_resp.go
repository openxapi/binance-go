/*
Binance Ufutures API

OpenAPI specification for Binance cryptocurrency exchange - Ufutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package umfutures

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UfuturesGetPremiumIndexV1Resp - struct for UfuturesGetPremiumIndexV1Resp
type UfuturesGetPremiumIndexV1Resp struct {
	UfuturesGetPremiumIndexV1RespItem *UfuturesGetPremiumIndexV1RespItem
	ArrayOfUfuturesGetPremiumIndexV1RespItem *[]UfuturesGetPremiumIndexV1RespItem
}

// UfuturesGetPremiumIndexV1RespItemAsUfuturesGetPremiumIndexV1Resp is a convenience function that returns UfuturesGetPremiumIndexV1RespItem wrapped in UfuturesGetPremiumIndexV1Resp
func UfuturesGetPremiumIndexV1RespItemAsUfuturesGetPremiumIndexV1Resp(v *UfuturesGetPremiumIndexV1RespItem) UfuturesGetPremiumIndexV1Resp {
	return UfuturesGetPremiumIndexV1Resp{
		UfuturesGetPremiumIndexV1RespItem: v,
	}
}

// []UfuturesGetPremiumIndexV1RespItemAsUfuturesGetPremiumIndexV1Resp is a convenience function that returns []UfuturesGetPremiumIndexV1RespItem wrapped in UfuturesGetPremiumIndexV1Resp
func ArrayOfUfuturesGetPremiumIndexV1RespItemAsUfuturesGetPremiumIndexV1Resp(v *[]UfuturesGetPremiumIndexV1RespItem) UfuturesGetPremiumIndexV1Resp {
	return UfuturesGetPremiumIndexV1Resp{
		ArrayOfUfuturesGetPremiumIndexV1RespItem: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UfuturesGetPremiumIndexV1Resp) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UfuturesGetPremiumIndexV1RespItem
	err = newStrictDecoder(data).Decode(&dst.UfuturesGetPremiumIndexV1RespItem)
	if err == nil {
		jsonUfuturesGetPremiumIndexV1RespItem, _ := json.Marshal(dst.UfuturesGetPremiumIndexV1RespItem)
		if string(jsonUfuturesGetPremiumIndexV1RespItem) == "{}" { // empty struct
			dst.UfuturesGetPremiumIndexV1RespItem = nil
		} else {
			if err = validator.Validate(dst.UfuturesGetPremiumIndexV1RespItem); err != nil {
				dst.UfuturesGetPremiumIndexV1RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.UfuturesGetPremiumIndexV1RespItem = nil
	}

	// try to unmarshal data into ArrayOfUfuturesGetPremiumIndexV1RespItem
	err = newStrictDecoder(data).Decode(&dst.ArrayOfUfuturesGetPremiumIndexV1RespItem)
	if err == nil {
		jsonArrayOfUfuturesGetPremiumIndexV1RespItem, _ := json.Marshal(dst.ArrayOfUfuturesGetPremiumIndexV1RespItem)
		if string(jsonArrayOfUfuturesGetPremiumIndexV1RespItem) == "{}" { // empty struct
			dst.ArrayOfUfuturesGetPremiumIndexV1RespItem = nil
		} else {
			if err = validator.Validate(dst.ArrayOfUfuturesGetPremiumIndexV1RespItem); err != nil {
				dst.ArrayOfUfuturesGetPremiumIndexV1RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfUfuturesGetPremiumIndexV1RespItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UfuturesGetPremiumIndexV1RespItem = nil
		dst.ArrayOfUfuturesGetPremiumIndexV1RespItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UfuturesGetPremiumIndexV1Resp)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UfuturesGetPremiumIndexV1Resp)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UfuturesGetPremiumIndexV1Resp) MarshalJSON() ([]byte, error) {
	if src.UfuturesGetPremiumIndexV1RespItem != nil {
		return json.Marshal(&src.UfuturesGetPremiumIndexV1RespItem)
	}

	if src.ArrayOfUfuturesGetPremiumIndexV1RespItem != nil {
		return json.Marshal(&src.ArrayOfUfuturesGetPremiumIndexV1RespItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UfuturesGetPremiumIndexV1Resp) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.UfuturesGetPremiumIndexV1RespItem != nil {
		return obj.UfuturesGetPremiumIndexV1RespItem
	}

	if obj.ArrayOfUfuturesGetPremiumIndexV1RespItem != nil {
		return obj.ArrayOfUfuturesGetPremiumIndexV1RespItem
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UfuturesGetPremiumIndexV1Resp) GetActualInstanceValue() (interface{}) {
	if obj.UfuturesGetPremiumIndexV1RespItem != nil {
		return *obj.UfuturesGetPremiumIndexV1RespItem
	}

	if obj.ArrayOfUfuturesGetPremiumIndexV1RespItem != nil {
		return *obj.ArrayOfUfuturesGetPremiumIndexV1RespItem
	}

	// all schemas are nil
	return nil
}

type NullableUfuturesGetPremiumIndexV1Resp struct {
	value *UfuturesGetPremiumIndexV1Resp
	isSet bool
}

func (v NullableUfuturesGetPremiumIndexV1Resp) Get() *UfuturesGetPremiumIndexV1Resp {
	return v.value
}

func (v *NullableUfuturesGetPremiumIndexV1Resp) Set(val *UfuturesGetPremiumIndexV1Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableUfuturesGetPremiumIndexV1Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableUfuturesGetPremiumIndexV1Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUfuturesGetPremiumIndexV1Resp(val *UfuturesGetPremiumIndexV1Resp) *NullableUfuturesGetPremiumIndexV1Resp {
	return &NullableUfuturesGetPremiumIndexV1Resp{value: val, isSet: true}
}

func (v NullableUfuturesGetPremiumIndexV1Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUfuturesGetPremiumIndexV1Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



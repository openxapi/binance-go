/*
Binance USD-M Futures API

OpenAPI specification for Binance exchange - Umfutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package umfutures

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem{}

// UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem struct for UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem
type UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem struct {
	ActivationPrice *string `json:"activationPrice,omitempty"`
	CallbackRate *string `json:"callbackRate,omitempty"`
	GoodTillDate *int64 `json:"goodTillDate,omitempty"`
	NewClientOrderId *string `json:"newClientOrderId,omitempty"`
	NewOrderRespType *string `json:"newOrderRespType,omitempty"`
	PositionSide *string `json:"positionSide,omitempty"`
	Price *string `json:"price,omitempty"`
	PriceMatch *string `json:"priceMatch,omitempty"`
	PriceProtect *string `json:"priceProtect,omitempty"`
	Quantity string `json:"quantity"`
	ReduceOnly *string `json:"reduceOnly,omitempty"`
	SelfTradePreventionMode *string `json:"selfTradePreventionMode,omitempty"`
	Side string `json:"side"`
	StopPrice *string `json:"stopPrice,omitempty"`
	Symbol string `json:"symbol"`
	TimeInForce *string `json:"timeInForce,omitempty"`
	Type string `json:"type"`
	WorkingType *string `json:"workingType,omitempty"`
}

type _UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem

// NewUmfuturesCreateBatchOrdersV1ReqBatchOrdersItem instantiates a new UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUmfuturesCreateBatchOrdersV1ReqBatchOrdersItem(quantity string, side string, symbol string, type_ string) *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem {
	this := UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem{}
	var activationPrice string = ""
	this.ActivationPrice = &activationPrice
	var callbackRate string = ""
	this.CallbackRate = &callbackRate
	var newClientOrderId string = ""
	this.NewClientOrderId = &newClientOrderId
	var newOrderRespType string = ""
	this.NewOrderRespType = &newOrderRespType
	var positionSide string = ""
	this.PositionSide = &positionSide
	var price string = ""
	this.Price = &price
	var priceMatch string = ""
	this.PriceMatch = &priceMatch
	var priceProtect string = ""
	this.PriceProtect = &priceProtect
	this.Quantity = quantity
	var reduceOnly string = ""
	this.ReduceOnly = &reduceOnly
	var selfTradePreventionMode string = ""
	this.SelfTradePreventionMode = &selfTradePreventionMode
	this.Side = side
	var stopPrice string = ""
	this.StopPrice = &stopPrice
	this.Symbol = symbol
	var timeInForce string = ""
	this.TimeInForce = &timeInForce
	this.Type = type_
	var workingType string = ""
	this.WorkingType = &workingType
	return &this
}

// NewUmfuturesCreateBatchOrdersV1ReqBatchOrdersItemWithDefaults instantiates a new UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUmfuturesCreateBatchOrdersV1ReqBatchOrdersItemWithDefaults() *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem {
	this := UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem{}
	var activationPrice string = ""
	this.ActivationPrice = &activationPrice
	var callbackRate string = ""
	this.CallbackRate = &callbackRate
	var newClientOrderId string = ""
	this.NewClientOrderId = &newClientOrderId
	var newOrderRespType string = ""
	this.NewOrderRespType = &newOrderRespType
	var positionSide string = ""
	this.PositionSide = &positionSide
	var price string = ""
	this.Price = &price
	var priceMatch string = ""
	this.PriceMatch = &priceMatch
	var priceProtect string = ""
	this.PriceProtect = &priceProtect
	var quantity string = ""
	this.Quantity = quantity
	var reduceOnly string = ""
	this.ReduceOnly = &reduceOnly
	var selfTradePreventionMode string = ""
	this.SelfTradePreventionMode = &selfTradePreventionMode
	var side string = ""
	this.Side = side
	var stopPrice string = ""
	this.StopPrice = &stopPrice
	var symbol string = ""
	this.Symbol = symbol
	var timeInForce string = ""
	this.TimeInForce = &timeInForce
	var type_ string = ""
	this.Type = type_
	var workingType string = ""
	this.WorkingType = &workingType
	return &this
}

// GetActivationPrice returns the ActivationPrice field value if set, zero value otherwise.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetActivationPrice() string {
	if o == nil || IsNil(o.ActivationPrice) {
		var ret string
		return ret
	}
	return *o.ActivationPrice
}

// GetActivationPriceOk returns a tuple with the ActivationPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetActivationPriceOk() (*string, bool) {
	if o == nil || IsNil(o.ActivationPrice) {
		return nil, false
	}
	return o.ActivationPrice, true
}

// HasActivationPrice returns a boolean if a field has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) HasActivationPrice() bool {
	if o != nil && !IsNil(o.ActivationPrice) {
		return true
	}

	return false
}

// SetActivationPrice gets a reference to the given string and assigns it to the ActivationPrice field.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) SetActivationPrice(v string) {
	o.ActivationPrice = &v
}

// GetCallbackRate returns the CallbackRate field value if set, zero value otherwise.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetCallbackRate() string {
	if o == nil || IsNil(o.CallbackRate) {
		var ret string
		return ret
	}
	return *o.CallbackRate
}

// GetCallbackRateOk returns a tuple with the CallbackRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetCallbackRateOk() (*string, bool) {
	if o == nil || IsNil(o.CallbackRate) {
		return nil, false
	}
	return o.CallbackRate, true
}

// HasCallbackRate returns a boolean if a field has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) HasCallbackRate() bool {
	if o != nil && !IsNil(o.CallbackRate) {
		return true
	}

	return false
}

// SetCallbackRate gets a reference to the given string and assigns it to the CallbackRate field.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) SetCallbackRate(v string) {
	o.CallbackRate = &v
}

// GetGoodTillDate returns the GoodTillDate field value if set, zero value otherwise.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetGoodTillDate() int64 {
	if o == nil || IsNil(o.GoodTillDate) {
		var ret int64
		return ret
	}
	return *o.GoodTillDate
}

// GetGoodTillDateOk returns a tuple with the GoodTillDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetGoodTillDateOk() (*int64, bool) {
	if o == nil || IsNil(o.GoodTillDate) {
		return nil, false
	}
	return o.GoodTillDate, true
}

// HasGoodTillDate returns a boolean if a field has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) HasGoodTillDate() bool {
	if o != nil && !IsNil(o.GoodTillDate) {
		return true
	}

	return false
}

// SetGoodTillDate gets a reference to the given int64 and assigns it to the GoodTillDate field.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) SetGoodTillDate(v int64) {
	o.GoodTillDate = &v
}

// GetNewClientOrderId returns the NewClientOrderId field value if set, zero value otherwise.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetNewClientOrderId() string {
	if o == nil || IsNil(o.NewClientOrderId) {
		var ret string
		return ret
	}
	return *o.NewClientOrderId
}

// GetNewClientOrderIdOk returns a tuple with the NewClientOrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetNewClientOrderIdOk() (*string, bool) {
	if o == nil || IsNil(o.NewClientOrderId) {
		return nil, false
	}
	return o.NewClientOrderId, true
}

// HasNewClientOrderId returns a boolean if a field has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) HasNewClientOrderId() bool {
	if o != nil && !IsNil(o.NewClientOrderId) {
		return true
	}

	return false
}

// SetNewClientOrderId gets a reference to the given string and assigns it to the NewClientOrderId field.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) SetNewClientOrderId(v string) {
	o.NewClientOrderId = &v
}

// GetNewOrderRespType returns the NewOrderRespType field value if set, zero value otherwise.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetNewOrderRespType() string {
	if o == nil || IsNil(o.NewOrderRespType) {
		var ret string
		return ret
	}
	return *o.NewOrderRespType
}

// GetNewOrderRespTypeOk returns a tuple with the NewOrderRespType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetNewOrderRespTypeOk() (*string, bool) {
	if o == nil || IsNil(o.NewOrderRespType) {
		return nil, false
	}
	return o.NewOrderRespType, true
}

// HasNewOrderRespType returns a boolean if a field has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) HasNewOrderRespType() bool {
	if o != nil && !IsNil(o.NewOrderRespType) {
		return true
	}

	return false
}

// SetNewOrderRespType gets a reference to the given string and assigns it to the NewOrderRespType field.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) SetNewOrderRespType(v string) {
	o.NewOrderRespType = &v
}

// GetPositionSide returns the PositionSide field value if set, zero value otherwise.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetPositionSide() string {
	if o == nil || IsNil(o.PositionSide) {
		var ret string
		return ret
	}
	return *o.PositionSide
}

// GetPositionSideOk returns a tuple with the PositionSide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetPositionSideOk() (*string, bool) {
	if o == nil || IsNil(o.PositionSide) {
		return nil, false
	}
	return o.PositionSide, true
}

// HasPositionSide returns a boolean if a field has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) HasPositionSide() bool {
	if o != nil && !IsNil(o.PositionSide) {
		return true
	}

	return false
}

// SetPositionSide gets a reference to the given string and assigns it to the PositionSide field.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) SetPositionSide(v string) {
	o.PositionSide = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetPrice() string {
	if o == nil || IsNil(o.Price) {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetPriceOk() (*string, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) SetPrice(v string) {
	o.Price = &v
}

// GetPriceMatch returns the PriceMatch field value if set, zero value otherwise.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetPriceMatch() string {
	if o == nil || IsNil(o.PriceMatch) {
		var ret string
		return ret
	}
	return *o.PriceMatch
}

// GetPriceMatchOk returns a tuple with the PriceMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetPriceMatchOk() (*string, bool) {
	if o == nil || IsNil(o.PriceMatch) {
		return nil, false
	}
	return o.PriceMatch, true
}

// HasPriceMatch returns a boolean if a field has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) HasPriceMatch() bool {
	if o != nil && !IsNil(o.PriceMatch) {
		return true
	}

	return false
}

// SetPriceMatch gets a reference to the given string and assigns it to the PriceMatch field.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) SetPriceMatch(v string) {
	o.PriceMatch = &v
}

// GetPriceProtect returns the PriceProtect field value if set, zero value otherwise.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetPriceProtect() string {
	if o == nil || IsNil(o.PriceProtect) {
		var ret string
		return ret
	}
	return *o.PriceProtect
}

// GetPriceProtectOk returns a tuple with the PriceProtect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetPriceProtectOk() (*string, bool) {
	if o == nil || IsNil(o.PriceProtect) {
		return nil, false
	}
	return o.PriceProtect, true
}

// HasPriceProtect returns a boolean if a field has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) HasPriceProtect() bool {
	if o != nil && !IsNil(o.PriceProtect) {
		return true
	}

	return false
}

// SetPriceProtect gets a reference to the given string and assigns it to the PriceProtect field.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) SetPriceProtect(v string) {
	o.PriceProtect = &v
}

// GetQuantity returns the Quantity field value
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetQuantity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetQuantityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) SetQuantity(v string) {
	o.Quantity = v
}

// GetReduceOnly returns the ReduceOnly field value if set, zero value otherwise.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetReduceOnly() string {
	if o == nil || IsNil(o.ReduceOnly) {
		var ret string
		return ret
	}
	return *o.ReduceOnly
}

// GetReduceOnlyOk returns a tuple with the ReduceOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetReduceOnlyOk() (*string, bool) {
	if o == nil || IsNil(o.ReduceOnly) {
		return nil, false
	}
	return o.ReduceOnly, true
}

// HasReduceOnly returns a boolean if a field has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) HasReduceOnly() bool {
	if o != nil && !IsNil(o.ReduceOnly) {
		return true
	}

	return false
}

// SetReduceOnly gets a reference to the given string and assigns it to the ReduceOnly field.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) SetReduceOnly(v string) {
	o.ReduceOnly = &v
}

// GetSelfTradePreventionMode returns the SelfTradePreventionMode field value if set, zero value otherwise.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetSelfTradePreventionMode() string {
	if o == nil || IsNil(o.SelfTradePreventionMode) {
		var ret string
		return ret
	}
	return *o.SelfTradePreventionMode
}

// GetSelfTradePreventionModeOk returns a tuple with the SelfTradePreventionMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetSelfTradePreventionModeOk() (*string, bool) {
	if o == nil || IsNil(o.SelfTradePreventionMode) {
		return nil, false
	}
	return o.SelfTradePreventionMode, true
}

// HasSelfTradePreventionMode returns a boolean if a field has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) HasSelfTradePreventionMode() bool {
	if o != nil && !IsNil(o.SelfTradePreventionMode) {
		return true
	}

	return false
}

// SetSelfTradePreventionMode gets a reference to the given string and assigns it to the SelfTradePreventionMode field.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) SetSelfTradePreventionMode(v string) {
	o.SelfTradePreventionMode = &v
}

// GetSide returns the Side field value
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetSide() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Side
}

// GetSideOk returns a tuple with the Side field value
// and a boolean to check if the value has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetSideOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Side, true
}

// SetSide sets field value
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) SetSide(v string) {
	o.Side = v
}

// GetStopPrice returns the StopPrice field value if set, zero value otherwise.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetStopPrice() string {
	if o == nil || IsNil(o.StopPrice) {
		var ret string
		return ret
	}
	return *o.StopPrice
}

// GetStopPriceOk returns a tuple with the StopPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetStopPriceOk() (*string, bool) {
	if o == nil || IsNil(o.StopPrice) {
		return nil, false
	}
	return o.StopPrice, true
}

// HasStopPrice returns a boolean if a field has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) HasStopPrice() bool {
	if o != nil && !IsNil(o.StopPrice) {
		return true
	}

	return false
}

// SetStopPrice gets a reference to the given string and assigns it to the StopPrice field.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) SetStopPrice(v string) {
	o.StopPrice = &v
}

// GetSymbol returns the Symbol field value
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) SetSymbol(v string) {
	o.Symbol = v
}

// GetTimeInForce returns the TimeInForce field value if set, zero value otherwise.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetTimeInForce() string {
	if o == nil || IsNil(o.TimeInForce) {
		var ret string
		return ret
	}
	return *o.TimeInForce
}

// GetTimeInForceOk returns a tuple with the TimeInForce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetTimeInForceOk() (*string, bool) {
	if o == nil || IsNil(o.TimeInForce) {
		return nil, false
	}
	return o.TimeInForce, true
}

// HasTimeInForce returns a boolean if a field has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) HasTimeInForce() bool {
	if o != nil && !IsNil(o.TimeInForce) {
		return true
	}

	return false
}

// SetTimeInForce gets a reference to the given string and assigns it to the TimeInForce field.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) SetTimeInForce(v string) {
	o.TimeInForce = &v
}

// GetType returns the Type field value
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) SetType(v string) {
	o.Type = v
}

// GetWorkingType returns the WorkingType field value if set, zero value otherwise.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetWorkingType() string {
	if o == nil || IsNil(o.WorkingType) {
		var ret string
		return ret
	}
	return *o.WorkingType
}

// GetWorkingTypeOk returns a tuple with the WorkingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) GetWorkingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.WorkingType) {
		return nil, false
	}
	return o.WorkingType, true
}

// HasWorkingType returns a boolean if a field has been set.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) HasWorkingType() bool {
	if o != nil && !IsNil(o.WorkingType) {
		return true
	}

	return false
}

// SetWorkingType gets a reference to the given string and assigns it to the WorkingType field.
func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) SetWorkingType(v string) {
	o.WorkingType = &v
}

func (o UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActivationPrice) {
		toSerialize["activationPrice"] = o.ActivationPrice
	}
	if !IsNil(o.CallbackRate) {
		toSerialize["callbackRate"] = o.CallbackRate
	}
	if !IsNil(o.GoodTillDate) {
		toSerialize["goodTillDate"] = o.GoodTillDate
	}
	if !IsNil(o.NewClientOrderId) {
		toSerialize["newClientOrderId"] = o.NewClientOrderId
	}
	if !IsNil(o.NewOrderRespType) {
		toSerialize["newOrderRespType"] = o.NewOrderRespType
	}
	if !IsNil(o.PositionSide) {
		toSerialize["positionSide"] = o.PositionSide
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.PriceMatch) {
		toSerialize["priceMatch"] = o.PriceMatch
	}
	if !IsNil(o.PriceProtect) {
		toSerialize["priceProtect"] = o.PriceProtect
	}
	toSerialize["quantity"] = o.Quantity
	if !IsNil(o.ReduceOnly) {
		toSerialize["reduceOnly"] = o.ReduceOnly
	}
	if !IsNil(o.SelfTradePreventionMode) {
		toSerialize["selfTradePreventionMode"] = o.SelfTradePreventionMode
	}
	toSerialize["side"] = o.Side
	if !IsNil(o.StopPrice) {
		toSerialize["stopPrice"] = o.StopPrice
	}
	toSerialize["symbol"] = o.Symbol
	if !IsNil(o.TimeInForce) {
		toSerialize["timeInForce"] = o.TimeInForce
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.WorkingType) {
		toSerialize["workingType"] = o.WorkingType
	}
	return toSerialize, nil
}

func (o *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quantity",
		"side",
		"symbol",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUmfuturesCreateBatchOrdersV1ReqBatchOrdersItem := _UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUmfuturesCreateBatchOrdersV1ReqBatchOrdersItem)

	if err != nil {
		return err
	}

	*o = UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem(varUmfuturesCreateBatchOrdersV1ReqBatchOrdersItem)

	return err
}

type NullableUmfuturesCreateBatchOrdersV1ReqBatchOrdersItem struct {
	value *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem
	isSet bool
}

func (v NullableUmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) Get() *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem {
	return v.value
}

func (v *NullableUmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) Set(val *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) {
	v.value = val
	v.isSet = true
}

func (v NullableUmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) IsSet() bool {
	return v.isSet
}

func (v *NullableUmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUmfuturesCreateBatchOrdersV1ReqBatchOrdersItem(val *UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) *NullableUmfuturesCreateBatchOrdersV1ReqBatchOrdersItem {
	return &NullableUmfuturesCreateBatchOrdersV1ReqBatchOrdersItem{value: val, isSet: true}
}

func (v NullableUmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUmfuturesCreateBatchOrdersV1ReqBatchOrdersItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



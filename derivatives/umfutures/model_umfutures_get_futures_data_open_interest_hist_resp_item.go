/*
Binance USD-M Futures API

OpenAPI specification for Binance exchange - Umfutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package umfutures

import (
	"encoding/json"
)

// checks if the UmfuturesGetFuturesDataOpenInterestHistRespItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UmfuturesGetFuturesDataOpenInterestHistRespItem{}

// UmfuturesGetFuturesDataOpenInterestHistRespItem struct for UmfuturesGetFuturesDataOpenInterestHistRespItem
type UmfuturesGetFuturesDataOpenInterestHistRespItem struct {
	SumOpenInterest *string `json:"sumOpenInterest,omitempty"`
	SumOpenInterestValue *string `json:"sumOpenInterestValue,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
}

// NewUmfuturesGetFuturesDataOpenInterestHistRespItem instantiates a new UmfuturesGetFuturesDataOpenInterestHistRespItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUmfuturesGetFuturesDataOpenInterestHistRespItem() *UmfuturesGetFuturesDataOpenInterestHistRespItem {
	this := UmfuturesGetFuturesDataOpenInterestHistRespItem{}
	return &this
}

// NewUmfuturesGetFuturesDataOpenInterestHistRespItemWithDefaults instantiates a new UmfuturesGetFuturesDataOpenInterestHistRespItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUmfuturesGetFuturesDataOpenInterestHistRespItemWithDefaults() *UmfuturesGetFuturesDataOpenInterestHistRespItem {
	this := UmfuturesGetFuturesDataOpenInterestHistRespItem{}
	return &this
}

// GetSumOpenInterest returns the SumOpenInterest field value if set, zero value otherwise.
func (o *UmfuturesGetFuturesDataOpenInterestHistRespItem) GetSumOpenInterest() string {
	if o == nil || IsNil(o.SumOpenInterest) {
		var ret string
		return ret
	}
	return *o.SumOpenInterest
}

// GetSumOpenInterestOk returns a tuple with the SumOpenInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesGetFuturesDataOpenInterestHistRespItem) GetSumOpenInterestOk() (*string, bool) {
	if o == nil || IsNil(o.SumOpenInterest) {
		return nil, false
	}
	return o.SumOpenInterest, true
}

// HasSumOpenInterest returns a boolean if a field has been set.
func (o *UmfuturesGetFuturesDataOpenInterestHistRespItem) HasSumOpenInterest() bool {
	if o != nil && !IsNil(o.SumOpenInterest) {
		return true
	}

	return false
}

// SetSumOpenInterest gets a reference to the given string and assigns it to the SumOpenInterest field.
func (o *UmfuturesGetFuturesDataOpenInterestHistRespItem) SetSumOpenInterest(v string) {
	o.SumOpenInterest = &v
}

// GetSumOpenInterestValue returns the SumOpenInterestValue field value if set, zero value otherwise.
func (o *UmfuturesGetFuturesDataOpenInterestHistRespItem) GetSumOpenInterestValue() string {
	if o == nil || IsNil(o.SumOpenInterestValue) {
		var ret string
		return ret
	}
	return *o.SumOpenInterestValue
}

// GetSumOpenInterestValueOk returns a tuple with the SumOpenInterestValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesGetFuturesDataOpenInterestHistRespItem) GetSumOpenInterestValueOk() (*string, bool) {
	if o == nil || IsNil(o.SumOpenInterestValue) {
		return nil, false
	}
	return o.SumOpenInterestValue, true
}

// HasSumOpenInterestValue returns a boolean if a field has been set.
func (o *UmfuturesGetFuturesDataOpenInterestHistRespItem) HasSumOpenInterestValue() bool {
	if o != nil && !IsNil(o.SumOpenInterestValue) {
		return true
	}

	return false
}

// SetSumOpenInterestValue gets a reference to the given string and assigns it to the SumOpenInterestValue field.
func (o *UmfuturesGetFuturesDataOpenInterestHistRespItem) SetSumOpenInterestValue(v string) {
	o.SumOpenInterestValue = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *UmfuturesGetFuturesDataOpenInterestHistRespItem) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesGetFuturesDataOpenInterestHistRespItem) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *UmfuturesGetFuturesDataOpenInterestHistRespItem) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *UmfuturesGetFuturesDataOpenInterestHistRespItem) SetSymbol(v string) {
	o.Symbol = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *UmfuturesGetFuturesDataOpenInterestHistRespItem) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp) {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesGetFuturesDataOpenInterestHistRespItem) GetTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *UmfuturesGetFuturesDataOpenInterestHistRespItem) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *UmfuturesGetFuturesDataOpenInterestHistRespItem) SetTimestamp(v string) {
	o.Timestamp = &v
}

func (o UmfuturesGetFuturesDataOpenInterestHistRespItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UmfuturesGetFuturesDataOpenInterestHistRespItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SumOpenInterest) {
		toSerialize["sumOpenInterest"] = o.SumOpenInterest
	}
	if !IsNil(o.SumOpenInterestValue) {
		toSerialize["sumOpenInterestValue"] = o.SumOpenInterestValue
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

type NullableUmfuturesGetFuturesDataOpenInterestHistRespItem struct {
	value *UmfuturesGetFuturesDataOpenInterestHistRespItem
	isSet bool
}

func (v NullableUmfuturesGetFuturesDataOpenInterestHistRespItem) Get() *UmfuturesGetFuturesDataOpenInterestHistRespItem {
	return v.value
}

func (v *NullableUmfuturesGetFuturesDataOpenInterestHistRespItem) Set(val *UmfuturesGetFuturesDataOpenInterestHistRespItem) {
	v.value = val
	v.isSet = true
}

func (v NullableUmfuturesGetFuturesDataOpenInterestHistRespItem) IsSet() bool {
	return v.isSet
}

func (v *NullableUmfuturesGetFuturesDataOpenInterestHistRespItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUmfuturesGetFuturesDataOpenInterestHistRespItem(val *UmfuturesGetFuturesDataOpenInterestHistRespItem) *NullableUmfuturesGetFuturesDataOpenInterestHistRespItem {
	return &NullableUmfuturesGetFuturesDataOpenInterestHistRespItem{value: val, isSet: true}
}

func (v NullableUmfuturesGetFuturesDataOpenInterestHistRespItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUmfuturesGetFuturesDataOpenInterestHistRespItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



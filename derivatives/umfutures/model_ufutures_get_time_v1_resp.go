/*
Binance Ufutures API

OpenAPI specification for Binance cryptocurrency exchange - Ufutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package umfutures

import (
	"encoding/json"
)

// checks if the UfuturesGetTimeV1Resp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UfuturesGetTimeV1Resp{}

// UfuturesGetTimeV1Resp struct for UfuturesGetTimeV1Resp
type UfuturesGetTimeV1Resp struct {
	ServerTime *int64 `json:"serverTime,omitempty"`
}

// NewUfuturesGetTimeV1Resp instantiates a new UfuturesGetTimeV1Resp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUfuturesGetTimeV1Resp() *UfuturesGetTimeV1Resp {
	this := UfuturesGetTimeV1Resp{}
	return &this
}

// NewUfuturesGetTimeV1RespWithDefaults instantiates a new UfuturesGetTimeV1Resp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUfuturesGetTimeV1RespWithDefaults() *UfuturesGetTimeV1Resp {
	this := UfuturesGetTimeV1Resp{}
	return &this
}

// GetServerTime returns the ServerTime field value if set, zero value otherwise.
func (o *UfuturesGetTimeV1Resp) GetServerTime() int64 {
	if o == nil || IsNil(o.ServerTime) {
		var ret int64
		return ret
	}
	return *o.ServerTime
}

// GetServerTimeOk returns a tuple with the ServerTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UfuturesGetTimeV1Resp) GetServerTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.ServerTime) {
		return nil, false
	}
	return o.ServerTime, true
}

// HasServerTime returns a boolean if a field has been set.
func (o *UfuturesGetTimeV1Resp) HasServerTime() bool {
	if o != nil && !IsNil(o.ServerTime) {
		return true
	}

	return false
}

// SetServerTime gets a reference to the given int64 and assigns it to the ServerTime field.
func (o *UfuturesGetTimeV1Resp) SetServerTime(v int64) {
	o.ServerTime = &v
}

func (o UfuturesGetTimeV1Resp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UfuturesGetTimeV1Resp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServerTime) {
		toSerialize["serverTime"] = o.ServerTime
	}
	return toSerialize, nil
}

type NullableUfuturesGetTimeV1Resp struct {
	value *UfuturesGetTimeV1Resp
	isSet bool
}

func (v NullableUfuturesGetTimeV1Resp) Get() *UfuturesGetTimeV1Resp {
	return v.value
}

func (v *NullableUfuturesGetTimeV1Resp) Set(val *UfuturesGetTimeV1Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableUfuturesGetTimeV1Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableUfuturesGetTimeV1Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUfuturesGetTimeV1Resp(val *UfuturesGetTimeV1Resp) *NullableUfuturesGetTimeV1Resp {
	return &NullableUfuturesGetTimeV1Resp{value: val, isSet: true}
}

func (v NullableUfuturesGetTimeV1Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUfuturesGetTimeV1Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Binance USD-M Futures API

OpenAPI specification for Binance exchange - Umfutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package umfutures

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UmfuturesGetLeverageBracketV1Resp - struct for UmfuturesGetLeverageBracketV1Resp
type UmfuturesGetLeverageBracketV1Resp struct {
	UmfuturesGetLeverageBracketV1RespItem *UmfuturesGetLeverageBracketV1RespItem
	ArrayOfUmfuturesGetLeverageBracketV1RespItem *[]UmfuturesGetLeverageBracketV1RespItem
}

// UmfuturesGetLeverageBracketV1RespItemAsUmfuturesGetLeverageBracketV1Resp is a convenience function that returns UmfuturesGetLeverageBracketV1RespItem wrapped in UmfuturesGetLeverageBracketV1Resp
func UmfuturesGetLeverageBracketV1RespItemAsUmfuturesGetLeverageBracketV1Resp(v *UmfuturesGetLeverageBracketV1RespItem) UmfuturesGetLeverageBracketV1Resp {
	return UmfuturesGetLeverageBracketV1Resp{
		UmfuturesGetLeverageBracketV1RespItem: v,
	}
}

// []UmfuturesGetLeverageBracketV1RespItemAsUmfuturesGetLeverageBracketV1Resp is a convenience function that returns []UmfuturesGetLeverageBracketV1RespItem wrapped in UmfuturesGetLeverageBracketV1Resp
func ArrayOfUmfuturesGetLeverageBracketV1RespItemAsUmfuturesGetLeverageBracketV1Resp(v *[]UmfuturesGetLeverageBracketV1RespItem) UmfuturesGetLeverageBracketV1Resp {
	return UmfuturesGetLeverageBracketV1Resp{
		ArrayOfUmfuturesGetLeverageBracketV1RespItem: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UmfuturesGetLeverageBracketV1Resp) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UmfuturesGetLeverageBracketV1RespItem
	err = newStrictDecoder(data).Decode(&dst.UmfuturesGetLeverageBracketV1RespItem)
	if err == nil {
		jsonUmfuturesGetLeverageBracketV1RespItem, _ := json.Marshal(dst.UmfuturesGetLeverageBracketV1RespItem)
		if string(jsonUmfuturesGetLeverageBracketV1RespItem) == "{}" { // empty struct
			dst.UmfuturesGetLeverageBracketV1RespItem = nil
		} else {
			if err = validator.Validate(dst.UmfuturesGetLeverageBracketV1RespItem); err != nil {
				dst.UmfuturesGetLeverageBracketV1RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.UmfuturesGetLeverageBracketV1RespItem = nil
	}

	// try to unmarshal data into ArrayOfUmfuturesGetLeverageBracketV1RespItem
	err = newStrictDecoder(data).Decode(&dst.ArrayOfUmfuturesGetLeverageBracketV1RespItem)
	if err == nil {
		jsonArrayOfUmfuturesGetLeverageBracketV1RespItem, _ := json.Marshal(dst.ArrayOfUmfuturesGetLeverageBracketV1RespItem)
		if string(jsonArrayOfUmfuturesGetLeverageBracketV1RespItem) == "{}" { // empty struct
			dst.ArrayOfUmfuturesGetLeverageBracketV1RespItem = nil
		} else {
			if err = validator.Validate(dst.ArrayOfUmfuturesGetLeverageBracketV1RespItem); err != nil {
				dst.ArrayOfUmfuturesGetLeverageBracketV1RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfUmfuturesGetLeverageBracketV1RespItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UmfuturesGetLeverageBracketV1RespItem = nil
		dst.ArrayOfUmfuturesGetLeverageBracketV1RespItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UmfuturesGetLeverageBracketV1Resp)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UmfuturesGetLeverageBracketV1Resp)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UmfuturesGetLeverageBracketV1Resp) MarshalJSON() ([]byte, error) {
	if src.UmfuturesGetLeverageBracketV1RespItem != nil {
		return json.Marshal(&src.UmfuturesGetLeverageBracketV1RespItem)
	}

	if src.ArrayOfUmfuturesGetLeverageBracketV1RespItem != nil {
		return json.Marshal(&src.ArrayOfUmfuturesGetLeverageBracketV1RespItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UmfuturesGetLeverageBracketV1Resp) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.UmfuturesGetLeverageBracketV1RespItem != nil {
		return obj.UmfuturesGetLeverageBracketV1RespItem
	}

	if obj.ArrayOfUmfuturesGetLeverageBracketV1RespItem != nil {
		return obj.ArrayOfUmfuturesGetLeverageBracketV1RespItem
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UmfuturesGetLeverageBracketV1Resp) GetActualInstanceValue() (interface{}) {
	if obj.UmfuturesGetLeverageBracketV1RespItem != nil {
		return *obj.UmfuturesGetLeverageBracketV1RespItem
	}

	if obj.ArrayOfUmfuturesGetLeverageBracketV1RespItem != nil {
		return *obj.ArrayOfUmfuturesGetLeverageBracketV1RespItem
	}

	// all schemas are nil
	return nil
}

type NullableUmfuturesGetLeverageBracketV1Resp struct {
	value *UmfuturesGetLeverageBracketV1Resp
	isSet bool
}

func (v NullableUmfuturesGetLeverageBracketV1Resp) Get() *UmfuturesGetLeverageBracketV1Resp {
	return v.value
}

func (v *NullableUmfuturesGetLeverageBracketV1Resp) Set(val *UmfuturesGetLeverageBracketV1Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableUmfuturesGetLeverageBracketV1Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableUmfuturesGetLeverageBracketV1Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUmfuturesGetLeverageBracketV1Resp(val *UmfuturesGetLeverageBracketV1Resp) *NullableUmfuturesGetLeverageBracketV1Resp {
	return &NullableUmfuturesGetLeverageBracketV1Resp{value: val, isSet: true}
}

func (v NullableUmfuturesGetLeverageBracketV1Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUmfuturesGetLeverageBracketV1Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



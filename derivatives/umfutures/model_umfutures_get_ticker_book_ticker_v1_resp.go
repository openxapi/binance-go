/*
Binance Umfutures API

OpenAPI specification for Binance cryptocurrency exchange - Umfutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package umfutures

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UmfuturesGetTickerBookTickerV1Resp - struct for UmfuturesGetTickerBookTickerV1Resp
type UmfuturesGetTickerBookTickerV1Resp struct {
	UmfuturesGetTickerBookTickerV1RespItem *UmfuturesGetTickerBookTickerV1RespItem
	ArrayOfUmfuturesGetTickerBookTickerV1RespItem *[]UmfuturesGetTickerBookTickerV1RespItem
}

// UmfuturesGetTickerBookTickerV1RespItemAsUmfuturesGetTickerBookTickerV1Resp is a convenience function that returns UmfuturesGetTickerBookTickerV1RespItem wrapped in UmfuturesGetTickerBookTickerV1Resp
func UmfuturesGetTickerBookTickerV1RespItemAsUmfuturesGetTickerBookTickerV1Resp(v *UmfuturesGetTickerBookTickerV1RespItem) UmfuturesGetTickerBookTickerV1Resp {
	return UmfuturesGetTickerBookTickerV1Resp{
		UmfuturesGetTickerBookTickerV1RespItem: v,
	}
}

// []UmfuturesGetTickerBookTickerV1RespItemAsUmfuturesGetTickerBookTickerV1Resp is a convenience function that returns []UmfuturesGetTickerBookTickerV1RespItem wrapped in UmfuturesGetTickerBookTickerV1Resp
func ArrayOfUmfuturesGetTickerBookTickerV1RespItemAsUmfuturesGetTickerBookTickerV1Resp(v *[]UmfuturesGetTickerBookTickerV1RespItem) UmfuturesGetTickerBookTickerV1Resp {
	return UmfuturesGetTickerBookTickerV1Resp{
		ArrayOfUmfuturesGetTickerBookTickerV1RespItem: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UmfuturesGetTickerBookTickerV1Resp) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UmfuturesGetTickerBookTickerV1RespItem
	err = newStrictDecoder(data).Decode(&dst.UmfuturesGetTickerBookTickerV1RespItem)
	if err == nil {
		jsonUmfuturesGetTickerBookTickerV1RespItem, _ := json.Marshal(dst.UmfuturesGetTickerBookTickerV1RespItem)
		if string(jsonUmfuturesGetTickerBookTickerV1RespItem) == "{}" { // empty struct
			dst.UmfuturesGetTickerBookTickerV1RespItem = nil
		} else {
			if err = validator.Validate(dst.UmfuturesGetTickerBookTickerV1RespItem); err != nil {
				dst.UmfuturesGetTickerBookTickerV1RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.UmfuturesGetTickerBookTickerV1RespItem = nil
	}

	// try to unmarshal data into ArrayOfUmfuturesGetTickerBookTickerV1RespItem
	err = newStrictDecoder(data).Decode(&dst.ArrayOfUmfuturesGetTickerBookTickerV1RespItem)
	if err == nil {
		jsonArrayOfUmfuturesGetTickerBookTickerV1RespItem, _ := json.Marshal(dst.ArrayOfUmfuturesGetTickerBookTickerV1RespItem)
		if string(jsonArrayOfUmfuturesGetTickerBookTickerV1RespItem) == "{}" { // empty struct
			dst.ArrayOfUmfuturesGetTickerBookTickerV1RespItem = nil
		} else {
			if err = validator.Validate(dst.ArrayOfUmfuturesGetTickerBookTickerV1RespItem); err != nil {
				dst.ArrayOfUmfuturesGetTickerBookTickerV1RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfUmfuturesGetTickerBookTickerV1RespItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UmfuturesGetTickerBookTickerV1RespItem = nil
		dst.ArrayOfUmfuturesGetTickerBookTickerV1RespItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UmfuturesGetTickerBookTickerV1Resp)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UmfuturesGetTickerBookTickerV1Resp)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UmfuturesGetTickerBookTickerV1Resp) MarshalJSON() ([]byte, error) {
	if src.UmfuturesGetTickerBookTickerV1RespItem != nil {
		return json.Marshal(&src.UmfuturesGetTickerBookTickerV1RespItem)
	}

	if src.ArrayOfUmfuturesGetTickerBookTickerV1RespItem != nil {
		return json.Marshal(&src.ArrayOfUmfuturesGetTickerBookTickerV1RespItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UmfuturesGetTickerBookTickerV1Resp) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.UmfuturesGetTickerBookTickerV1RespItem != nil {
		return obj.UmfuturesGetTickerBookTickerV1RespItem
	}

	if obj.ArrayOfUmfuturesGetTickerBookTickerV1RespItem != nil {
		return obj.ArrayOfUmfuturesGetTickerBookTickerV1RespItem
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UmfuturesGetTickerBookTickerV1Resp) GetActualInstanceValue() (interface{}) {
	if obj.UmfuturesGetTickerBookTickerV1RespItem != nil {
		return *obj.UmfuturesGetTickerBookTickerV1RespItem
	}

	if obj.ArrayOfUmfuturesGetTickerBookTickerV1RespItem != nil {
		return *obj.ArrayOfUmfuturesGetTickerBookTickerV1RespItem
	}

	// all schemas are nil
	return nil
}

type NullableUmfuturesGetTickerBookTickerV1Resp struct {
	value *UmfuturesGetTickerBookTickerV1Resp
	isSet bool
}

func (v NullableUmfuturesGetTickerBookTickerV1Resp) Get() *UmfuturesGetTickerBookTickerV1Resp {
	return v.value
}

func (v *NullableUmfuturesGetTickerBookTickerV1Resp) Set(val *UmfuturesGetTickerBookTickerV1Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableUmfuturesGetTickerBookTickerV1Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableUmfuturesGetTickerBookTickerV1Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUmfuturesGetTickerBookTickerV1Resp(val *UmfuturesGetTickerBookTickerV1Resp) *NullableUmfuturesGetTickerBookTickerV1Resp {
	return &NullableUmfuturesGetTickerBookTickerV1Resp{value: val, isSet: true}
}

func (v NullableUmfuturesGetTickerBookTickerV1Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUmfuturesGetTickerBookTickerV1Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



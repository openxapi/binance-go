/*
Binance Umfutures API

OpenAPI specification for Binance cryptocurrency exchange - Umfutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package umfutures

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// ConvertAPIService ConvertAPI service
type ConvertAPIService service

type ConvertAPIUmfuturesCreateConvertAcceptQuoteV1Request struct {
	ctx context.Context
	ApiService *ConvertAPIService
	quoteId *string
	timestamp *int64
	recvWindow *int64
}

func (r ConvertAPIUmfuturesCreateConvertAcceptQuoteV1Request) QuoteId(quoteId string) ConvertAPIUmfuturesCreateConvertAcceptQuoteV1Request {
	r.quoteId = &quoteId
	return r
}

func (r ConvertAPIUmfuturesCreateConvertAcceptQuoteV1Request) Timestamp(timestamp int64) ConvertAPIUmfuturesCreateConvertAcceptQuoteV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ConvertAPIUmfuturesCreateConvertAcceptQuoteV1Request) RecvWindow(recvWindow int64) ConvertAPIUmfuturesCreateConvertAcceptQuoteV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ConvertAPIUmfuturesCreateConvertAcceptQuoteV1Request) Execute() (*UmfuturesCreateConvertAcceptQuoteV1Resp, *http.Response, error) {
	return r.ApiService.UmfuturesCreateConvertAcceptQuoteV1Execute(r)
}

/*
UmfuturesCreateConvertAcceptQuoteV1 Accept the offered quote (USER_DATA)

Accept the offered quote by quote ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConvertAPIUmfuturesCreateConvertAcceptQuoteV1Request
*/
func (a *ConvertAPIService) UmfuturesCreateConvertAcceptQuoteV1(ctx context.Context) ConvertAPIUmfuturesCreateConvertAcceptQuoteV1Request {
	return ConvertAPIUmfuturesCreateConvertAcceptQuoteV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UmfuturesCreateConvertAcceptQuoteV1Resp
func (a *ConvertAPIService) UmfuturesCreateConvertAcceptQuoteV1Execute(r ConvertAPIUmfuturesCreateConvertAcceptQuoteV1Request) (*UmfuturesCreateConvertAcceptQuoteV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UmfuturesCreateConvertAcceptQuoteV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConvertAPIService.UmfuturesCreateConvertAcceptQuoteV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fapi/v1/convert/acceptQuote"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.quoteId == nil {
		return localVarReturnValue, nil, reportError("quoteId is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "quoteId", r.quoteId, "", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConvertAPIUmfuturesCreateConvertGetQuoteV1Request struct {
	ctx context.Context
	ApiService *ConvertAPIService
	fromAsset *string
	timestamp *int64
	toAsset *string
	fromAmount *string
	recvWindow *int64
	toAmount *string
	validTime *string
}

func (r ConvertAPIUmfuturesCreateConvertGetQuoteV1Request) FromAsset(fromAsset string) ConvertAPIUmfuturesCreateConvertGetQuoteV1Request {
	r.fromAsset = &fromAsset
	return r
}

func (r ConvertAPIUmfuturesCreateConvertGetQuoteV1Request) Timestamp(timestamp int64) ConvertAPIUmfuturesCreateConvertGetQuoteV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ConvertAPIUmfuturesCreateConvertGetQuoteV1Request) ToAsset(toAsset string) ConvertAPIUmfuturesCreateConvertGetQuoteV1Request {
	r.toAsset = &toAsset
	return r
}

func (r ConvertAPIUmfuturesCreateConvertGetQuoteV1Request) FromAmount(fromAmount string) ConvertAPIUmfuturesCreateConvertGetQuoteV1Request {
	r.fromAmount = &fromAmount
	return r
}

func (r ConvertAPIUmfuturesCreateConvertGetQuoteV1Request) RecvWindow(recvWindow int64) ConvertAPIUmfuturesCreateConvertGetQuoteV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ConvertAPIUmfuturesCreateConvertGetQuoteV1Request) ToAmount(toAmount string) ConvertAPIUmfuturesCreateConvertGetQuoteV1Request {
	r.toAmount = &toAmount
	return r
}

func (r ConvertAPIUmfuturesCreateConvertGetQuoteV1Request) ValidTime(validTime string) ConvertAPIUmfuturesCreateConvertGetQuoteV1Request {
	r.validTime = &validTime
	return r
}

func (r ConvertAPIUmfuturesCreateConvertGetQuoteV1Request) Execute() (*UmfuturesCreateConvertGetQuoteV1Resp, *http.Response, error) {
	return r.ApiService.UmfuturesCreateConvertGetQuoteV1Execute(r)
}

/*
UmfuturesCreateConvertGetQuoteV1 Send Quote Request(USER_DATA)

Request a quote for the requested token pairs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConvertAPIUmfuturesCreateConvertGetQuoteV1Request
*/
func (a *ConvertAPIService) UmfuturesCreateConvertGetQuoteV1(ctx context.Context) ConvertAPIUmfuturesCreateConvertGetQuoteV1Request {
	return ConvertAPIUmfuturesCreateConvertGetQuoteV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UmfuturesCreateConvertGetQuoteV1Resp
func (a *ConvertAPIService) UmfuturesCreateConvertGetQuoteV1Execute(r ConvertAPIUmfuturesCreateConvertGetQuoteV1Request) (*UmfuturesCreateConvertGetQuoteV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UmfuturesCreateConvertGetQuoteV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConvertAPIService.UmfuturesCreateConvertGetQuoteV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fapi/v1/convert/getQuote"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fromAsset == nil {
		return localVarReturnValue, nil, reportError("fromAsset is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}
	if r.toAsset == nil {
		return localVarReturnValue, nil, reportError("toAsset is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.fromAmount != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "fromAmount", r.fromAmount, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "fromAsset", r.fromAsset, "", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.toAmount != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "toAmount", r.toAmount, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "toAsset", r.toAsset, "", "")
	if r.validTime != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "validTime", r.validTime, "", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConvertAPIUmfuturesGetConvertExchangeInfoV1Request struct {
	ctx context.Context
	ApiService *ConvertAPIService
	fromAsset *string
	toAsset *string
}

// User spends coin
func (r ConvertAPIUmfuturesGetConvertExchangeInfoV1Request) FromAsset(fromAsset string) ConvertAPIUmfuturesGetConvertExchangeInfoV1Request {
	r.fromAsset = &fromAsset
	return r
}

// User receives coin
func (r ConvertAPIUmfuturesGetConvertExchangeInfoV1Request) ToAsset(toAsset string) ConvertAPIUmfuturesGetConvertExchangeInfoV1Request {
	r.toAsset = &toAsset
	return r
}

func (r ConvertAPIUmfuturesGetConvertExchangeInfoV1Request) Execute() ([]UmfuturesGetConvertExchangeInfoV1RespItem, *http.Response, error) {
	return r.ApiService.UmfuturesGetConvertExchangeInfoV1Execute(r)
}

/*
UmfuturesGetConvertExchangeInfoV1 List All Convert Pairs

Query for all convertible token pairs and the tokens’ respective upper/lower limits

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConvertAPIUmfuturesGetConvertExchangeInfoV1Request
*/
func (a *ConvertAPIService) UmfuturesGetConvertExchangeInfoV1(ctx context.Context) ConvertAPIUmfuturesGetConvertExchangeInfoV1Request {
	return ConvertAPIUmfuturesGetConvertExchangeInfoV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []UmfuturesGetConvertExchangeInfoV1RespItem
func (a *ConvertAPIService) UmfuturesGetConvertExchangeInfoV1Execute(r ConvertAPIUmfuturesGetConvertExchangeInfoV1Request) ([]UmfuturesGetConvertExchangeInfoV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []UmfuturesGetConvertExchangeInfoV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConvertAPIService.UmfuturesGetConvertExchangeInfoV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fapi/v1/convert/exchangeInfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fromAsset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromAsset", r.fromAsset, "form", "")
	} else {
		var defaultValue string = ""
		r.fromAsset = &defaultValue
	}
	if r.toAsset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toAsset", r.toAsset, "form", "")
	} else {
		var defaultValue string = ""
		r.toAsset = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConvertAPIUmfuturesGetConvertOrderStatusV1Request struct {
	ctx context.Context
	ApiService *ConvertAPIService
	orderId *string
	quoteId *string
}

// Either orderId or quoteId is required
func (r ConvertAPIUmfuturesGetConvertOrderStatusV1Request) OrderId(orderId string) ConvertAPIUmfuturesGetConvertOrderStatusV1Request {
	r.orderId = &orderId
	return r
}

// Either orderId or quoteId is required
func (r ConvertAPIUmfuturesGetConvertOrderStatusV1Request) QuoteId(quoteId string) ConvertAPIUmfuturesGetConvertOrderStatusV1Request {
	r.quoteId = &quoteId
	return r
}

func (r ConvertAPIUmfuturesGetConvertOrderStatusV1Request) Execute() (*UmfuturesGetConvertOrderStatusV1Resp, *http.Response, error) {
	return r.ApiService.UmfuturesGetConvertOrderStatusV1Execute(r)
}

/*
UmfuturesGetConvertOrderStatusV1 Order status(USER_DATA)

Query order status by order ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConvertAPIUmfuturesGetConvertOrderStatusV1Request
*/
func (a *ConvertAPIService) UmfuturesGetConvertOrderStatusV1(ctx context.Context) ConvertAPIUmfuturesGetConvertOrderStatusV1Request {
	return ConvertAPIUmfuturesGetConvertOrderStatusV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UmfuturesGetConvertOrderStatusV1Resp
func (a *ConvertAPIService) UmfuturesGetConvertOrderStatusV1Execute(r ConvertAPIUmfuturesGetConvertOrderStatusV1Request) (*UmfuturesGetConvertOrderStatusV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UmfuturesGetConvertOrderStatusV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConvertAPIService.UmfuturesGetConvertOrderStatusV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fapi/v1/convert/orderStatus"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.orderId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderId", r.orderId, "form", "")
	} else {
		var defaultValue string = ""
		r.orderId = &defaultValue
	}
	if r.quoteId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "quoteId", r.quoteId, "form", "")
	} else {
		var defaultValue string = ""
		r.quoteId = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

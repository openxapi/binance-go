/*
Binance Umfutures API

OpenAPI specification for Binance cryptocurrency exchange - Umfutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package umfutures

import (
	"encoding/json"
)

// checks if the UmfuturesGetFuturesDataBasisRespItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UmfuturesGetFuturesDataBasisRespItem{}

// UmfuturesGetFuturesDataBasisRespItem struct for UmfuturesGetFuturesDataBasisRespItem
type UmfuturesGetFuturesDataBasisRespItem struct {
	AnnualizedBasisRate *string `json:"annualizedBasisRate,omitempty"`
	Basis *string `json:"basis,omitempty"`
	BasisRate *string `json:"basisRate,omitempty"`
	ContractType *string `json:"contractType,omitempty"`
	FuturesPrice *string `json:"futuresPrice,omitempty"`
	IndexPrice *string `json:"indexPrice,omitempty"`
	Pair *string `json:"pair,omitempty"`
	Timestamp *int64 `json:"timestamp,omitempty"`
}

// NewUmfuturesGetFuturesDataBasisRespItem instantiates a new UmfuturesGetFuturesDataBasisRespItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUmfuturesGetFuturesDataBasisRespItem() *UmfuturesGetFuturesDataBasisRespItem {
	this := UmfuturesGetFuturesDataBasisRespItem{}
	return &this
}

// NewUmfuturesGetFuturesDataBasisRespItemWithDefaults instantiates a new UmfuturesGetFuturesDataBasisRespItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUmfuturesGetFuturesDataBasisRespItemWithDefaults() *UmfuturesGetFuturesDataBasisRespItem {
	this := UmfuturesGetFuturesDataBasisRespItem{}
	return &this
}

// GetAnnualizedBasisRate returns the AnnualizedBasisRate field value if set, zero value otherwise.
func (o *UmfuturesGetFuturesDataBasisRespItem) GetAnnualizedBasisRate() string {
	if o == nil || IsNil(o.AnnualizedBasisRate) {
		var ret string
		return ret
	}
	return *o.AnnualizedBasisRate
}

// GetAnnualizedBasisRateOk returns a tuple with the AnnualizedBasisRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesGetFuturesDataBasisRespItem) GetAnnualizedBasisRateOk() (*string, bool) {
	if o == nil || IsNil(o.AnnualizedBasisRate) {
		return nil, false
	}
	return o.AnnualizedBasisRate, true
}

// HasAnnualizedBasisRate returns a boolean if a field has been set.
func (o *UmfuturesGetFuturesDataBasisRespItem) HasAnnualizedBasisRate() bool {
	if o != nil && !IsNil(o.AnnualizedBasisRate) {
		return true
	}

	return false
}

// SetAnnualizedBasisRate gets a reference to the given string and assigns it to the AnnualizedBasisRate field.
func (o *UmfuturesGetFuturesDataBasisRespItem) SetAnnualizedBasisRate(v string) {
	o.AnnualizedBasisRate = &v
}

// GetBasis returns the Basis field value if set, zero value otherwise.
func (o *UmfuturesGetFuturesDataBasisRespItem) GetBasis() string {
	if o == nil || IsNil(o.Basis) {
		var ret string
		return ret
	}
	return *o.Basis
}

// GetBasisOk returns a tuple with the Basis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesGetFuturesDataBasisRespItem) GetBasisOk() (*string, bool) {
	if o == nil || IsNil(o.Basis) {
		return nil, false
	}
	return o.Basis, true
}

// HasBasis returns a boolean if a field has been set.
func (o *UmfuturesGetFuturesDataBasisRespItem) HasBasis() bool {
	if o != nil && !IsNil(o.Basis) {
		return true
	}

	return false
}

// SetBasis gets a reference to the given string and assigns it to the Basis field.
func (o *UmfuturesGetFuturesDataBasisRespItem) SetBasis(v string) {
	o.Basis = &v
}

// GetBasisRate returns the BasisRate field value if set, zero value otherwise.
func (o *UmfuturesGetFuturesDataBasisRespItem) GetBasisRate() string {
	if o == nil || IsNil(o.BasisRate) {
		var ret string
		return ret
	}
	return *o.BasisRate
}

// GetBasisRateOk returns a tuple with the BasisRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesGetFuturesDataBasisRespItem) GetBasisRateOk() (*string, bool) {
	if o == nil || IsNil(o.BasisRate) {
		return nil, false
	}
	return o.BasisRate, true
}

// HasBasisRate returns a boolean if a field has been set.
func (o *UmfuturesGetFuturesDataBasisRespItem) HasBasisRate() bool {
	if o != nil && !IsNil(o.BasisRate) {
		return true
	}

	return false
}

// SetBasisRate gets a reference to the given string and assigns it to the BasisRate field.
func (o *UmfuturesGetFuturesDataBasisRespItem) SetBasisRate(v string) {
	o.BasisRate = &v
}

// GetContractType returns the ContractType field value if set, zero value otherwise.
func (o *UmfuturesGetFuturesDataBasisRespItem) GetContractType() string {
	if o == nil || IsNil(o.ContractType) {
		var ret string
		return ret
	}
	return *o.ContractType
}

// GetContractTypeOk returns a tuple with the ContractType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesGetFuturesDataBasisRespItem) GetContractTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContractType) {
		return nil, false
	}
	return o.ContractType, true
}

// HasContractType returns a boolean if a field has been set.
func (o *UmfuturesGetFuturesDataBasisRespItem) HasContractType() bool {
	if o != nil && !IsNil(o.ContractType) {
		return true
	}

	return false
}

// SetContractType gets a reference to the given string and assigns it to the ContractType field.
func (o *UmfuturesGetFuturesDataBasisRespItem) SetContractType(v string) {
	o.ContractType = &v
}

// GetFuturesPrice returns the FuturesPrice field value if set, zero value otherwise.
func (o *UmfuturesGetFuturesDataBasisRespItem) GetFuturesPrice() string {
	if o == nil || IsNil(o.FuturesPrice) {
		var ret string
		return ret
	}
	return *o.FuturesPrice
}

// GetFuturesPriceOk returns a tuple with the FuturesPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesGetFuturesDataBasisRespItem) GetFuturesPriceOk() (*string, bool) {
	if o == nil || IsNil(o.FuturesPrice) {
		return nil, false
	}
	return o.FuturesPrice, true
}

// HasFuturesPrice returns a boolean if a field has been set.
func (o *UmfuturesGetFuturesDataBasisRespItem) HasFuturesPrice() bool {
	if o != nil && !IsNil(o.FuturesPrice) {
		return true
	}

	return false
}

// SetFuturesPrice gets a reference to the given string and assigns it to the FuturesPrice field.
func (o *UmfuturesGetFuturesDataBasisRespItem) SetFuturesPrice(v string) {
	o.FuturesPrice = &v
}

// GetIndexPrice returns the IndexPrice field value if set, zero value otherwise.
func (o *UmfuturesGetFuturesDataBasisRespItem) GetIndexPrice() string {
	if o == nil || IsNil(o.IndexPrice) {
		var ret string
		return ret
	}
	return *o.IndexPrice
}

// GetIndexPriceOk returns a tuple with the IndexPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesGetFuturesDataBasisRespItem) GetIndexPriceOk() (*string, bool) {
	if o == nil || IsNil(o.IndexPrice) {
		return nil, false
	}
	return o.IndexPrice, true
}

// HasIndexPrice returns a boolean if a field has been set.
func (o *UmfuturesGetFuturesDataBasisRespItem) HasIndexPrice() bool {
	if o != nil && !IsNil(o.IndexPrice) {
		return true
	}

	return false
}

// SetIndexPrice gets a reference to the given string and assigns it to the IndexPrice field.
func (o *UmfuturesGetFuturesDataBasisRespItem) SetIndexPrice(v string) {
	o.IndexPrice = &v
}

// GetPair returns the Pair field value if set, zero value otherwise.
func (o *UmfuturesGetFuturesDataBasisRespItem) GetPair() string {
	if o == nil || IsNil(o.Pair) {
		var ret string
		return ret
	}
	return *o.Pair
}

// GetPairOk returns a tuple with the Pair field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesGetFuturesDataBasisRespItem) GetPairOk() (*string, bool) {
	if o == nil || IsNil(o.Pair) {
		return nil, false
	}
	return o.Pair, true
}

// HasPair returns a boolean if a field has been set.
func (o *UmfuturesGetFuturesDataBasisRespItem) HasPair() bool {
	if o != nil && !IsNil(o.Pair) {
		return true
	}

	return false
}

// SetPair gets a reference to the given string and assigns it to the Pair field.
func (o *UmfuturesGetFuturesDataBasisRespItem) SetPair(v string) {
	o.Pair = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *UmfuturesGetFuturesDataBasisRespItem) GetTimestamp() int64 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesGetFuturesDataBasisRespItem) GetTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *UmfuturesGetFuturesDataBasisRespItem) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *UmfuturesGetFuturesDataBasisRespItem) SetTimestamp(v int64) {
	o.Timestamp = &v
}

func (o UmfuturesGetFuturesDataBasisRespItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UmfuturesGetFuturesDataBasisRespItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AnnualizedBasisRate) {
		toSerialize["annualizedBasisRate"] = o.AnnualizedBasisRate
	}
	if !IsNil(o.Basis) {
		toSerialize["basis"] = o.Basis
	}
	if !IsNil(o.BasisRate) {
		toSerialize["basisRate"] = o.BasisRate
	}
	if !IsNil(o.ContractType) {
		toSerialize["contractType"] = o.ContractType
	}
	if !IsNil(o.FuturesPrice) {
		toSerialize["futuresPrice"] = o.FuturesPrice
	}
	if !IsNil(o.IndexPrice) {
		toSerialize["indexPrice"] = o.IndexPrice
	}
	if !IsNil(o.Pair) {
		toSerialize["pair"] = o.Pair
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

type NullableUmfuturesGetFuturesDataBasisRespItem struct {
	value *UmfuturesGetFuturesDataBasisRespItem
	isSet bool
}

func (v NullableUmfuturesGetFuturesDataBasisRespItem) Get() *UmfuturesGetFuturesDataBasisRespItem {
	return v.value
}

func (v *NullableUmfuturesGetFuturesDataBasisRespItem) Set(val *UmfuturesGetFuturesDataBasisRespItem) {
	v.value = val
	v.isSet = true
}

func (v NullableUmfuturesGetFuturesDataBasisRespItem) IsSet() bool {
	return v.isSet
}

func (v *NullableUmfuturesGetFuturesDataBasisRespItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUmfuturesGetFuturesDataBasisRespItem(val *UmfuturesGetFuturesDataBasisRespItem) *NullableUmfuturesGetFuturesDataBasisRespItem {
	return &NullableUmfuturesGetFuturesDataBasisRespItem{value: val, isSet: true}
}

func (v NullableUmfuturesGetFuturesDataBasisRespItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUmfuturesGetFuturesDataBasisRespItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



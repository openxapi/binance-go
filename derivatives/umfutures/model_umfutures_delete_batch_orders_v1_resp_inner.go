/*
Binance Umfutures API

OpenAPI specification for Binance cryptocurrency exchange - Umfutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package umfutures

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UmfuturesDeleteBatchOrdersV1RespInner - struct for UmfuturesDeleteBatchOrdersV1RespInner
type UmfuturesDeleteBatchOrdersV1RespInner struct {
	APIError *APIError
	UmfuturesDeleteBatchOrdersV1RespItem *UmfuturesDeleteBatchOrdersV1RespItem
}

// APIErrorAsUmfuturesDeleteBatchOrdersV1RespInner is a convenience function that returns APIError wrapped in UmfuturesDeleteBatchOrdersV1RespInner
func APIErrorAsUmfuturesDeleteBatchOrdersV1RespInner(v *APIError) UmfuturesDeleteBatchOrdersV1RespInner {
	return UmfuturesDeleteBatchOrdersV1RespInner{
		APIError: v,
	}
}

// UmfuturesDeleteBatchOrdersV1RespItemAsUmfuturesDeleteBatchOrdersV1RespInner is a convenience function that returns UmfuturesDeleteBatchOrdersV1RespItem wrapped in UmfuturesDeleteBatchOrdersV1RespInner
func UmfuturesDeleteBatchOrdersV1RespItemAsUmfuturesDeleteBatchOrdersV1RespInner(v *UmfuturesDeleteBatchOrdersV1RespItem) UmfuturesDeleteBatchOrdersV1RespInner {
	return UmfuturesDeleteBatchOrdersV1RespInner{
		UmfuturesDeleteBatchOrdersV1RespItem: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UmfuturesDeleteBatchOrdersV1RespInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into APIError
	err = newStrictDecoder(data).Decode(&dst.APIError)
	if err == nil {
		jsonAPIError, _ := json.Marshal(dst.APIError)
		if string(jsonAPIError) == "{}" { // empty struct
			dst.APIError = nil
		} else {
			if err = validator.Validate(dst.APIError); err != nil {
				dst.APIError = nil
			} else {
				match++
			}
		}
	} else {
		dst.APIError = nil
	}

	// try to unmarshal data into UmfuturesDeleteBatchOrdersV1RespItem
	err = newStrictDecoder(data).Decode(&dst.UmfuturesDeleteBatchOrdersV1RespItem)
	if err == nil {
		jsonUmfuturesDeleteBatchOrdersV1RespItem, _ := json.Marshal(dst.UmfuturesDeleteBatchOrdersV1RespItem)
		if string(jsonUmfuturesDeleteBatchOrdersV1RespItem) == "{}" { // empty struct
			dst.UmfuturesDeleteBatchOrdersV1RespItem = nil
		} else {
			if err = validator.Validate(dst.UmfuturesDeleteBatchOrdersV1RespItem); err != nil {
				dst.UmfuturesDeleteBatchOrdersV1RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.UmfuturesDeleteBatchOrdersV1RespItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.APIError = nil
		dst.UmfuturesDeleteBatchOrdersV1RespItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UmfuturesDeleteBatchOrdersV1RespInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UmfuturesDeleteBatchOrdersV1RespInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UmfuturesDeleteBatchOrdersV1RespInner) MarshalJSON() ([]byte, error) {
	if src.APIError != nil {
		return json.Marshal(&src.APIError)
	}

	if src.UmfuturesDeleteBatchOrdersV1RespItem != nil {
		return json.Marshal(&src.UmfuturesDeleteBatchOrdersV1RespItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UmfuturesDeleteBatchOrdersV1RespInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.APIError != nil {
		return obj.APIError
	}

	if obj.UmfuturesDeleteBatchOrdersV1RespItem != nil {
		return obj.UmfuturesDeleteBatchOrdersV1RespItem
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UmfuturesDeleteBatchOrdersV1RespInner) GetActualInstanceValue() (interface{}) {
	if obj.APIError != nil {
		return *obj.APIError
	}

	if obj.UmfuturesDeleteBatchOrdersV1RespItem != nil {
		return *obj.UmfuturesDeleteBatchOrdersV1RespItem
	}

	// all schemas are nil
	return nil
}

type NullableUmfuturesDeleteBatchOrdersV1RespInner struct {
	value *UmfuturesDeleteBatchOrdersV1RespInner
	isSet bool
}

func (v NullableUmfuturesDeleteBatchOrdersV1RespInner) Get() *UmfuturesDeleteBatchOrdersV1RespInner {
	return v.value
}

func (v *NullableUmfuturesDeleteBatchOrdersV1RespInner) Set(val *UmfuturesDeleteBatchOrdersV1RespInner) {
	v.value = val
	v.isSet = true
}

func (v NullableUmfuturesDeleteBatchOrdersV1RespInner) IsSet() bool {
	return v.isSet
}

func (v *NullableUmfuturesDeleteBatchOrdersV1RespInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUmfuturesDeleteBatchOrdersV1RespInner(val *UmfuturesDeleteBatchOrdersV1RespInner) *NullableUmfuturesDeleteBatchOrdersV1RespInner {
	return &NullableUmfuturesDeleteBatchOrdersV1RespInner{value: val, isSet: true}
}

func (v NullableUmfuturesDeleteBatchOrdersV1RespInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUmfuturesDeleteBatchOrdersV1RespInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



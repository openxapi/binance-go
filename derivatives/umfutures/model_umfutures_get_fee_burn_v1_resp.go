/*
Binance Umfutures API

OpenAPI specification for Binance cryptocurrency exchange - Umfutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package umfutures

import (
	"encoding/json"
)

// checks if the UmfuturesGetFeeBurnV1Resp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UmfuturesGetFeeBurnV1Resp{}

// UmfuturesGetFeeBurnV1Resp struct for UmfuturesGetFeeBurnV1Resp
type UmfuturesGetFeeBurnV1Resp struct {
	FeeBurn *bool `json:"feeBurn,omitempty"`
}

// NewUmfuturesGetFeeBurnV1Resp instantiates a new UmfuturesGetFeeBurnV1Resp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUmfuturesGetFeeBurnV1Resp() *UmfuturesGetFeeBurnV1Resp {
	this := UmfuturesGetFeeBurnV1Resp{}
	return &this
}

// NewUmfuturesGetFeeBurnV1RespWithDefaults instantiates a new UmfuturesGetFeeBurnV1Resp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUmfuturesGetFeeBurnV1RespWithDefaults() *UmfuturesGetFeeBurnV1Resp {
	this := UmfuturesGetFeeBurnV1Resp{}
	return &this
}

// GetFeeBurn returns the FeeBurn field value if set, zero value otherwise.
func (o *UmfuturesGetFeeBurnV1Resp) GetFeeBurn() bool {
	if o == nil || IsNil(o.FeeBurn) {
		var ret bool
		return ret
	}
	return *o.FeeBurn
}

// GetFeeBurnOk returns a tuple with the FeeBurn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesGetFeeBurnV1Resp) GetFeeBurnOk() (*bool, bool) {
	if o == nil || IsNil(o.FeeBurn) {
		return nil, false
	}
	return o.FeeBurn, true
}

// HasFeeBurn returns a boolean if a field has been set.
func (o *UmfuturesGetFeeBurnV1Resp) HasFeeBurn() bool {
	if o != nil && !IsNil(o.FeeBurn) {
		return true
	}

	return false
}

// SetFeeBurn gets a reference to the given bool and assigns it to the FeeBurn field.
func (o *UmfuturesGetFeeBurnV1Resp) SetFeeBurn(v bool) {
	o.FeeBurn = &v
}

func (o UmfuturesGetFeeBurnV1Resp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UmfuturesGetFeeBurnV1Resp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FeeBurn) {
		toSerialize["feeBurn"] = o.FeeBurn
	}
	return toSerialize, nil
}

type NullableUmfuturesGetFeeBurnV1Resp struct {
	value *UmfuturesGetFeeBurnV1Resp
	isSet bool
}

func (v NullableUmfuturesGetFeeBurnV1Resp) Get() *UmfuturesGetFeeBurnV1Resp {
	return v.value
}

func (v *NullableUmfuturesGetFeeBurnV1Resp) Set(val *UmfuturesGetFeeBurnV1Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableUmfuturesGetFeeBurnV1Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableUmfuturesGetFeeBurnV1Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUmfuturesGetFeeBurnV1Resp(val *UmfuturesGetFeeBurnV1Resp) *NullableUmfuturesGetFeeBurnV1Resp {
	return &NullableUmfuturesGetFeeBurnV1Resp{value: val, isSet: true}
}

func (v NullableUmfuturesGetFeeBurnV1Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUmfuturesGetFeeBurnV1Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Binance Umfutures API

OpenAPI specification for Binance cryptocurrency exchange - Umfutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package umfutures

import (
	"encoding/json"
)

// checks if the UmfuturesGetConstituentsV1RespConstituentsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UmfuturesGetConstituentsV1RespConstituentsInner{}

// UmfuturesGetConstituentsV1RespConstituentsInner struct for UmfuturesGetConstituentsV1RespConstituentsInner
type UmfuturesGetConstituentsV1RespConstituentsInner struct {
	Exchange *string `json:"exchange,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
}

// NewUmfuturesGetConstituentsV1RespConstituentsInner instantiates a new UmfuturesGetConstituentsV1RespConstituentsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUmfuturesGetConstituentsV1RespConstituentsInner() *UmfuturesGetConstituentsV1RespConstituentsInner {
	this := UmfuturesGetConstituentsV1RespConstituentsInner{}
	return &this
}

// NewUmfuturesGetConstituentsV1RespConstituentsInnerWithDefaults instantiates a new UmfuturesGetConstituentsV1RespConstituentsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUmfuturesGetConstituentsV1RespConstituentsInnerWithDefaults() *UmfuturesGetConstituentsV1RespConstituentsInner {
	this := UmfuturesGetConstituentsV1RespConstituentsInner{}
	return &this
}

// GetExchange returns the Exchange field value if set, zero value otherwise.
func (o *UmfuturesGetConstituentsV1RespConstituentsInner) GetExchange() string {
	if o == nil || IsNil(o.Exchange) {
		var ret string
		return ret
	}
	return *o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesGetConstituentsV1RespConstituentsInner) GetExchangeOk() (*string, bool) {
	if o == nil || IsNil(o.Exchange) {
		return nil, false
	}
	return o.Exchange, true
}

// HasExchange returns a boolean if a field has been set.
func (o *UmfuturesGetConstituentsV1RespConstituentsInner) HasExchange() bool {
	if o != nil && !IsNil(o.Exchange) {
		return true
	}

	return false
}

// SetExchange gets a reference to the given string and assigns it to the Exchange field.
func (o *UmfuturesGetConstituentsV1RespConstituentsInner) SetExchange(v string) {
	o.Exchange = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *UmfuturesGetConstituentsV1RespConstituentsInner) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesGetConstituentsV1RespConstituentsInner) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *UmfuturesGetConstituentsV1RespConstituentsInner) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *UmfuturesGetConstituentsV1RespConstituentsInner) SetSymbol(v string) {
	o.Symbol = &v
}

func (o UmfuturesGetConstituentsV1RespConstituentsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UmfuturesGetConstituentsV1RespConstituentsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Exchange) {
		toSerialize["exchange"] = o.Exchange
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	return toSerialize, nil
}

type NullableUmfuturesGetConstituentsV1RespConstituentsInner struct {
	value *UmfuturesGetConstituentsV1RespConstituentsInner
	isSet bool
}

func (v NullableUmfuturesGetConstituentsV1RespConstituentsInner) Get() *UmfuturesGetConstituentsV1RespConstituentsInner {
	return v.value
}

func (v *NullableUmfuturesGetConstituentsV1RespConstituentsInner) Set(val *UmfuturesGetConstituentsV1RespConstituentsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableUmfuturesGetConstituentsV1RespConstituentsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableUmfuturesGetConstituentsV1RespConstituentsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUmfuturesGetConstituentsV1RespConstituentsInner(val *UmfuturesGetConstituentsV1RespConstituentsInner) *NullableUmfuturesGetConstituentsV1RespConstituentsInner {
	return &NullableUmfuturesGetConstituentsV1RespConstituentsInner{value: val, isSet: true}
}

func (v NullableUmfuturesGetConstituentsV1RespConstituentsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUmfuturesGetConstituentsV1RespConstituentsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



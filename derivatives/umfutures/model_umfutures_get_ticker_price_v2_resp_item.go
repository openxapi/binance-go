/*
Binance USD-M Futures API

OpenAPI specification for Binance exchange - Umfutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package umfutures

import (
	"encoding/json"
)

// checks if the UmfuturesGetTickerPriceV2RespItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UmfuturesGetTickerPriceV2RespItem{}

// UmfuturesGetTickerPriceV2RespItem struct for UmfuturesGetTickerPriceV2RespItem
type UmfuturesGetTickerPriceV2RespItem struct {
	Price *string `json:"price,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Time *int64 `json:"time,omitempty"`
}

// NewUmfuturesGetTickerPriceV2RespItem instantiates a new UmfuturesGetTickerPriceV2RespItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUmfuturesGetTickerPriceV2RespItem() *UmfuturesGetTickerPriceV2RespItem {
	this := UmfuturesGetTickerPriceV2RespItem{}
	return &this
}

// NewUmfuturesGetTickerPriceV2RespItemWithDefaults instantiates a new UmfuturesGetTickerPriceV2RespItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUmfuturesGetTickerPriceV2RespItemWithDefaults() *UmfuturesGetTickerPriceV2RespItem {
	this := UmfuturesGetTickerPriceV2RespItem{}
	return &this
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *UmfuturesGetTickerPriceV2RespItem) GetPrice() string {
	if o == nil || IsNil(o.Price) {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesGetTickerPriceV2RespItem) GetPriceOk() (*string, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *UmfuturesGetTickerPriceV2RespItem) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *UmfuturesGetTickerPriceV2RespItem) SetPrice(v string) {
	o.Price = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *UmfuturesGetTickerPriceV2RespItem) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesGetTickerPriceV2RespItem) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *UmfuturesGetTickerPriceV2RespItem) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *UmfuturesGetTickerPriceV2RespItem) SetSymbol(v string) {
	o.Symbol = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *UmfuturesGetTickerPriceV2RespItem) GetTime() int64 {
	if o == nil || IsNil(o.Time) {
		var ret int64
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesGetTickerPriceV2RespItem) GetTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *UmfuturesGetTickerPriceV2RespItem) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given int64 and assigns it to the Time field.
func (o *UmfuturesGetTickerPriceV2RespItem) SetTime(v int64) {
	o.Time = &v
}

func (o UmfuturesGetTickerPriceV2RespItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UmfuturesGetTickerPriceV2RespItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	return toSerialize, nil
}

type NullableUmfuturesGetTickerPriceV2RespItem struct {
	value *UmfuturesGetTickerPriceV2RespItem
	isSet bool
}

func (v NullableUmfuturesGetTickerPriceV2RespItem) Get() *UmfuturesGetTickerPriceV2RespItem {
	return v.value
}

func (v *NullableUmfuturesGetTickerPriceV2RespItem) Set(val *UmfuturesGetTickerPriceV2RespItem) {
	v.value = val
	v.isSet = true
}

func (v NullableUmfuturesGetTickerPriceV2RespItem) IsSet() bool {
	return v.isSet
}

func (v *NullableUmfuturesGetTickerPriceV2RespItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUmfuturesGetTickerPriceV2RespItem(val *UmfuturesGetTickerPriceV2RespItem) *NullableUmfuturesGetTickerPriceV2RespItem {
	return &NullableUmfuturesGetTickerPriceV2RespItem{value: val, isSet: true}
}

func (v NullableUmfuturesGetTickerPriceV2RespItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUmfuturesGetTickerPriceV2RespItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Binance USD-M Futures API

OpenAPI specification for Binance exchange - Umfutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package umfutures

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UmfuturesGetPremiumIndexV1Resp - struct for UmfuturesGetPremiumIndexV1Resp
type UmfuturesGetPremiumIndexV1Resp struct {
	UmfuturesGetPremiumIndexV1RespItem *UmfuturesGetPremiumIndexV1RespItem
	ArrayOfUmfuturesGetPremiumIndexV1RespItem *[]UmfuturesGetPremiumIndexV1RespItem
}

// UmfuturesGetPremiumIndexV1RespItemAsUmfuturesGetPremiumIndexV1Resp is a convenience function that returns UmfuturesGetPremiumIndexV1RespItem wrapped in UmfuturesGetPremiumIndexV1Resp
func UmfuturesGetPremiumIndexV1RespItemAsUmfuturesGetPremiumIndexV1Resp(v *UmfuturesGetPremiumIndexV1RespItem) UmfuturesGetPremiumIndexV1Resp {
	return UmfuturesGetPremiumIndexV1Resp{
		UmfuturesGetPremiumIndexV1RespItem: v,
	}
}

// []UmfuturesGetPremiumIndexV1RespItemAsUmfuturesGetPremiumIndexV1Resp is a convenience function that returns []UmfuturesGetPremiumIndexV1RespItem wrapped in UmfuturesGetPremiumIndexV1Resp
func ArrayOfUmfuturesGetPremiumIndexV1RespItemAsUmfuturesGetPremiumIndexV1Resp(v *[]UmfuturesGetPremiumIndexV1RespItem) UmfuturesGetPremiumIndexV1Resp {
	return UmfuturesGetPremiumIndexV1Resp{
		ArrayOfUmfuturesGetPremiumIndexV1RespItem: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UmfuturesGetPremiumIndexV1Resp) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UmfuturesGetPremiumIndexV1RespItem
	err = newStrictDecoder(data).Decode(&dst.UmfuturesGetPremiumIndexV1RespItem)
	if err == nil {
		jsonUmfuturesGetPremiumIndexV1RespItem, _ := json.Marshal(dst.UmfuturesGetPremiumIndexV1RespItem)
		if string(jsonUmfuturesGetPremiumIndexV1RespItem) == "{}" { // empty struct
			dst.UmfuturesGetPremiumIndexV1RespItem = nil
		} else {
			if err = validator.Validate(dst.UmfuturesGetPremiumIndexV1RespItem); err != nil {
				dst.UmfuturesGetPremiumIndexV1RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.UmfuturesGetPremiumIndexV1RespItem = nil
	}

	// try to unmarshal data into ArrayOfUmfuturesGetPremiumIndexV1RespItem
	err = newStrictDecoder(data).Decode(&dst.ArrayOfUmfuturesGetPremiumIndexV1RespItem)
	if err == nil {
		jsonArrayOfUmfuturesGetPremiumIndexV1RespItem, _ := json.Marshal(dst.ArrayOfUmfuturesGetPremiumIndexV1RespItem)
		if string(jsonArrayOfUmfuturesGetPremiumIndexV1RespItem) == "{}" { // empty struct
			dst.ArrayOfUmfuturesGetPremiumIndexV1RespItem = nil
		} else {
			if err = validator.Validate(dst.ArrayOfUmfuturesGetPremiumIndexV1RespItem); err != nil {
				dst.ArrayOfUmfuturesGetPremiumIndexV1RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfUmfuturesGetPremiumIndexV1RespItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UmfuturesGetPremiumIndexV1RespItem = nil
		dst.ArrayOfUmfuturesGetPremiumIndexV1RespItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UmfuturesGetPremiumIndexV1Resp)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UmfuturesGetPremiumIndexV1Resp)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UmfuturesGetPremiumIndexV1Resp) MarshalJSON() ([]byte, error) {
	if src.UmfuturesGetPremiumIndexV1RespItem != nil {
		return json.Marshal(&src.UmfuturesGetPremiumIndexV1RespItem)
	}

	if src.ArrayOfUmfuturesGetPremiumIndexV1RespItem != nil {
		return json.Marshal(&src.ArrayOfUmfuturesGetPremiumIndexV1RespItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UmfuturesGetPremiumIndexV1Resp) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.UmfuturesGetPremiumIndexV1RespItem != nil {
		return obj.UmfuturesGetPremiumIndexV1RespItem
	}

	if obj.ArrayOfUmfuturesGetPremiumIndexV1RespItem != nil {
		return obj.ArrayOfUmfuturesGetPremiumIndexV1RespItem
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UmfuturesGetPremiumIndexV1Resp) GetActualInstanceValue() (interface{}) {
	if obj.UmfuturesGetPremiumIndexV1RespItem != nil {
		return *obj.UmfuturesGetPremiumIndexV1RespItem
	}

	if obj.ArrayOfUmfuturesGetPremiumIndexV1RespItem != nil {
		return *obj.ArrayOfUmfuturesGetPremiumIndexV1RespItem
	}

	// all schemas are nil
	return nil
}

type NullableUmfuturesGetPremiumIndexV1Resp struct {
	value *UmfuturesGetPremiumIndexV1Resp
	isSet bool
}

func (v NullableUmfuturesGetPremiumIndexV1Resp) Get() *UmfuturesGetPremiumIndexV1Resp {
	return v.value
}

func (v *NullableUmfuturesGetPremiumIndexV1Resp) Set(val *UmfuturesGetPremiumIndexV1Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableUmfuturesGetPremiumIndexV1Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableUmfuturesGetPremiumIndexV1Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUmfuturesGetPremiumIndexV1Resp(val *UmfuturesGetPremiumIndexV1Resp) *NullableUmfuturesGetPremiumIndexV1Resp {
	return &NullableUmfuturesGetPremiumIndexV1Resp{value: val, isSet: true}
}

func (v NullableUmfuturesGetPremiumIndexV1Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUmfuturesGetPremiumIndexV1Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Binance Cmfutures API

OpenAPI specification for Binance cryptocurrency exchange - Cmfutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cmfutures

import (
	"encoding/json"
)

// checks if the CmfuturesGetTickerPriceV1RespItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CmfuturesGetTickerPriceV1RespItem{}

// CmfuturesGetTickerPriceV1RespItem struct for CmfuturesGetTickerPriceV1RespItem
type CmfuturesGetTickerPriceV1RespItem struct {
	Price *string `json:"price,omitempty"`
	Ps *string `json:"ps,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Time *int64 `json:"time,omitempty"`
}

// NewCmfuturesGetTickerPriceV1RespItem instantiates a new CmfuturesGetTickerPriceV1RespItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCmfuturesGetTickerPriceV1RespItem() *CmfuturesGetTickerPriceV1RespItem {
	this := CmfuturesGetTickerPriceV1RespItem{}
	return &this
}

// NewCmfuturesGetTickerPriceV1RespItemWithDefaults instantiates a new CmfuturesGetTickerPriceV1RespItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCmfuturesGetTickerPriceV1RespItemWithDefaults() *CmfuturesGetTickerPriceV1RespItem {
	this := CmfuturesGetTickerPriceV1RespItem{}
	return &this
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *CmfuturesGetTickerPriceV1RespItem) GetPrice() string {
	if o == nil || IsNil(o.Price) {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmfuturesGetTickerPriceV1RespItem) GetPriceOk() (*string, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *CmfuturesGetTickerPriceV1RespItem) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *CmfuturesGetTickerPriceV1RespItem) SetPrice(v string) {
	o.Price = &v
}

// GetPs returns the Ps field value if set, zero value otherwise.
func (o *CmfuturesGetTickerPriceV1RespItem) GetPs() string {
	if o == nil || IsNil(o.Ps) {
		var ret string
		return ret
	}
	return *o.Ps
}

// GetPsOk returns a tuple with the Ps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmfuturesGetTickerPriceV1RespItem) GetPsOk() (*string, bool) {
	if o == nil || IsNil(o.Ps) {
		return nil, false
	}
	return o.Ps, true
}

// HasPs returns a boolean if a field has been set.
func (o *CmfuturesGetTickerPriceV1RespItem) HasPs() bool {
	if o != nil && !IsNil(o.Ps) {
		return true
	}

	return false
}

// SetPs gets a reference to the given string and assigns it to the Ps field.
func (o *CmfuturesGetTickerPriceV1RespItem) SetPs(v string) {
	o.Ps = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *CmfuturesGetTickerPriceV1RespItem) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmfuturesGetTickerPriceV1RespItem) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *CmfuturesGetTickerPriceV1RespItem) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *CmfuturesGetTickerPriceV1RespItem) SetSymbol(v string) {
	o.Symbol = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *CmfuturesGetTickerPriceV1RespItem) GetTime() int64 {
	if o == nil || IsNil(o.Time) {
		var ret int64
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmfuturesGetTickerPriceV1RespItem) GetTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *CmfuturesGetTickerPriceV1RespItem) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given int64 and assigns it to the Time field.
func (o *CmfuturesGetTickerPriceV1RespItem) SetTime(v int64) {
	o.Time = &v
}

func (o CmfuturesGetTickerPriceV1RespItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CmfuturesGetTickerPriceV1RespItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Ps) {
		toSerialize["ps"] = o.Ps
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	return toSerialize, nil
}

type NullableCmfuturesGetTickerPriceV1RespItem struct {
	value *CmfuturesGetTickerPriceV1RespItem
	isSet bool
}

func (v NullableCmfuturesGetTickerPriceV1RespItem) Get() *CmfuturesGetTickerPriceV1RespItem {
	return v.value
}

func (v *NullableCmfuturesGetTickerPriceV1RespItem) Set(val *CmfuturesGetTickerPriceV1RespItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCmfuturesGetTickerPriceV1RespItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCmfuturesGetTickerPriceV1RespItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCmfuturesGetTickerPriceV1RespItem(val *CmfuturesGetTickerPriceV1RespItem) *NullableCmfuturesGetTickerPriceV1RespItem {
	return &NullableCmfuturesGetTickerPriceV1RespItem{value: val, isSet: true}
}

func (v NullableCmfuturesGetTickerPriceV1RespItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCmfuturesGetTickerPriceV1RespItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



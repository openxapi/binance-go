/*
Binance Cfutures API

OpenAPI specification for Binance cryptocurrency exchange - Cfutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cmfutures

import (
	"encoding/json"
)

// checks if the CfuturesGetAccountV1Resp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CfuturesGetAccountV1Resp{}

// CfuturesGetAccountV1Resp struct for CfuturesGetAccountV1Resp
type CfuturesGetAccountV1Resp struct {
	Assets []CfuturesGetAccountV1RespAssetsInner `json:"assets,omitempty"`
	CanDeposit *bool `json:"canDeposit,omitempty"`
	CanTrade *bool `json:"canTrade,omitempty"`
	CanWithdraw *bool `json:"canWithdraw,omitempty"`
	FeeTier *int32 `json:"feeTier,omitempty"`
	Positions []CfuturesGetAccountV1RespPositionsInner `json:"positions,omitempty"`
	UpdateTime *int64 `json:"updateTime,omitempty"`
}

// NewCfuturesGetAccountV1Resp instantiates a new CfuturesGetAccountV1Resp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCfuturesGetAccountV1Resp() *CfuturesGetAccountV1Resp {
	this := CfuturesGetAccountV1Resp{}
	return &this
}

// NewCfuturesGetAccountV1RespWithDefaults instantiates a new CfuturesGetAccountV1Resp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCfuturesGetAccountV1RespWithDefaults() *CfuturesGetAccountV1Resp {
	this := CfuturesGetAccountV1Resp{}
	return &this
}

// GetAssets returns the Assets field value if set, zero value otherwise.
func (o *CfuturesGetAccountV1Resp) GetAssets() []CfuturesGetAccountV1RespAssetsInner {
	if o == nil || IsNil(o.Assets) {
		var ret []CfuturesGetAccountV1RespAssetsInner
		return ret
	}
	return o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CfuturesGetAccountV1Resp) GetAssetsOk() ([]CfuturesGetAccountV1RespAssetsInner, bool) {
	if o == nil || IsNil(o.Assets) {
		return nil, false
	}
	return o.Assets, true
}

// HasAssets returns a boolean if a field has been set.
func (o *CfuturesGetAccountV1Resp) HasAssets() bool {
	if o != nil && !IsNil(o.Assets) {
		return true
	}

	return false
}

// SetAssets gets a reference to the given []CfuturesGetAccountV1RespAssetsInner and assigns it to the Assets field.
func (o *CfuturesGetAccountV1Resp) SetAssets(v []CfuturesGetAccountV1RespAssetsInner) {
	o.Assets = v
}

// GetCanDeposit returns the CanDeposit field value if set, zero value otherwise.
func (o *CfuturesGetAccountV1Resp) GetCanDeposit() bool {
	if o == nil || IsNil(o.CanDeposit) {
		var ret bool
		return ret
	}
	return *o.CanDeposit
}

// GetCanDepositOk returns a tuple with the CanDeposit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CfuturesGetAccountV1Resp) GetCanDepositOk() (*bool, bool) {
	if o == nil || IsNil(o.CanDeposit) {
		return nil, false
	}
	return o.CanDeposit, true
}

// HasCanDeposit returns a boolean if a field has been set.
func (o *CfuturesGetAccountV1Resp) HasCanDeposit() bool {
	if o != nil && !IsNil(o.CanDeposit) {
		return true
	}

	return false
}

// SetCanDeposit gets a reference to the given bool and assigns it to the CanDeposit field.
func (o *CfuturesGetAccountV1Resp) SetCanDeposit(v bool) {
	o.CanDeposit = &v
}

// GetCanTrade returns the CanTrade field value if set, zero value otherwise.
func (o *CfuturesGetAccountV1Resp) GetCanTrade() bool {
	if o == nil || IsNil(o.CanTrade) {
		var ret bool
		return ret
	}
	return *o.CanTrade
}

// GetCanTradeOk returns a tuple with the CanTrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CfuturesGetAccountV1Resp) GetCanTradeOk() (*bool, bool) {
	if o == nil || IsNil(o.CanTrade) {
		return nil, false
	}
	return o.CanTrade, true
}

// HasCanTrade returns a boolean if a field has been set.
func (o *CfuturesGetAccountV1Resp) HasCanTrade() bool {
	if o != nil && !IsNil(o.CanTrade) {
		return true
	}

	return false
}

// SetCanTrade gets a reference to the given bool and assigns it to the CanTrade field.
func (o *CfuturesGetAccountV1Resp) SetCanTrade(v bool) {
	o.CanTrade = &v
}

// GetCanWithdraw returns the CanWithdraw field value if set, zero value otherwise.
func (o *CfuturesGetAccountV1Resp) GetCanWithdraw() bool {
	if o == nil || IsNil(o.CanWithdraw) {
		var ret bool
		return ret
	}
	return *o.CanWithdraw
}

// GetCanWithdrawOk returns a tuple with the CanWithdraw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CfuturesGetAccountV1Resp) GetCanWithdrawOk() (*bool, bool) {
	if o == nil || IsNil(o.CanWithdraw) {
		return nil, false
	}
	return o.CanWithdraw, true
}

// HasCanWithdraw returns a boolean if a field has been set.
func (o *CfuturesGetAccountV1Resp) HasCanWithdraw() bool {
	if o != nil && !IsNil(o.CanWithdraw) {
		return true
	}

	return false
}

// SetCanWithdraw gets a reference to the given bool and assigns it to the CanWithdraw field.
func (o *CfuturesGetAccountV1Resp) SetCanWithdraw(v bool) {
	o.CanWithdraw = &v
}

// GetFeeTier returns the FeeTier field value if set, zero value otherwise.
func (o *CfuturesGetAccountV1Resp) GetFeeTier() int32 {
	if o == nil || IsNil(o.FeeTier) {
		var ret int32
		return ret
	}
	return *o.FeeTier
}

// GetFeeTierOk returns a tuple with the FeeTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CfuturesGetAccountV1Resp) GetFeeTierOk() (*int32, bool) {
	if o == nil || IsNil(o.FeeTier) {
		return nil, false
	}
	return o.FeeTier, true
}

// HasFeeTier returns a boolean if a field has been set.
func (o *CfuturesGetAccountV1Resp) HasFeeTier() bool {
	if o != nil && !IsNil(o.FeeTier) {
		return true
	}

	return false
}

// SetFeeTier gets a reference to the given int32 and assigns it to the FeeTier field.
func (o *CfuturesGetAccountV1Resp) SetFeeTier(v int32) {
	o.FeeTier = &v
}

// GetPositions returns the Positions field value if set, zero value otherwise.
func (o *CfuturesGetAccountV1Resp) GetPositions() []CfuturesGetAccountV1RespPositionsInner {
	if o == nil || IsNil(o.Positions) {
		var ret []CfuturesGetAccountV1RespPositionsInner
		return ret
	}
	return o.Positions
}

// GetPositionsOk returns a tuple with the Positions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CfuturesGetAccountV1Resp) GetPositionsOk() ([]CfuturesGetAccountV1RespPositionsInner, bool) {
	if o == nil || IsNil(o.Positions) {
		return nil, false
	}
	return o.Positions, true
}

// HasPositions returns a boolean if a field has been set.
func (o *CfuturesGetAccountV1Resp) HasPositions() bool {
	if o != nil && !IsNil(o.Positions) {
		return true
	}

	return false
}

// SetPositions gets a reference to the given []CfuturesGetAccountV1RespPositionsInner and assigns it to the Positions field.
func (o *CfuturesGetAccountV1Resp) SetPositions(v []CfuturesGetAccountV1RespPositionsInner) {
	o.Positions = v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *CfuturesGetAccountV1Resp) GetUpdateTime() int64 {
	if o == nil || IsNil(o.UpdateTime) {
		var ret int64
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CfuturesGetAccountV1Resp) GetUpdateTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *CfuturesGetAccountV1Resp) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given int64 and assigns it to the UpdateTime field.
func (o *CfuturesGetAccountV1Resp) SetUpdateTime(v int64) {
	o.UpdateTime = &v
}

func (o CfuturesGetAccountV1Resp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CfuturesGetAccountV1Resp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Assets) {
		toSerialize["assets"] = o.Assets
	}
	if !IsNil(o.CanDeposit) {
		toSerialize["canDeposit"] = o.CanDeposit
	}
	if !IsNil(o.CanTrade) {
		toSerialize["canTrade"] = o.CanTrade
	}
	if !IsNil(o.CanWithdraw) {
		toSerialize["canWithdraw"] = o.CanWithdraw
	}
	if !IsNil(o.FeeTier) {
		toSerialize["feeTier"] = o.FeeTier
	}
	if !IsNil(o.Positions) {
		toSerialize["positions"] = o.Positions
	}
	if !IsNil(o.UpdateTime) {
		toSerialize["updateTime"] = o.UpdateTime
	}
	return toSerialize, nil
}

type NullableCfuturesGetAccountV1Resp struct {
	value *CfuturesGetAccountV1Resp
	isSet bool
}

func (v NullableCfuturesGetAccountV1Resp) Get() *CfuturesGetAccountV1Resp {
	return v.value
}

func (v *NullableCfuturesGetAccountV1Resp) Set(val *CfuturesGetAccountV1Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableCfuturesGetAccountV1Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableCfuturesGetAccountV1Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCfuturesGetAccountV1Resp(val *CfuturesGetAccountV1Resp) *NullableCfuturesGetAccountV1Resp {
	return &NullableCfuturesGetAccountV1Resp{value: val, isSet: true}
}

func (v NullableCfuturesGetAccountV1Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCfuturesGetAccountV1Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



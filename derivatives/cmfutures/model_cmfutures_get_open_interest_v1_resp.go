/*
Binance Cmfutures API

OpenAPI specification for Binance cryptocurrency exchange - Cmfutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cmfutures

import (
	"encoding/json"
)

// checks if the CmfuturesGetOpenInterestV1Resp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CmfuturesGetOpenInterestV1Resp{}

// CmfuturesGetOpenInterestV1Resp struct for CmfuturesGetOpenInterestV1Resp
type CmfuturesGetOpenInterestV1Resp struct {
	ContractType *string `json:"contractType,omitempty"`
	OpenInterest *string `json:"openInterest,omitempty"`
	Pair *string `json:"pair,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Time *int64 `json:"time,omitempty"`
}

// NewCmfuturesGetOpenInterestV1Resp instantiates a new CmfuturesGetOpenInterestV1Resp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCmfuturesGetOpenInterestV1Resp() *CmfuturesGetOpenInterestV1Resp {
	this := CmfuturesGetOpenInterestV1Resp{}
	return &this
}

// NewCmfuturesGetOpenInterestV1RespWithDefaults instantiates a new CmfuturesGetOpenInterestV1Resp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCmfuturesGetOpenInterestV1RespWithDefaults() *CmfuturesGetOpenInterestV1Resp {
	this := CmfuturesGetOpenInterestV1Resp{}
	return &this
}

// GetContractType returns the ContractType field value if set, zero value otherwise.
func (o *CmfuturesGetOpenInterestV1Resp) GetContractType() string {
	if o == nil || IsNil(o.ContractType) {
		var ret string
		return ret
	}
	return *o.ContractType
}

// GetContractTypeOk returns a tuple with the ContractType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmfuturesGetOpenInterestV1Resp) GetContractTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContractType) {
		return nil, false
	}
	return o.ContractType, true
}

// HasContractType returns a boolean if a field has been set.
func (o *CmfuturesGetOpenInterestV1Resp) HasContractType() bool {
	if o != nil && !IsNil(o.ContractType) {
		return true
	}

	return false
}

// SetContractType gets a reference to the given string and assigns it to the ContractType field.
func (o *CmfuturesGetOpenInterestV1Resp) SetContractType(v string) {
	o.ContractType = &v
}

// GetOpenInterest returns the OpenInterest field value if set, zero value otherwise.
func (o *CmfuturesGetOpenInterestV1Resp) GetOpenInterest() string {
	if o == nil || IsNil(o.OpenInterest) {
		var ret string
		return ret
	}
	return *o.OpenInterest
}

// GetOpenInterestOk returns a tuple with the OpenInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmfuturesGetOpenInterestV1Resp) GetOpenInterestOk() (*string, bool) {
	if o == nil || IsNil(o.OpenInterest) {
		return nil, false
	}
	return o.OpenInterest, true
}

// HasOpenInterest returns a boolean if a field has been set.
func (o *CmfuturesGetOpenInterestV1Resp) HasOpenInterest() bool {
	if o != nil && !IsNil(o.OpenInterest) {
		return true
	}

	return false
}

// SetOpenInterest gets a reference to the given string and assigns it to the OpenInterest field.
func (o *CmfuturesGetOpenInterestV1Resp) SetOpenInterest(v string) {
	o.OpenInterest = &v
}

// GetPair returns the Pair field value if set, zero value otherwise.
func (o *CmfuturesGetOpenInterestV1Resp) GetPair() string {
	if o == nil || IsNil(o.Pair) {
		var ret string
		return ret
	}
	return *o.Pair
}

// GetPairOk returns a tuple with the Pair field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmfuturesGetOpenInterestV1Resp) GetPairOk() (*string, bool) {
	if o == nil || IsNil(o.Pair) {
		return nil, false
	}
	return o.Pair, true
}

// HasPair returns a boolean if a field has been set.
func (o *CmfuturesGetOpenInterestV1Resp) HasPair() bool {
	if o != nil && !IsNil(o.Pair) {
		return true
	}

	return false
}

// SetPair gets a reference to the given string and assigns it to the Pair field.
func (o *CmfuturesGetOpenInterestV1Resp) SetPair(v string) {
	o.Pair = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *CmfuturesGetOpenInterestV1Resp) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmfuturesGetOpenInterestV1Resp) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *CmfuturesGetOpenInterestV1Resp) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *CmfuturesGetOpenInterestV1Resp) SetSymbol(v string) {
	o.Symbol = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *CmfuturesGetOpenInterestV1Resp) GetTime() int64 {
	if o == nil || IsNil(o.Time) {
		var ret int64
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmfuturesGetOpenInterestV1Resp) GetTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *CmfuturesGetOpenInterestV1Resp) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given int64 and assigns it to the Time field.
func (o *CmfuturesGetOpenInterestV1Resp) SetTime(v int64) {
	o.Time = &v
}

func (o CmfuturesGetOpenInterestV1Resp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CmfuturesGetOpenInterestV1Resp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContractType) {
		toSerialize["contractType"] = o.ContractType
	}
	if !IsNil(o.OpenInterest) {
		toSerialize["openInterest"] = o.OpenInterest
	}
	if !IsNil(o.Pair) {
		toSerialize["pair"] = o.Pair
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	return toSerialize, nil
}

type NullableCmfuturesGetOpenInterestV1Resp struct {
	value *CmfuturesGetOpenInterestV1Resp
	isSet bool
}

func (v NullableCmfuturesGetOpenInterestV1Resp) Get() *CmfuturesGetOpenInterestV1Resp {
	return v.value
}

func (v *NullableCmfuturesGetOpenInterestV1Resp) Set(val *CmfuturesGetOpenInterestV1Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableCmfuturesGetOpenInterestV1Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableCmfuturesGetOpenInterestV1Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCmfuturesGetOpenInterestV1Resp(val *CmfuturesGetOpenInterestV1Resp) *NullableCmfuturesGetOpenInterestV1Resp {
	return &NullableCmfuturesGetOpenInterestV1Resp{value: val, isSet: true}
}

func (v NullableCmfuturesGetOpenInterestV1Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCmfuturesGetOpenInterestV1Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



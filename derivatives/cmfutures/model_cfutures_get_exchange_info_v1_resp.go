/*
Binance Cfutures API

OpenAPI specification for Binance cryptocurrency exchange - Cfutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cmfutures

import (
	"encoding/json"
)

// checks if the CfuturesGetExchangeInfoV1Resp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CfuturesGetExchangeInfoV1Resp{}

// CfuturesGetExchangeInfoV1Resp struct for CfuturesGetExchangeInfoV1Resp
type CfuturesGetExchangeInfoV1Resp struct {
	ExchangeFilters []map[string]interface{} `json:"exchangeFilters,omitempty"`
	RateLimits []CfuturesGetExchangeInfoV1RespRateLimitsInner `json:"rateLimits,omitempty"`
	ServerTime *int64 `json:"serverTime,omitempty"`
	Symbols []CfuturesGetExchangeInfoV1RespSymbolsInner `json:"symbols,omitempty"`
	Timezone *string `json:"timezone,omitempty"`
}

// NewCfuturesGetExchangeInfoV1Resp instantiates a new CfuturesGetExchangeInfoV1Resp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCfuturesGetExchangeInfoV1Resp() *CfuturesGetExchangeInfoV1Resp {
	this := CfuturesGetExchangeInfoV1Resp{}
	return &this
}

// NewCfuturesGetExchangeInfoV1RespWithDefaults instantiates a new CfuturesGetExchangeInfoV1Resp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCfuturesGetExchangeInfoV1RespWithDefaults() *CfuturesGetExchangeInfoV1Resp {
	this := CfuturesGetExchangeInfoV1Resp{}
	return &this
}

// GetExchangeFilters returns the ExchangeFilters field value if set, zero value otherwise.
func (o *CfuturesGetExchangeInfoV1Resp) GetExchangeFilters() []map[string]interface{} {
	if o == nil || IsNil(o.ExchangeFilters) {
		var ret []map[string]interface{}
		return ret
	}
	return o.ExchangeFilters
}

// GetExchangeFiltersOk returns a tuple with the ExchangeFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CfuturesGetExchangeInfoV1Resp) GetExchangeFiltersOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExchangeFilters) {
		return nil, false
	}
	return o.ExchangeFilters, true
}

// HasExchangeFilters returns a boolean if a field has been set.
func (o *CfuturesGetExchangeInfoV1Resp) HasExchangeFilters() bool {
	if o != nil && !IsNil(o.ExchangeFilters) {
		return true
	}

	return false
}

// SetExchangeFilters gets a reference to the given []map[string]interface{} and assigns it to the ExchangeFilters field.
func (o *CfuturesGetExchangeInfoV1Resp) SetExchangeFilters(v []map[string]interface{}) {
	o.ExchangeFilters = v
}

// GetRateLimits returns the RateLimits field value if set, zero value otherwise.
func (o *CfuturesGetExchangeInfoV1Resp) GetRateLimits() []CfuturesGetExchangeInfoV1RespRateLimitsInner {
	if o == nil || IsNil(o.RateLimits) {
		var ret []CfuturesGetExchangeInfoV1RespRateLimitsInner
		return ret
	}
	return o.RateLimits
}

// GetRateLimitsOk returns a tuple with the RateLimits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CfuturesGetExchangeInfoV1Resp) GetRateLimitsOk() ([]CfuturesGetExchangeInfoV1RespRateLimitsInner, bool) {
	if o == nil || IsNil(o.RateLimits) {
		return nil, false
	}
	return o.RateLimits, true
}

// HasRateLimits returns a boolean if a field has been set.
func (o *CfuturesGetExchangeInfoV1Resp) HasRateLimits() bool {
	if o != nil && !IsNil(o.RateLimits) {
		return true
	}

	return false
}

// SetRateLimits gets a reference to the given []CfuturesGetExchangeInfoV1RespRateLimitsInner and assigns it to the RateLimits field.
func (o *CfuturesGetExchangeInfoV1Resp) SetRateLimits(v []CfuturesGetExchangeInfoV1RespRateLimitsInner) {
	o.RateLimits = v
}

// GetServerTime returns the ServerTime field value if set, zero value otherwise.
func (o *CfuturesGetExchangeInfoV1Resp) GetServerTime() int64 {
	if o == nil || IsNil(o.ServerTime) {
		var ret int64
		return ret
	}
	return *o.ServerTime
}

// GetServerTimeOk returns a tuple with the ServerTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CfuturesGetExchangeInfoV1Resp) GetServerTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.ServerTime) {
		return nil, false
	}
	return o.ServerTime, true
}

// HasServerTime returns a boolean if a field has been set.
func (o *CfuturesGetExchangeInfoV1Resp) HasServerTime() bool {
	if o != nil && !IsNil(o.ServerTime) {
		return true
	}

	return false
}

// SetServerTime gets a reference to the given int64 and assigns it to the ServerTime field.
func (o *CfuturesGetExchangeInfoV1Resp) SetServerTime(v int64) {
	o.ServerTime = &v
}

// GetSymbols returns the Symbols field value if set, zero value otherwise.
func (o *CfuturesGetExchangeInfoV1Resp) GetSymbols() []CfuturesGetExchangeInfoV1RespSymbolsInner {
	if o == nil || IsNil(o.Symbols) {
		var ret []CfuturesGetExchangeInfoV1RespSymbolsInner
		return ret
	}
	return o.Symbols
}

// GetSymbolsOk returns a tuple with the Symbols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CfuturesGetExchangeInfoV1Resp) GetSymbolsOk() ([]CfuturesGetExchangeInfoV1RespSymbolsInner, bool) {
	if o == nil || IsNil(o.Symbols) {
		return nil, false
	}
	return o.Symbols, true
}

// HasSymbols returns a boolean if a field has been set.
func (o *CfuturesGetExchangeInfoV1Resp) HasSymbols() bool {
	if o != nil && !IsNil(o.Symbols) {
		return true
	}

	return false
}

// SetSymbols gets a reference to the given []CfuturesGetExchangeInfoV1RespSymbolsInner and assigns it to the Symbols field.
func (o *CfuturesGetExchangeInfoV1Resp) SetSymbols(v []CfuturesGetExchangeInfoV1RespSymbolsInner) {
	o.Symbols = v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *CfuturesGetExchangeInfoV1Resp) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CfuturesGetExchangeInfoV1Resp) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *CfuturesGetExchangeInfoV1Resp) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *CfuturesGetExchangeInfoV1Resp) SetTimezone(v string) {
	o.Timezone = &v
}

func (o CfuturesGetExchangeInfoV1Resp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CfuturesGetExchangeInfoV1Resp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExchangeFilters) {
		toSerialize["exchangeFilters"] = o.ExchangeFilters
	}
	if !IsNil(o.RateLimits) {
		toSerialize["rateLimits"] = o.RateLimits
	}
	if !IsNil(o.ServerTime) {
		toSerialize["serverTime"] = o.ServerTime
	}
	if !IsNil(o.Symbols) {
		toSerialize["symbols"] = o.Symbols
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	return toSerialize, nil
}

type NullableCfuturesGetExchangeInfoV1Resp struct {
	value *CfuturesGetExchangeInfoV1Resp
	isSet bool
}

func (v NullableCfuturesGetExchangeInfoV1Resp) Get() *CfuturesGetExchangeInfoV1Resp {
	return v.value
}

func (v *NullableCfuturesGetExchangeInfoV1Resp) Set(val *CfuturesGetExchangeInfoV1Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableCfuturesGetExchangeInfoV1Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableCfuturesGetExchangeInfoV1Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCfuturesGetExchangeInfoV1Resp(val *CfuturesGetExchangeInfoV1Resp) *NullableCfuturesGetExchangeInfoV1Resp {
	return &NullableCfuturesGetExchangeInfoV1Resp{value: val, isSet: true}
}

func (v NullableCfuturesGetExchangeInfoV1Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCfuturesGetExchangeInfoV1Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



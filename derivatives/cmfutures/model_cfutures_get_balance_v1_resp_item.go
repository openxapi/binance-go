/*
Binance Cfutures API

OpenAPI specification for Binance cryptocurrency exchange - Cfutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cmfutures

import (
	"encoding/json"
)

// checks if the CfuturesGetBalanceV1RespItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CfuturesGetBalanceV1RespItem{}

// CfuturesGetBalanceV1RespItem struct for CfuturesGetBalanceV1RespItem
type CfuturesGetBalanceV1RespItem struct {
	AccountAlias *string `json:"accountAlias,omitempty"`
	Asset *string `json:"asset,omitempty"`
	AvailableBalance *string `json:"availableBalance,omitempty"`
	Balance *string `json:"balance,omitempty"`
	CrossUnPnl *string `json:"crossUnPnl,omitempty"`
	CrossWalletBalance *string `json:"crossWalletBalance,omitempty"`
	UpdateTime *int64 `json:"updateTime,omitempty"`
	WithdrawAvailable *string `json:"withdrawAvailable,omitempty"`
}

// NewCfuturesGetBalanceV1RespItem instantiates a new CfuturesGetBalanceV1RespItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCfuturesGetBalanceV1RespItem() *CfuturesGetBalanceV1RespItem {
	this := CfuturesGetBalanceV1RespItem{}
	return &this
}

// NewCfuturesGetBalanceV1RespItemWithDefaults instantiates a new CfuturesGetBalanceV1RespItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCfuturesGetBalanceV1RespItemWithDefaults() *CfuturesGetBalanceV1RespItem {
	this := CfuturesGetBalanceV1RespItem{}
	return &this
}

// GetAccountAlias returns the AccountAlias field value if set, zero value otherwise.
func (o *CfuturesGetBalanceV1RespItem) GetAccountAlias() string {
	if o == nil || IsNil(o.AccountAlias) {
		var ret string
		return ret
	}
	return *o.AccountAlias
}

// GetAccountAliasOk returns a tuple with the AccountAlias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CfuturesGetBalanceV1RespItem) GetAccountAliasOk() (*string, bool) {
	if o == nil || IsNil(o.AccountAlias) {
		return nil, false
	}
	return o.AccountAlias, true
}

// HasAccountAlias returns a boolean if a field has been set.
func (o *CfuturesGetBalanceV1RespItem) HasAccountAlias() bool {
	if o != nil && !IsNil(o.AccountAlias) {
		return true
	}

	return false
}

// SetAccountAlias gets a reference to the given string and assigns it to the AccountAlias field.
func (o *CfuturesGetBalanceV1RespItem) SetAccountAlias(v string) {
	o.AccountAlias = &v
}

// GetAsset returns the Asset field value if set, zero value otherwise.
func (o *CfuturesGetBalanceV1RespItem) GetAsset() string {
	if o == nil || IsNil(o.Asset) {
		var ret string
		return ret
	}
	return *o.Asset
}

// GetAssetOk returns a tuple with the Asset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CfuturesGetBalanceV1RespItem) GetAssetOk() (*string, bool) {
	if o == nil || IsNil(o.Asset) {
		return nil, false
	}
	return o.Asset, true
}

// HasAsset returns a boolean if a field has been set.
func (o *CfuturesGetBalanceV1RespItem) HasAsset() bool {
	if o != nil && !IsNil(o.Asset) {
		return true
	}

	return false
}

// SetAsset gets a reference to the given string and assigns it to the Asset field.
func (o *CfuturesGetBalanceV1RespItem) SetAsset(v string) {
	o.Asset = &v
}

// GetAvailableBalance returns the AvailableBalance field value if set, zero value otherwise.
func (o *CfuturesGetBalanceV1RespItem) GetAvailableBalance() string {
	if o == nil || IsNil(o.AvailableBalance) {
		var ret string
		return ret
	}
	return *o.AvailableBalance
}

// GetAvailableBalanceOk returns a tuple with the AvailableBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CfuturesGetBalanceV1RespItem) GetAvailableBalanceOk() (*string, bool) {
	if o == nil || IsNil(o.AvailableBalance) {
		return nil, false
	}
	return o.AvailableBalance, true
}

// HasAvailableBalance returns a boolean if a field has been set.
func (o *CfuturesGetBalanceV1RespItem) HasAvailableBalance() bool {
	if o != nil && !IsNil(o.AvailableBalance) {
		return true
	}

	return false
}

// SetAvailableBalance gets a reference to the given string and assigns it to the AvailableBalance field.
func (o *CfuturesGetBalanceV1RespItem) SetAvailableBalance(v string) {
	o.AvailableBalance = &v
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *CfuturesGetBalanceV1RespItem) GetBalance() string {
	if o == nil || IsNil(o.Balance) {
		var ret string
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CfuturesGetBalanceV1RespItem) GetBalanceOk() (*string, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *CfuturesGetBalanceV1RespItem) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given string and assigns it to the Balance field.
func (o *CfuturesGetBalanceV1RespItem) SetBalance(v string) {
	o.Balance = &v
}

// GetCrossUnPnl returns the CrossUnPnl field value if set, zero value otherwise.
func (o *CfuturesGetBalanceV1RespItem) GetCrossUnPnl() string {
	if o == nil || IsNil(o.CrossUnPnl) {
		var ret string
		return ret
	}
	return *o.CrossUnPnl
}

// GetCrossUnPnlOk returns a tuple with the CrossUnPnl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CfuturesGetBalanceV1RespItem) GetCrossUnPnlOk() (*string, bool) {
	if o == nil || IsNil(o.CrossUnPnl) {
		return nil, false
	}
	return o.CrossUnPnl, true
}

// HasCrossUnPnl returns a boolean if a field has been set.
func (o *CfuturesGetBalanceV1RespItem) HasCrossUnPnl() bool {
	if o != nil && !IsNil(o.CrossUnPnl) {
		return true
	}

	return false
}

// SetCrossUnPnl gets a reference to the given string and assigns it to the CrossUnPnl field.
func (o *CfuturesGetBalanceV1RespItem) SetCrossUnPnl(v string) {
	o.CrossUnPnl = &v
}

// GetCrossWalletBalance returns the CrossWalletBalance field value if set, zero value otherwise.
func (o *CfuturesGetBalanceV1RespItem) GetCrossWalletBalance() string {
	if o == nil || IsNil(o.CrossWalletBalance) {
		var ret string
		return ret
	}
	return *o.CrossWalletBalance
}

// GetCrossWalletBalanceOk returns a tuple with the CrossWalletBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CfuturesGetBalanceV1RespItem) GetCrossWalletBalanceOk() (*string, bool) {
	if o == nil || IsNil(o.CrossWalletBalance) {
		return nil, false
	}
	return o.CrossWalletBalance, true
}

// HasCrossWalletBalance returns a boolean if a field has been set.
func (o *CfuturesGetBalanceV1RespItem) HasCrossWalletBalance() bool {
	if o != nil && !IsNil(o.CrossWalletBalance) {
		return true
	}

	return false
}

// SetCrossWalletBalance gets a reference to the given string and assigns it to the CrossWalletBalance field.
func (o *CfuturesGetBalanceV1RespItem) SetCrossWalletBalance(v string) {
	o.CrossWalletBalance = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *CfuturesGetBalanceV1RespItem) GetUpdateTime() int64 {
	if o == nil || IsNil(o.UpdateTime) {
		var ret int64
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CfuturesGetBalanceV1RespItem) GetUpdateTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *CfuturesGetBalanceV1RespItem) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given int64 and assigns it to the UpdateTime field.
func (o *CfuturesGetBalanceV1RespItem) SetUpdateTime(v int64) {
	o.UpdateTime = &v
}

// GetWithdrawAvailable returns the WithdrawAvailable field value if set, zero value otherwise.
func (o *CfuturesGetBalanceV1RespItem) GetWithdrawAvailable() string {
	if o == nil || IsNil(o.WithdrawAvailable) {
		var ret string
		return ret
	}
	return *o.WithdrawAvailable
}

// GetWithdrawAvailableOk returns a tuple with the WithdrawAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CfuturesGetBalanceV1RespItem) GetWithdrawAvailableOk() (*string, bool) {
	if o == nil || IsNil(o.WithdrawAvailable) {
		return nil, false
	}
	return o.WithdrawAvailable, true
}

// HasWithdrawAvailable returns a boolean if a field has been set.
func (o *CfuturesGetBalanceV1RespItem) HasWithdrawAvailable() bool {
	if o != nil && !IsNil(o.WithdrawAvailable) {
		return true
	}

	return false
}

// SetWithdrawAvailable gets a reference to the given string and assigns it to the WithdrawAvailable field.
func (o *CfuturesGetBalanceV1RespItem) SetWithdrawAvailable(v string) {
	o.WithdrawAvailable = &v
}

func (o CfuturesGetBalanceV1RespItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CfuturesGetBalanceV1RespItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountAlias) {
		toSerialize["accountAlias"] = o.AccountAlias
	}
	if !IsNil(o.Asset) {
		toSerialize["asset"] = o.Asset
	}
	if !IsNil(o.AvailableBalance) {
		toSerialize["availableBalance"] = o.AvailableBalance
	}
	if !IsNil(o.Balance) {
		toSerialize["balance"] = o.Balance
	}
	if !IsNil(o.CrossUnPnl) {
		toSerialize["crossUnPnl"] = o.CrossUnPnl
	}
	if !IsNil(o.CrossWalletBalance) {
		toSerialize["crossWalletBalance"] = o.CrossWalletBalance
	}
	if !IsNil(o.UpdateTime) {
		toSerialize["updateTime"] = o.UpdateTime
	}
	if !IsNil(o.WithdrawAvailable) {
		toSerialize["withdrawAvailable"] = o.WithdrawAvailable
	}
	return toSerialize, nil
}

type NullableCfuturesGetBalanceV1RespItem struct {
	value *CfuturesGetBalanceV1RespItem
	isSet bool
}

func (v NullableCfuturesGetBalanceV1RespItem) Get() *CfuturesGetBalanceV1RespItem {
	return v.value
}

func (v *NullableCfuturesGetBalanceV1RespItem) Set(val *CfuturesGetBalanceV1RespItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCfuturesGetBalanceV1RespItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCfuturesGetBalanceV1RespItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCfuturesGetBalanceV1RespItem(val *CfuturesGetBalanceV1RespItem) *NullableCfuturesGetBalanceV1RespItem {
	return &NullableCfuturesGetBalanceV1RespItem{value: val, isSet: true}
}

func (v NullableCfuturesGetBalanceV1RespItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCfuturesGetBalanceV1RespItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Binance COIN-M Futures API

OpenAPI specification for Binance exchange - Cmfutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cmfutures

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem{}

// CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem struct for CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem
type CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem struct {
	OrderId *int64 `json:"orderId,omitempty"`
	OrigClientOrderId *string `json:"origClientOrderId,omitempty"`
	Price *string `json:"price,omitempty"`
	Quantity *string `json:"quantity,omitempty"`
	RecvWindow *int64 `json:"recvWindow,omitempty"`
	Side string `json:"side"`
	Symbol string `json:"symbol"`
	Timestamp int64 `json:"timestamp"`
}

type _CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem

// NewCmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem instantiates a new CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem(side string, symbol string, timestamp int64) *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem {
	this := CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem{}
	var origClientOrderId string = ""
	this.OrigClientOrderId = &origClientOrderId
	var price string = ""
	this.Price = &price
	var quantity string = ""
	this.Quantity = &quantity
	this.Side = side
	this.Symbol = symbol
	this.Timestamp = timestamp
	return &this
}

// NewCmfuturesUpdateBatchOrdersV1ReqBatchOrdersItemWithDefaults instantiates a new CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCmfuturesUpdateBatchOrdersV1ReqBatchOrdersItemWithDefaults() *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem {
	this := CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem{}
	var origClientOrderId string = ""
	this.OrigClientOrderId = &origClientOrderId
	var price string = ""
	this.Price = &price
	var quantity string = ""
	this.Quantity = &quantity
	var side string = ""
	this.Side = side
	var symbol string = ""
	this.Symbol = symbol
	return &this
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) GetOrderId() int64 {
	if o == nil || IsNil(o.OrderId) {
		var ret int64
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) GetOrderIdOk() (*int64, bool) {
	if o == nil || IsNil(o.OrderId) {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) HasOrderId() bool {
	if o != nil && !IsNil(o.OrderId) {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given int64 and assigns it to the OrderId field.
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) SetOrderId(v int64) {
	o.OrderId = &v
}

// GetOrigClientOrderId returns the OrigClientOrderId field value if set, zero value otherwise.
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) GetOrigClientOrderId() string {
	if o == nil || IsNil(o.OrigClientOrderId) {
		var ret string
		return ret
	}
	return *o.OrigClientOrderId
}

// GetOrigClientOrderIdOk returns a tuple with the OrigClientOrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) GetOrigClientOrderIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrigClientOrderId) {
		return nil, false
	}
	return o.OrigClientOrderId, true
}

// HasOrigClientOrderId returns a boolean if a field has been set.
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) HasOrigClientOrderId() bool {
	if o != nil && !IsNil(o.OrigClientOrderId) {
		return true
	}

	return false
}

// SetOrigClientOrderId gets a reference to the given string and assigns it to the OrigClientOrderId field.
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) SetOrigClientOrderId(v string) {
	o.OrigClientOrderId = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) GetPrice() string {
	if o == nil || IsNil(o.Price) {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) GetPriceOk() (*string, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) SetPrice(v string) {
	o.Price = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) GetQuantity() string {
	if o == nil || IsNil(o.Quantity) {
		var ret string
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) GetQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given string and assigns it to the Quantity field.
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) SetQuantity(v string) {
	o.Quantity = &v
}

// GetRecvWindow returns the RecvWindow field value if set, zero value otherwise.
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) GetRecvWindow() int64 {
	if o == nil || IsNil(o.RecvWindow) {
		var ret int64
		return ret
	}
	return *o.RecvWindow
}

// GetRecvWindowOk returns a tuple with the RecvWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) GetRecvWindowOk() (*int64, bool) {
	if o == nil || IsNil(o.RecvWindow) {
		return nil, false
	}
	return o.RecvWindow, true
}

// HasRecvWindow returns a boolean if a field has been set.
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) HasRecvWindow() bool {
	if o != nil && !IsNil(o.RecvWindow) {
		return true
	}

	return false
}

// SetRecvWindow gets a reference to the given int64 and assigns it to the RecvWindow field.
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) SetRecvWindow(v int64) {
	o.RecvWindow = &v
}

// GetSide returns the Side field value
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) GetSide() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Side
}

// GetSideOk returns a tuple with the Side field value
// and a boolean to check if the value has been set.
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) GetSideOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Side, true
}

// SetSide sets field value
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) SetSide(v string) {
	o.Side = v
}

// GetSymbol returns the Symbol field value
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) SetSymbol(v string) {
	o.Symbol = v
}

// GetTimestamp returns the Timestamp field value
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) SetTimestamp(v int64) {
	o.Timestamp = v
}

func (o CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OrderId) {
		toSerialize["orderId"] = o.OrderId
	}
	if !IsNil(o.OrigClientOrderId) {
		toSerialize["origClientOrderId"] = o.OrigClientOrderId
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.RecvWindow) {
		toSerialize["recvWindow"] = o.RecvWindow
	}
	toSerialize["side"] = o.Side
	toSerialize["symbol"] = o.Symbol
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

func (o *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"side",
		"symbol",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem := _CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem)

	if err != nil {
		return err
	}

	*o = CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem(varCmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem)

	return err
}

type NullableCmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem struct {
	value *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem
	isSet bool
}

func (v NullableCmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) Get() *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem {
	return v.value
}

func (v *NullableCmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) Set(val *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem(val *CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) *NullableCmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem {
	return &NullableCmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem{value: val, isSet: true}
}

func (v NullableCmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



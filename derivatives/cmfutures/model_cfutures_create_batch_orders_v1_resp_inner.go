/*
Binance Cfutures API

OpenAPI specification for Binance cryptocurrency exchange - Cfutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cmfutures

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// CfuturesCreateBatchOrdersV1RespInner - struct for CfuturesCreateBatchOrdersV1RespInner
type CfuturesCreateBatchOrdersV1RespInner struct {
	APIError *APIError
	CfuturesCreateBatchOrdersV1RespItem *CfuturesCreateBatchOrdersV1RespItem
}

// APIErrorAsCfuturesCreateBatchOrdersV1RespInner is a convenience function that returns APIError wrapped in CfuturesCreateBatchOrdersV1RespInner
func APIErrorAsCfuturesCreateBatchOrdersV1RespInner(v *APIError) CfuturesCreateBatchOrdersV1RespInner {
	return CfuturesCreateBatchOrdersV1RespInner{
		APIError: v,
	}
}

// CfuturesCreateBatchOrdersV1RespItemAsCfuturesCreateBatchOrdersV1RespInner is a convenience function that returns CfuturesCreateBatchOrdersV1RespItem wrapped in CfuturesCreateBatchOrdersV1RespInner
func CfuturesCreateBatchOrdersV1RespItemAsCfuturesCreateBatchOrdersV1RespInner(v *CfuturesCreateBatchOrdersV1RespItem) CfuturesCreateBatchOrdersV1RespInner {
	return CfuturesCreateBatchOrdersV1RespInner{
		CfuturesCreateBatchOrdersV1RespItem: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CfuturesCreateBatchOrdersV1RespInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into APIError
	err = newStrictDecoder(data).Decode(&dst.APIError)
	if err == nil {
		jsonAPIError, _ := json.Marshal(dst.APIError)
		if string(jsonAPIError) == "{}" { // empty struct
			dst.APIError = nil
		} else {
			if err = validator.Validate(dst.APIError); err != nil {
				dst.APIError = nil
			} else {
				match++
			}
		}
	} else {
		dst.APIError = nil
	}

	// try to unmarshal data into CfuturesCreateBatchOrdersV1RespItem
	err = newStrictDecoder(data).Decode(&dst.CfuturesCreateBatchOrdersV1RespItem)
	if err == nil {
		jsonCfuturesCreateBatchOrdersV1RespItem, _ := json.Marshal(dst.CfuturesCreateBatchOrdersV1RespItem)
		if string(jsonCfuturesCreateBatchOrdersV1RespItem) == "{}" { // empty struct
			dst.CfuturesCreateBatchOrdersV1RespItem = nil
		} else {
			if err = validator.Validate(dst.CfuturesCreateBatchOrdersV1RespItem); err != nil {
				dst.CfuturesCreateBatchOrdersV1RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.CfuturesCreateBatchOrdersV1RespItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.APIError = nil
		dst.CfuturesCreateBatchOrdersV1RespItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CfuturesCreateBatchOrdersV1RespInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CfuturesCreateBatchOrdersV1RespInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CfuturesCreateBatchOrdersV1RespInner) MarshalJSON() ([]byte, error) {
	if src.APIError != nil {
		return json.Marshal(&src.APIError)
	}

	if src.CfuturesCreateBatchOrdersV1RespItem != nil {
		return json.Marshal(&src.CfuturesCreateBatchOrdersV1RespItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CfuturesCreateBatchOrdersV1RespInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.APIError != nil {
		return obj.APIError
	}

	if obj.CfuturesCreateBatchOrdersV1RespItem != nil {
		return obj.CfuturesCreateBatchOrdersV1RespItem
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CfuturesCreateBatchOrdersV1RespInner) GetActualInstanceValue() (interface{}) {
	if obj.APIError != nil {
		return *obj.APIError
	}

	if obj.CfuturesCreateBatchOrdersV1RespItem != nil {
		return *obj.CfuturesCreateBatchOrdersV1RespItem
	}

	// all schemas are nil
	return nil
}

type NullableCfuturesCreateBatchOrdersV1RespInner struct {
	value *CfuturesCreateBatchOrdersV1RespInner
	isSet bool
}

func (v NullableCfuturesCreateBatchOrdersV1RespInner) Get() *CfuturesCreateBatchOrdersV1RespInner {
	return v.value
}

func (v *NullableCfuturesCreateBatchOrdersV1RespInner) Set(val *CfuturesCreateBatchOrdersV1RespInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCfuturesCreateBatchOrdersV1RespInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCfuturesCreateBatchOrdersV1RespInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCfuturesCreateBatchOrdersV1RespInner(val *CfuturesCreateBatchOrdersV1RespInner) *NullableCfuturesCreateBatchOrdersV1RespInner {
	return &NullableCfuturesCreateBatchOrdersV1RespInner{value: val, isSet: true}
}

func (v NullableCfuturesCreateBatchOrdersV1RespInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCfuturesCreateBatchOrdersV1RespInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



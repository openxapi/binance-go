/*
Binance Options API

OpenAPI specification for Binance cryptocurrency exchange - Options API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package options

import (
	"encoding/json"
)

// checks if the OptionsGetBlockTradesV1RespItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OptionsGetBlockTradesV1RespItem{}

// OptionsGetBlockTradesV1RespItem struct for OptionsGetBlockTradesV1RespItem
type OptionsGetBlockTradesV1RespItem struct {
	Id *int32 `json:"id,omitempty"`
	Price *string `json:"price,omitempty"`
	Qty *string `json:"qty,omitempty"`
	QuoteQty *string `json:"quoteQty,omitempty"`
	Side *int32 `json:"side,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Time *int64 `json:"time,omitempty"`
	TradeId *int64 `json:"tradeId,omitempty"`
}

// NewOptionsGetBlockTradesV1RespItem instantiates a new OptionsGetBlockTradesV1RespItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptionsGetBlockTradesV1RespItem() *OptionsGetBlockTradesV1RespItem {
	this := OptionsGetBlockTradesV1RespItem{}
	return &this
}

// NewOptionsGetBlockTradesV1RespItemWithDefaults instantiates a new OptionsGetBlockTradesV1RespItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionsGetBlockTradesV1RespItemWithDefaults() *OptionsGetBlockTradesV1RespItem {
	this := OptionsGetBlockTradesV1RespItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OptionsGetBlockTradesV1RespItem) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsGetBlockTradesV1RespItem) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OptionsGetBlockTradesV1RespItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *OptionsGetBlockTradesV1RespItem) SetId(v int32) {
	o.Id = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *OptionsGetBlockTradesV1RespItem) GetPrice() string {
	if o == nil || IsNil(o.Price) {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsGetBlockTradesV1RespItem) GetPriceOk() (*string, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *OptionsGetBlockTradesV1RespItem) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *OptionsGetBlockTradesV1RespItem) SetPrice(v string) {
	o.Price = &v
}

// GetQty returns the Qty field value if set, zero value otherwise.
func (o *OptionsGetBlockTradesV1RespItem) GetQty() string {
	if o == nil || IsNil(o.Qty) {
		var ret string
		return ret
	}
	return *o.Qty
}

// GetQtyOk returns a tuple with the Qty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsGetBlockTradesV1RespItem) GetQtyOk() (*string, bool) {
	if o == nil || IsNil(o.Qty) {
		return nil, false
	}
	return o.Qty, true
}

// HasQty returns a boolean if a field has been set.
func (o *OptionsGetBlockTradesV1RespItem) HasQty() bool {
	if o != nil && !IsNil(o.Qty) {
		return true
	}

	return false
}

// SetQty gets a reference to the given string and assigns it to the Qty field.
func (o *OptionsGetBlockTradesV1RespItem) SetQty(v string) {
	o.Qty = &v
}

// GetQuoteQty returns the QuoteQty field value if set, zero value otherwise.
func (o *OptionsGetBlockTradesV1RespItem) GetQuoteQty() string {
	if o == nil || IsNil(o.QuoteQty) {
		var ret string
		return ret
	}
	return *o.QuoteQty
}

// GetQuoteQtyOk returns a tuple with the QuoteQty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsGetBlockTradesV1RespItem) GetQuoteQtyOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteQty) {
		return nil, false
	}
	return o.QuoteQty, true
}

// HasQuoteQty returns a boolean if a field has been set.
func (o *OptionsGetBlockTradesV1RespItem) HasQuoteQty() bool {
	if o != nil && !IsNil(o.QuoteQty) {
		return true
	}

	return false
}

// SetQuoteQty gets a reference to the given string and assigns it to the QuoteQty field.
func (o *OptionsGetBlockTradesV1RespItem) SetQuoteQty(v string) {
	o.QuoteQty = &v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *OptionsGetBlockTradesV1RespItem) GetSide() int32 {
	if o == nil || IsNil(o.Side) {
		var ret int32
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsGetBlockTradesV1RespItem) GetSideOk() (*int32, bool) {
	if o == nil || IsNil(o.Side) {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *OptionsGetBlockTradesV1RespItem) HasSide() bool {
	if o != nil && !IsNil(o.Side) {
		return true
	}

	return false
}

// SetSide gets a reference to the given int32 and assigns it to the Side field.
func (o *OptionsGetBlockTradesV1RespItem) SetSide(v int32) {
	o.Side = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *OptionsGetBlockTradesV1RespItem) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsGetBlockTradesV1RespItem) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *OptionsGetBlockTradesV1RespItem) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *OptionsGetBlockTradesV1RespItem) SetSymbol(v string) {
	o.Symbol = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *OptionsGetBlockTradesV1RespItem) GetTime() int64 {
	if o == nil || IsNil(o.Time) {
		var ret int64
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsGetBlockTradesV1RespItem) GetTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *OptionsGetBlockTradesV1RespItem) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given int64 and assigns it to the Time field.
func (o *OptionsGetBlockTradesV1RespItem) SetTime(v int64) {
	o.Time = &v
}

// GetTradeId returns the TradeId field value if set, zero value otherwise.
func (o *OptionsGetBlockTradesV1RespItem) GetTradeId() int64 {
	if o == nil || IsNil(o.TradeId) {
		var ret int64
		return ret
	}
	return *o.TradeId
}

// GetTradeIdOk returns a tuple with the TradeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsGetBlockTradesV1RespItem) GetTradeIdOk() (*int64, bool) {
	if o == nil || IsNil(o.TradeId) {
		return nil, false
	}
	return o.TradeId, true
}

// HasTradeId returns a boolean if a field has been set.
func (o *OptionsGetBlockTradesV1RespItem) HasTradeId() bool {
	if o != nil && !IsNil(o.TradeId) {
		return true
	}

	return false
}

// SetTradeId gets a reference to the given int64 and assigns it to the TradeId field.
func (o *OptionsGetBlockTradesV1RespItem) SetTradeId(v int64) {
	o.TradeId = &v
}

func (o OptionsGetBlockTradesV1RespItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OptionsGetBlockTradesV1RespItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Qty) {
		toSerialize["qty"] = o.Qty
	}
	if !IsNil(o.QuoteQty) {
		toSerialize["quoteQty"] = o.QuoteQty
	}
	if !IsNil(o.Side) {
		toSerialize["side"] = o.Side
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.TradeId) {
		toSerialize["tradeId"] = o.TradeId
	}
	return toSerialize, nil
}

type NullableOptionsGetBlockTradesV1RespItem struct {
	value *OptionsGetBlockTradesV1RespItem
	isSet bool
}

func (v NullableOptionsGetBlockTradesV1RespItem) Get() *OptionsGetBlockTradesV1RespItem {
	return v.value
}

func (v *NullableOptionsGetBlockTradesV1RespItem) Set(val *OptionsGetBlockTradesV1RespItem) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionsGetBlockTradesV1RespItem) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionsGetBlockTradesV1RespItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionsGetBlockTradesV1RespItem(val *OptionsGetBlockTradesV1RespItem) *NullableOptionsGetBlockTradesV1RespItem {
	return &NullableOptionsGetBlockTradesV1RespItem{value: val, isSet: true}
}

func (v NullableOptionsGetBlockTradesV1RespItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionsGetBlockTradesV1RespItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



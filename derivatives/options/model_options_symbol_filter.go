/*
Binance Options API

OpenAPI specification for Binance cryptocurrency exchange - Options API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package options

import (
	"encoding/json"
)

// checks if the OptionsSymbolFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OptionsSymbolFilter{}

// OptionsSymbolFilter struct for OptionsSymbolFilter
type OptionsSymbolFilter struct {
	FilterType *string `json:"filterType,omitempty"`
	MaxPrice *string `json:"maxPrice,omitempty"`
	MaxQty *string `json:"maxQty,omitempty"`
	MinPrice *string `json:"minPrice,omitempty"`
	MinQty *string `json:"minQty,omitempty"`
	StepSize *string `json:"stepSize,omitempty"`
	TickSize *string `json:"tickSize,omitempty"`
}

// NewOptionsSymbolFilter instantiates a new OptionsSymbolFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptionsSymbolFilter() *OptionsSymbolFilter {
	this := OptionsSymbolFilter{}
	return &this
}

// NewOptionsSymbolFilterWithDefaults instantiates a new OptionsSymbolFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionsSymbolFilterWithDefaults() *OptionsSymbolFilter {
	this := OptionsSymbolFilter{}
	return &this
}

// GetFilterType returns the FilterType field value if set, zero value otherwise.
func (o *OptionsSymbolFilter) GetFilterType() string {
	if o == nil || IsNil(o.FilterType) {
		var ret string
		return ret
	}
	return *o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsSymbolFilter) GetFilterTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FilterType) {
		return nil, false
	}
	return o.FilterType, true
}

// HasFilterType returns a boolean if a field has been set.
func (o *OptionsSymbolFilter) HasFilterType() bool {
	if o != nil && !IsNil(o.FilterType) {
		return true
	}

	return false
}

// SetFilterType gets a reference to the given string and assigns it to the FilterType field.
func (o *OptionsSymbolFilter) SetFilterType(v string) {
	o.FilterType = &v
}

// GetMaxPrice returns the MaxPrice field value if set, zero value otherwise.
func (o *OptionsSymbolFilter) GetMaxPrice() string {
	if o == nil || IsNil(o.MaxPrice) {
		var ret string
		return ret
	}
	return *o.MaxPrice
}

// GetMaxPriceOk returns a tuple with the MaxPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsSymbolFilter) GetMaxPriceOk() (*string, bool) {
	if o == nil || IsNil(o.MaxPrice) {
		return nil, false
	}
	return o.MaxPrice, true
}

// HasMaxPrice returns a boolean if a field has been set.
func (o *OptionsSymbolFilter) HasMaxPrice() bool {
	if o != nil && !IsNil(o.MaxPrice) {
		return true
	}

	return false
}

// SetMaxPrice gets a reference to the given string and assigns it to the MaxPrice field.
func (o *OptionsSymbolFilter) SetMaxPrice(v string) {
	o.MaxPrice = &v
}

// GetMaxQty returns the MaxQty field value if set, zero value otherwise.
func (o *OptionsSymbolFilter) GetMaxQty() string {
	if o == nil || IsNil(o.MaxQty) {
		var ret string
		return ret
	}
	return *o.MaxQty
}

// GetMaxQtyOk returns a tuple with the MaxQty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsSymbolFilter) GetMaxQtyOk() (*string, bool) {
	if o == nil || IsNil(o.MaxQty) {
		return nil, false
	}
	return o.MaxQty, true
}

// HasMaxQty returns a boolean if a field has been set.
func (o *OptionsSymbolFilter) HasMaxQty() bool {
	if o != nil && !IsNil(o.MaxQty) {
		return true
	}

	return false
}

// SetMaxQty gets a reference to the given string and assigns it to the MaxQty field.
func (o *OptionsSymbolFilter) SetMaxQty(v string) {
	o.MaxQty = &v
}

// GetMinPrice returns the MinPrice field value if set, zero value otherwise.
func (o *OptionsSymbolFilter) GetMinPrice() string {
	if o == nil || IsNil(o.MinPrice) {
		var ret string
		return ret
	}
	return *o.MinPrice
}

// GetMinPriceOk returns a tuple with the MinPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsSymbolFilter) GetMinPriceOk() (*string, bool) {
	if o == nil || IsNil(o.MinPrice) {
		return nil, false
	}
	return o.MinPrice, true
}

// HasMinPrice returns a boolean if a field has been set.
func (o *OptionsSymbolFilter) HasMinPrice() bool {
	if o != nil && !IsNil(o.MinPrice) {
		return true
	}

	return false
}

// SetMinPrice gets a reference to the given string and assigns it to the MinPrice field.
func (o *OptionsSymbolFilter) SetMinPrice(v string) {
	o.MinPrice = &v
}

// GetMinQty returns the MinQty field value if set, zero value otherwise.
func (o *OptionsSymbolFilter) GetMinQty() string {
	if o == nil || IsNil(o.MinQty) {
		var ret string
		return ret
	}
	return *o.MinQty
}

// GetMinQtyOk returns a tuple with the MinQty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsSymbolFilter) GetMinQtyOk() (*string, bool) {
	if o == nil || IsNil(o.MinQty) {
		return nil, false
	}
	return o.MinQty, true
}

// HasMinQty returns a boolean if a field has been set.
func (o *OptionsSymbolFilter) HasMinQty() bool {
	if o != nil && !IsNil(o.MinQty) {
		return true
	}

	return false
}

// SetMinQty gets a reference to the given string and assigns it to the MinQty field.
func (o *OptionsSymbolFilter) SetMinQty(v string) {
	o.MinQty = &v
}

// GetStepSize returns the StepSize field value if set, zero value otherwise.
func (o *OptionsSymbolFilter) GetStepSize() string {
	if o == nil || IsNil(o.StepSize) {
		var ret string
		return ret
	}
	return *o.StepSize
}

// GetStepSizeOk returns a tuple with the StepSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsSymbolFilter) GetStepSizeOk() (*string, bool) {
	if o == nil || IsNil(o.StepSize) {
		return nil, false
	}
	return o.StepSize, true
}

// HasStepSize returns a boolean if a field has been set.
func (o *OptionsSymbolFilter) HasStepSize() bool {
	if o != nil && !IsNil(o.StepSize) {
		return true
	}

	return false
}

// SetStepSize gets a reference to the given string and assigns it to the StepSize field.
func (o *OptionsSymbolFilter) SetStepSize(v string) {
	o.StepSize = &v
}

// GetTickSize returns the TickSize field value if set, zero value otherwise.
func (o *OptionsSymbolFilter) GetTickSize() string {
	if o == nil || IsNil(o.TickSize) {
		var ret string
		return ret
	}
	return *o.TickSize
}

// GetTickSizeOk returns a tuple with the TickSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsSymbolFilter) GetTickSizeOk() (*string, bool) {
	if o == nil || IsNil(o.TickSize) {
		return nil, false
	}
	return o.TickSize, true
}

// HasTickSize returns a boolean if a field has been set.
func (o *OptionsSymbolFilter) HasTickSize() bool {
	if o != nil && !IsNil(o.TickSize) {
		return true
	}

	return false
}

// SetTickSize gets a reference to the given string and assigns it to the TickSize field.
func (o *OptionsSymbolFilter) SetTickSize(v string) {
	o.TickSize = &v
}

func (o OptionsSymbolFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OptionsSymbolFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FilterType) {
		toSerialize["filterType"] = o.FilterType
	}
	if !IsNil(o.MaxPrice) {
		toSerialize["maxPrice"] = o.MaxPrice
	}
	if !IsNil(o.MaxQty) {
		toSerialize["maxQty"] = o.MaxQty
	}
	if !IsNil(o.MinPrice) {
		toSerialize["minPrice"] = o.MinPrice
	}
	if !IsNil(o.MinQty) {
		toSerialize["minQty"] = o.MinQty
	}
	if !IsNil(o.StepSize) {
		toSerialize["stepSize"] = o.StepSize
	}
	if !IsNil(o.TickSize) {
		toSerialize["tickSize"] = o.TickSize
	}
	return toSerialize, nil
}

type NullableOptionsSymbolFilter struct {
	value *OptionsSymbolFilter
	isSet bool
}

func (v NullableOptionsSymbolFilter) Get() *OptionsSymbolFilter {
	return v.value
}

func (v *NullableOptionsSymbolFilter) Set(val *OptionsSymbolFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionsSymbolFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionsSymbolFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionsSymbolFilter(val *OptionsSymbolFilter) *NullableOptionsSymbolFilter {
	return &NullableOptionsSymbolFilter{value: val, isSet: true}
}

func (v NullableOptionsSymbolFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionsSymbolFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



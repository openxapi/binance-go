/*
Binance Portfolio Margin API

OpenAPI specification for Binance exchange - Pmargin API

API version: 0.2.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmargin

import (
	"encoding/json"
)

// checks if the CreateUmLeverageV1Resp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateUmLeverageV1Resp{}

// CreateUmLeverageV1Resp struct for CreateUmLeverageV1Resp
type CreateUmLeverageV1Resp struct {
	Leverage *int32 `json:"leverage,omitempty"`
	MaxNotionalValue *string `json:"maxNotionalValue,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
}

// NewCreateUmLeverageV1Resp instantiates a new CreateUmLeverageV1Resp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUmLeverageV1Resp() *CreateUmLeverageV1Resp {
	this := CreateUmLeverageV1Resp{}
	return &this
}

// NewCreateUmLeverageV1RespWithDefaults instantiates a new CreateUmLeverageV1Resp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUmLeverageV1RespWithDefaults() *CreateUmLeverageV1Resp {
	this := CreateUmLeverageV1Resp{}
	return &this
}

// GetLeverage returns the Leverage field value if set, zero value otherwise.
func (o *CreateUmLeverageV1Resp) GetLeverage() int32 {
	if o == nil || IsNil(o.Leverage) {
		var ret int32
		return ret
	}
	return *o.Leverage
}

// GetLeverageOk returns a tuple with the Leverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUmLeverageV1Resp) GetLeverageOk() (*int32, bool) {
	if o == nil || IsNil(o.Leverage) {
		return nil, false
	}
	return o.Leverage, true
}

// HasLeverage returns a boolean if a field has been set.
func (o *CreateUmLeverageV1Resp) HasLeverage() bool {
	if o != nil && !IsNil(o.Leverage) {
		return true
	}

	return false
}

// SetLeverage gets a reference to the given int32 and assigns it to the Leverage field.
func (o *CreateUmLeverageV1Resp) SetLeverage(v int32) {
	o.Leverage = &v
}

// GetMaxNotionalValue returns the MaxNotionalValue field value if set, zero value otherwise.
func (o *CreateUmLeverageV1Resp) GetMaxNotionalValue() string {
	if o == nil || IsNil(o.MaxNotionalValue) {
		var ret string
		return ret
	}
	return *o.MaxNotionalValue
}

// GetMaxNotionalValueOk returns a tuple with the MaxNotionalValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUmLeverageV1Resp) GetMaxNotionalValueOk() (*string, bool) {
	if o == nil || IsNil(o.MaxNotionalValue) {
		return nil, false
	}
	return o.MaxNotionalValue, true
}

// HasMaxNotionalValue returns a boolean if a field has been set.
func (o *CreateUmLeverageV1Resp) HasMaxNotionalValue() bool {
	if o != nil && !IsNil(o.MaxNotionalValue) {
		return true
	}

	return false
}

// SetMaxNotionalValue gets a reference to the given string and assigns it to the MaxNotionalValue field.
func (o *CreateUmLeverageV1Resp) SetMaxNotionalValue(v string) {
	o.MaxNotionalValue = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *CreateUmLeverageV1Resp) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUmLeverageV1Resp) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *CreateUmLeverageV1Resp) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *CreateUmLeverageV1Resp) SetSymbol(v string) {
	o.Symbol = &v
}

func (o CreateUmLeverageV1Resp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateUmLeverageV1Resp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Leverage) {
		toSerialize["leverage"] = o.Leverage
	}
	if !IsNil(o.MaxNotionalValue) {
		toSerialize["maxNotionalValue"] = o.MaxNotionalValue
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	return toSerialize, nil
}

type NullableCreateUmLeverageV1Resp struct {
	value *CreateUmLeverageV1Resp
	isSet bool
}

func (v NullableCreateUmLeverageV1Resp) Get() *CreateUmLeverageV1Resp {
	return v.value
}

func (v *NullableCreateUmLeverageV1Resp) Set(val *CreateUmLeverageV1Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUmLeverageV1Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUmLeverageV1Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUmLeverageV1Resp(val *CreateUmLeverageV1Resp) *NullableCreateUmLeverageV1Resp {
	return &NullableCreateUmLeverageV1Resp{value: val, isSet: true}
}

func (v NullableCreateUmLeverageV1Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUmLeverageV1Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



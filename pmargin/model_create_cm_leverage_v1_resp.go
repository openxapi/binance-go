/*
Binance Portfolio Margin API

OpenAPI specification for Binance exchange - Pmargin API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmargin

import (
	"encoding/json"
)

// checks if the CreateCmLeverageV1Resp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCmLeverageV1Resp{}

// CreateCmLeverageV1Resp struct for CreateCmLeverageV1Resp
type CreateCmLeverageV1Resp struct {
	Leverage *int32 `json:"leverage,omitempty"`
	MaxQty *string `json:"maxQty,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
}

// NewCreateCmLeverageV1Resp instantiates a new CreateCmLeverageV1Resp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCmLeverageV1Resp() *CreateCmLeverageV1Resp {
	this := CreateCmLeverageV1Resp{}
	return &this
}

// NewCreateCmLeverageV1RespWithDefaults instantiates a new CreateCmLeverageV1Resp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCmLeverageV1RespWithDefaults() *CreateCmLeverageV1Resp {
	this := CreateCmLeverageV1Resp{}
	return &this
}

// GetLeverage returns the Leverage field value if set, zero value otherwise.
func (o *CreateCmLeverageV1Resp) GetLeverage() int32 {
	if o == nil || IsNil(o.Leverage) {
		var ret int32
		return ret
	}
	return *o.Leverage
}

// GetLeverageOk returns a tuple with the Leverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCmLeverageV1Resp) GetLeverageOk() (*int32, bool) {
	if o == nil || IsNil(o.Leverage) {
		return nil, false
	}
	return o.Leverage, true
}

// HasLeverage returns a boolean if a field has been set.
func (o *CreateCmLeverageV1Resp) HasLeverage() bool {
	if o != nil && !IsNil(o.Leverage) {
		return true
	}

	return false
}

// SetLeverage gets a reference to the given int32 and assigns it to the Leverage field.
func (o *CreateCmLeverageV1Resp) SetLeverage(v int32) {
	o.Leverage = &v
}

// GetMaxQty returns the MaxQty field value if set, zero value otherwise.
func (o *CreateCmLeverageV1Resp) GetMaxQty() string {
	if o == nil || IsNil(o.MaxQty) {
		var ret string
		return ret
	}
	return *o.MaxQty
}

// GetMaxQtyOk returns a tuple with the MaxQty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCmLeverageV1Resp) GetMaxQtyOk() (*string, bool) {
	if o == nil || IsNil(o.MaxQty) {
		return nil, false
	}
	return o.MaxQty, true
}

// HasMaxQty returns a boolean if a field has been set.
func (o *CreateCmLeverageV1Resp) HasMaxQty() bool {
	if o != nil && !IsNil(o.MaxQty) {
		return true
	}

	return false
}

// SetMaxQty gets a reference to the given string and assigns it to the MaxQty field.
func (o *CreateCmLeverageV1Resp) SetMaxQty(v string) {
	o.MaxQty = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *CreateCmLeverageV1Resp) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCmLeverageV1Resp) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *CreateCmLeverageV1Resp) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *CreateCmLeverageV1Resp) SetSymbol(v string) {
	o.Symbol = &v
}

func (o CreateCmLeverageV1Resp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCmLeverageV1Resp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Leverage) {
		toSerialize["leverage"] = o.Leverage
	}
	if !IsNil(o.MaxQty) {
		toSerialize["maxQty"] = o.MaxQty
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	return toSerialize, nil
}

type NullableCreateCmLeverageV1Resp struct {
	value *CreateCmLeverageV1Resp
	isSet bool
}

func (v NullableCreateCmLeverageV1Resp) Get() *CreateCmLeverageV1Resp {
	return v.value
}

func (v *NullableCreateCmLeverageV1Resp) Set(val *CreateCmLeverageV1Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCmLeverageV1Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCmLeverageV1Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCmLeverageV1Resp(val *CreateCmLeverageV1Resp) *NullableCreateCmLeverageV1Resp {
	return &NullableCreateCmLeverageV1Resp{value: val, isSet: true}
}

func (v NullableCreateCmLeverageV1Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCmLeverageV1Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



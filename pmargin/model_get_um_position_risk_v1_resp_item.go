/*
Binance Portfolio Margin API

OpenAPI specification for Binance exchange - Pmargin API

API version: 0.2.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmargin

import (
	"encoding/json"
)

// checks if the GetUmPositionRiskV1RespItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetUmPositionRiskV1RespItem{}

// GetUmPositionRiskV1RespItem struct for GetUmPositionRiskV1RespItem
type GetUmPositionRiskV1RespItem struct {
	EntryPrice *string `json:"entryPrice,omitempty"`
	Leverage *string `json:"leverage,omitempty"`
	LiquidationPrice *string `json:"liquidationPrice,omitempty"`
	MarkPrice *string `json:"markPrice,omitempty"`
	MaxNotionalValue *string `json:"maxNotionalValue,omitempty"`
	Notional *string `json:"notional,omitempty"`
	PositionAmt *string `json:"positionAmt,omitempty"`
	PositionSide *string `json:"positionSide,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	UnRealizedProfit *string `json:"unRealizedProfit,omitempty"`
	UpdateTime *int64 `json:"updateTime,omitempty"`
}

// NewGetUmPositionRiskV1RespItem instantiates a new GetUmPositionRiskV1RespItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetUmPositionRiskV1RespItem() *GetUmPositionRiskV1RespItem {
	this := GetUmPositionRiskV1RespItem{}
	return &this
}

// NewGetUmPositionRiskV1RespItemWithDefaults instantiates a new GetUmPositionRiskV1RespItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetUmPositionRiskV1RespItemWithDefaults() *GetUmPositionRiskV1RespItem {
	this := GetUmPositionRiskV1RespItem{}
	return &this
}

// GetEntryPrice returns the EntryPrice field value if set, zero value otherwise.
func (o *GetUmPositionRiskV1RespItem) GetEntryPrice() string {
	if o == nil || IsNil(o.EntryPrice) {
		var ret string
		return ret
	}
	return *o.EntryPrice
}

// GetEntryPriceOk returns a tuple with the EntryPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUmPositionRiskV1RespItem) GetEntryPriceOk() (*string, bool) {
	if o == nil || IsNil(o.EntryPrice) {
		return nil, false
	}
	return o.EntryPrice, true
}

// HasEntryPrice returns a boolean if a field has been set.
func (o *GetUmPositionRiskV1RespItem) HasEntryPrice() bool {
	if o != nil && !IsNil(o.EntryPrice) {
		return true
	}

	return false
}

// SetEntryPrice gets a reference to the given string and assigns it to the EntryPrice field.
func (o *GetUmPositionRiskV1RespItem) SetEntryPrice(v string) {
	o.EntryPrice = &v
}

// GetLeverage returns the Leverage field value if set, zero value otherwise.
func (o *GetUmPositionRiskV1RespItem) GetLeverage() string {
	if o == nil || IsNil(o.Leverage) {
		var ret string
		return ret
	}
	return *o.Leverage
}

// GetLeverageOk returns a tuple with the Leverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUmPositionRiskV1RespItem) GetLeverageOk() (*string, bool) {
	if o == nil || IsNil(o.Leverage) {
		return nil, false
	}
	return o.Leverage, true
}

// HasLeverage returns a boolean if a field has been set.
func (o *GetUmPositionRiskV1RespItem) HasLeverage() bool {
	if o != nil && !IsNil(o.Leverage) {
		return true
	}

	return false
}

// SetLeverage gets a reference to the given string and assigns it to the Leverage field.
func (o *GetUmPositionRiskV1RespItem) SetLeverage(v string) {
	o.Leverage = &v
}

// GetLiquidationPrice returns the LiquidationPrice field value if set, zero value otherwise.
func (o *GetUmPositionRiskV1RespItem) GetLiquidationPrice() string {
	if o == nil || IsNil(o.LiquidationPrice) {
		var ret string
		return ret
	}
	return *o.LiquidationPrice
}

// GetLiquidationPriceOk returns a tuple with the LiquidationPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUmPositionRiskV1RespItem) GetLiquidationPriceOk() (*string, bool) {
	if o == nil || IsNil(o.LiquidationPrice) {
		return nil, false
	}
	return o.LiquidationPrice, true
}

// HasLiquidationPrice returns a boolean if a field has been set.
func (o *GetUmPositionRiskV1RespItem) HasLiquidationPrice() bool {
	if o != nil && !IsNil(o.LiquidationPrice) {
		return true
	}

	return false
}

// SetLiquidationPrice gets a reference to the given string and assigns it to the LiquidationPrice field.
func (o *GetUmPositionRiskV1RespItem) SetLiquidationPrice(v string) {
	o.LiquidationPrice = &v
}

// GetMarkPrice returns the MarkPrice field value if set, zero value otherwise.
func (o *GetUmPositionRiskV1RespItem) GetMarkPrice() string {
	if o == nil || IsNil(o.MarkPrice) {
		var ret string
		return ret
	}
	return *o.MarkPrice
}

// GetMarkPriceOk returns a tuple with the MarkPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUmPositionRiskV1RespItem) GetMarkPriceOk() (*string, bool) {
	if o == nil || IsNil(o.MarkPrice) {
		return nil, false
	}
	return o.MarkPrice, true
}

// HasMarkPrice returns a boolean if a field has been set.
func (o *GetUmPositionRiskV1RespItem) HasMarkPrice() bool {
	if o != nil && !IsNil(o.MarkPrice) {
		return true
	}

	return false
}

// SetMarkPrice gets a reference to the given string and assigns it to the MarkPrice field.
func (o *GetUmPositionRiskV1RespItem) SetMarkPrice(v string) {
	o.MarkPrice = &v
}

// GetMaxNotionalValue returns the MaxNotionalValue field value if set, zero value otherwise.
func (o *GetUmPositionRiskV1RespItem) GetMaxNotionalValue() string {
	if o == nil || IsNil(o.MaxNotionalValue) {
		var ret string
		return ret
	}
	return *o.MaxNotionalValue
}

// GetMaxNotionalValueOk returns a tuple with the MaxNotionalValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUmPositionRiskV1RespItem) GetMaxNotionalValueOk() (*string, bool) {
	if o == nil || IsNil(o.MaxNotionalValue) {
		return nil, false
	}
	return o.MaxNotionalValue, true
}

// HasMaxNotionalValue returns a boolean if a field has been set.
func (o *GetUmPositionRiskV1RespItem) HasMaxNotionalValue() bool {
	if o != nil && !IsNil(o.MaxNotionalValue) {
		return true
	}

	return false
}

// SetMaxNotionalValue gets a reference to the given string and assigns it to the MaxNotionalValue field.
func (o *GetUmPositionRiskV1RespItem) SetMaxNotionalValue(v string) {
	o.MaxNotionalValue = &v
}

// GetNotional returns the Notional field value if set, zero value otherwise.
func (o *GetUmPositionRiskV1RespItem) GetNotional() string {
	if o == nil || IsNil(o.Notional) {
		var ret string
		return ret
	}
	return *o.Notional
}

// GetNotionalOk returns a tuple with the Notional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUmPositionRiskV1RespItem) GetNotionalOk() (*string, bool) {
	if o == nil || IsNil(o.Notional) {
		return nil, false
	}
	return o.Notional, true
}

// HasNotional returns a boolean if a field has been set.
func (o *GetUmPositionRiskV1RespItem) HasNotional() bool {
	if o != nil && !IsNil(o.Notional) {
		return true
	}

	return false
}

// SetNotional gets a reference to the given string and assigns it to the Notional field.
func (o *GetUmPositionRiskV1RespItem) SetNotional(v string) {
	o.Notional = &v
}

// GetPositionAmt returns the PositionAmt field value if set, zero value otherwise.
func (o *GetUmPositionRiskV1RespItem) GetPositionAmt() string {
	if o == nil || IsNil(o.PositionAmt) {
		var ret string
		return ret
	}
	return *o.PositionAmt
}

// GetPositionAmtOk returns a tuple with the PositionAmt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUmPositionRiskV1RespItem) GetPositionAmtOk() (*string, bool) {
	if o == nil || IsNil(o.PositionAmt) {
		return nil, false
	}
	return o.PositionAmt, true
}

// HasPositionAmt returns a boolean if a field has been set.
func (o *GetUmPositionRiskV1RespItem) HasPositionAmt() bool {
	if o != nil && !IsNil(o.PositionAmt) {
		return true
	}

	return false
}

// SetPositionAmt gets a reference to the given string and assigns it to the PositionAmt field.
func (o *GetUmPositionRiskV1RespItem) SetPositionAmt(v string) {
	o.PositionAmt = &v
}

// GetPositionSide returns the PositionSide field value if set, zero value otherwise.
func (o *GetUmPositionRiskV1RespItem) GetPositionSide() string {
	if o == nil || IsNil(o.PositionSide) {
		var ret string
		return ret
	}
	return *o.PositionSide
}

// GetPositionSideOk returns a tuple with the PositionSide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUmPositionRiskV1RespItem) GetPositionSideOk() (*string, bool) {
	if o == nil || IsNil(o.PositionSide) {
		return nil, false
	}
	return o.PositionSide, true
}

// HasPositionSide returns a boolean if a field has been set.
func (o *GetUmPositionRiskV1RespItem) HasPositionSide() bool {
	if o != nil && !IsNil(o.PositionSide) {
		return true
	}

	return false
}

// SetPositionSide gets a reference to the given string and assigns it to the PositionSide field.
func (o *GetUmPositionRiskV1RespItem) SetPositionSide(v string) {
	o.PositionSide = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *GetUmPositionRiskV1RespItem) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUmPositionRiskV1RespItem) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *GetUmPositionRiskV1RespItem) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *GetUmPositionRiskV1RespItem) SetSymbol(v string) {
	o.Symbol = &v
}

// GetUnRealizedProfit returns the UnRealizedProfit field value if set, zero value otherwise.
func (o *GetUmPositionRiskV1RespItem) GetUnRealizedProfit() string {
	if o == nil || IsNil(o.UnRealizedProfit) {
		var ret string
		return ret
	}
	return *o.UnRealizedProfit
}

// GetUnRealizedProfitOk returns a tuple with the UnRealizedProfit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUmPositionRiskV1RespItem) GetUnRealizedProfitOk() (*string, bool) {
	if o == nil || IsNil(o.UnRealizedProfit) {
		return nil, false
	}
	return o.UnRealizedProfit, true
}

// HasUnRealizedProfit returns a boolean if a field has been set.
func (o *GetUmPositionRiskV1RespItem) HasUnRealizedProfit() bool {
	if o != nil && !IsNil(o.UnRealizedProfit) {
		return true
	}

	return false
}

// SetUnRealizedProfit gets a reference to the given string and assigns it to the UnRealizedProfit field.
func (o *GetUmPositionRiskV1RespItem) SetUnRealizedProfit(v string) {
	o.UnRealizedProfit = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *GetUmPositionRiskV1RespItem) GetUpdateTime() int64 {
	if o == nil || IsNil(o.UpdateTime) {
		var ret int64
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUmPositionRiskV1RespItem) GetUpdateTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *GetUmPositionRiskV1RespItem) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given int64 and assigns it to the UpdateTime field.
func (o *GetUmPositionRiskV1RespItem) SetUpdateTime(v int64) {
	o.UpdateTime = &v
}

func (o GetUmPositionRiskV1RespItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetUmPositionRiskV1RespItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryPrice) {
		toSerialize["entryPrice"] = o.EntryPrice
	}
	if !IsNil(o.Leverage) {
		toSerialize["leverage"] = o.Leverage
	}
	if !IsNil(o.LiquidationPrice) {
		toSerialize["liquidationPrice"] = o.LiquidationPrice
	}
	if !IsNil(o.MarkPrice) {
		toSerialize["markPrice"] = o.MarkPrice
	}
	if !IsNil(o.MaxNotionalValue) {
		toSerialize["maxNotionalValue"] = o.MaxNotionalValue
	}
	if !IsNil(o.Notional) {
		toSerialize["notional"] = o.Notional
	}
	if !IsNil(o.PositionAmt) {
		toSerialize["positionAmt"] = o.PositionAmt
	}
	if !IsNil(o.PositionSide) {
		toSerialize["positionSide"] = o.PositionSide
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.UnRealizedProfit) {
		toSerialize["unRealizedProfit"] = o.UnRealizedProfit
	}
	if !IsNil(o.UpdateTime) {
		toSerialize["updateTime"] = o.UpdateTime
	}
	return toSerialize, nil
}

type NullableGetUmPositionRiskV1RespItem struct {
	value *GetUmPositionRiskV1RespItem
	isSet bool
}

func (v NullableGetUmPositionRiskV1RespItem) Get() *GetUmPositionRiskV1RespItem {
	return v.value
}

func (v *NullableGetUmPositionRiskV1RespItem) Set(val *GetUmPositionRiskV1RespItem) {
	v.value = val
	v.isSet = true
}

func (v NullableGetUmPositionRiskV1RespItem) IsSet() bool {
	return v.isSet
}

func (v *NullableGetUmPositionRiskV1RespItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetUmPositionRiskV1RespItem(val *GetUmPositionRiskV1RespItem) *NullableGetUmPositionRiskV1RespItem {
	return &NullableGetUmPositionRiskV1RespItem{value: val, isSet: true}
}

func (v NullableGetUmPositionRiskV1RespItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetUmPositionRiskV1RespItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Binance Portfolio Margin API

OpenAPI specification for Binance exchange - Pmargin API

API version: 0.2.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmargin

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PmarginDeleteMarginAllOpenOrdersV1RespInner - struct for PmarginDeleteMarginAllOpenOrdersV1RespInner
type PmarginDeleteMarginAllOpenOrdersV1RespInner struct {
	PmarginDeleteMarginAllOpenOrdersV1RespOrder *PmarginDeleteMarginAllOpenOrdersV1RespOrder
	PmarginDeleteMarginAllOpenOrdersV1RespOrderList *PmarginDeleteMarginAllOpenOrdersV1RespOrderList
}

// PmarginDeleteMarginAllOpenOrdersV1RespOrderAsPmarginDeleteMarginAllOpenOrdersV1RespInner is a convenience function that returns PmarginDeleteMarginAllOpenOrdersV1RespOrder wrapped in PmarginDeleteMarginAllOpenOrdersV1RespInner
func PmarginDeleteMarginAllOpenOrdersV1RespOrderAsPmarginDeleteMarginAllOpenOrdersV1RespInner(v *PmarginDeleteMarginAllOpenOrdersV1RespOrder) PmarginDeleteMarginAllOpenOrdersV1RespInner {
	return PmarginDeleteMarginAllOpenOrdersV1RespInner{
		PmarginDeleteMarginAllOpenOrdersV1RespOrder: v,
	}
}

// PmarginDeleteMarginAllOpenOrdersV1RespOrderListAsPmarginDeleteMarginAllOpenOrdersV1RespInner is a convenience function that returns PmarginDeleteMarginAllOpenOrdersV1RespOrderList wrapped in PmarginDeleteMarginAllOpenOrdersV1RespInner
func PmarginDeleteMarginAllOpenOrdersV1RespOrderListAsPmarginDeleteMarginAllOpenOrdersV1RespInner(v *PmarginDeleteMarginAllOpenOrdersV1RespOrderList) PmarginDeleteMarginAllOpenOrdersV1RespInner {
	return PmarginDeleteMarginAllOpenOrdersV1RespInner{
		PmarginDeleteMarginAllOpenOrdersV1RespOrderList: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PmarginDeleteMarginAllOpenOrdersV1RespInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PmarginDeleteMarginAllOpenOrdersV1RespOrder
	err = newStrictDecoder(data).Decode(&dst.PmarginDeleteMarginAllOpenOrdersV1RespOrder)
	if err == nil {
		jsonPmarginDeleteMarginAllOpenOrdersV1RespOrder, _ := json.Marshal(dst.PmarginDeleteMarginAllOpenOrdersV1RespOrder)
		if string(jsonPmarginDeleteMarginAllOpenOrdersV1RespOrder) == "{}" { // empty struct
			dst.PmarginDeleteMarginAllOpenOrdersV1RespOrder = nil
		} else {
			if err = validator.Validate(dst.PmarginDeleteMarginAllOpenOrdersV1RespOrder); err != nil {
				dst.PmarginDeleteMarginAllOpenOrdersV1RespOrder = nil
			} else {
				match++
			}
		}
	} else {
		dst.PmarginDeleteMarginAllOpenOrdersV1RespOrder = nil
	}

	// try to unmarshal data into PmarginDeleteMarginAllOpenOrdersV1RespOrderList
	err = newStrictDecoder(data).Decode(&dst.PmarginDeleteMarginAllOpenOrdersV1RespOrderList)
	if err == nil {
		jsonPmarginDeleteMarginAllOpenOrdersV1RespOrderList, _ := json.Marshal(dst.PmarginDeleteMarginAllOpenOrdersV1RespOrderList)
		if string(jsonPmarginDeleteMarginAllOpenOrdersV1RespOrderList) == "{}" { // empty struct
			dst.PmarginDeleteMarginAllOpenOrdersV1RespOrderList = nil
		} else {
			if err = validator.Validate(dst.PmarginDeleteMarginAllOpenOrdersV1RespOrderList); err != nil {
				dst.PmarginDeleteMarginAllOpenOrdersV1RespOrderList = nil
			} else {
				match++
			}
		}
	} else {
		dst.PmarginDeleteMarginAllOpenOrdersV1RespOrderList = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PmarginDeleteMarginAllOpenOrdersV1RespOrder = nil
		dst.PmarginDeleteMarginAllOpenOrdersV1RespOrderList = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PmarginDeleteMarginAllOpenOrdersV1RespInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PmarginDeleteMarginAllOpenOrdersV1RespInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PmarginDeleteMarginAllOpenOrdersV1RespInner) MarshalJSON() ([]byte, error) {
	if src.PmarginDeleteMarginAllOpenOrdersV1RespOrder != nil {
		return json.Marshal(&src.PmarginDeleteMarginAllOpenOrdersV1RespOrder)
	}

	if src.PmarginDeleteMarginAllOpenOrdersV1RespOrderList != nil {
		return json.Marshal(&src.PmarginDeleteMarginAllOpenOrdersV1RespOrderList)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PmarginDeleteMarginAllOpenOrdersV1RespInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PmarginDeleteMarginAllOpenOrdersV1RespOrder != nil {
		return obj.PmarginDeleteMarginAllOpenOrdersV1RespOrder
	}

	if obj.PmarginDeleteMarginAllOpenOrdersV1RespOrderList != nil {
		return obj.PmarginDeleteMarginAllOpenOrdersV1RespOrderList
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj PmarginDeleteMarginAllOpenOrdersV1RespInner) GetActualInstanceValue() (interface{}) {
	if obj.PmarginDeleteMarginAllOpenOrdersV1RespOrder != nil {
		return *obj.PmarginDeleteMarginAllOpenOrdersV1RespOrder
	}

	if obj.PmarginDeleteMarginAllOpenOrdersV1RespOrderList != nil {
		return *obj.PmarginDeleteMarginAllOpenOrdersV1RespOrderList
	}

	// all schemas are nil
	return nil
}

type NullablePmarginDeleteMarginAllOpenOrdersV1RespInner struct {
	value *PmarginDeleteMarginAllOpenOrdersV1RespInner
	isSet bool
}

func (v NullablePmarginDeleteMarginAllOpenOrdersV1RespInner) Get() *PmarginDeleteMarginAllOpenOrdersV1RespInner {
	return v.value
}

func (v *NullablePmarginDeleteMarginAllOpenOrdersV1RespInner) Set(val *PmarginDeleteMarginAllOpenOrdersV1RespInner) {
	v.value = val
	v.isSet = true
}

func (v NullablePmarginDeleteMarginAllOpenOrdersV1RespInner) IsSet() bool {
	return v.isSet
}

func (v *NullablePmarginDeleteMarginAllOpenOrdersV1RespInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePmarginDeleteMarginAllOpenOrdersV1RespInner(val *PmarginDeleteMarginAllOpenOrdersV1RespInner) *NullablePmarginDeleteMarginAllOpenOrdersV1RespInner {
	return &NullablePmarginDeleteMarginAllOpenOrdersV1RespInner{value: val, isSet: true}
}

func (v NullablePmarginDeleteMarginAllOpenOrdersV1RespInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePmarginDeleteMarginAllOpenOrdersV1RespInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



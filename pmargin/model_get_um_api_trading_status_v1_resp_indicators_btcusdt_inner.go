/*
Binance Portfolio Margin API

OpenAPI specification for Binance exchange - Pmargin API

API version: 0.2.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmargin

import (
	"encoding/json"
)

// checks if the GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner{}

// GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner struct for GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner
type GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner struct {
	Indicator *string `json:"indicator,omitempty"`
	IsLocked *bool `json:"isLocked,omitempty"`
	PlannedRecoverTime *int64 `json:"plannedRecoverTime,omitempty"`
	TriggerValue *float32 `json:"triggerValue,omitempty"`
	Value *float32 `json:"value,omitempty"`
}

// NewGetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner instantiates a new GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner() *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner {
	this := GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner{}
	return &this
}

// NewGetUmApiTradingStatusV1RespIndicatorsBTCUSDTInnerWithDefaults instantiates a new GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetUmApiTradingStatusV1RespIndicatorsBTCUSDTInnerWithDefaults() *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner {
	this := GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner{}
	return &this
}

// GetIndicator returns the Indicator field value if set, zero value otherwise.
func (o *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) GetIndicator() string {
	if o == nil || IsNil(o.Indicator) {
		var ret string
		return ret
	}
	return *o.Indicator
}

// GetIndicatorOk returns a tuple with the Indicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) GetIndicatorOk() (*string, bool) {
	if o == nil || IsNil(o.Indicator) {
		return nil, false
	}
	return o.Indicator, true
}

// HasIndicator returns a boolean if a field has been set.
func (o *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) HasIndicator() bool {
	if o != nil && !IsNil(o.Indicator) {
		return true
	}

	return false
}

// SetIndicator gets a reference to the given string and assigns it to the Indicator field.
func (o *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) SetIndicator(v string) {
	o.Indicator = &v
}

// GetIsLocked returns the IsLocked field value if set, zero value otherwise.
func (o *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) GetIsLocked() bool {
	if o == nil || IsNil(o.IsLocked) {
		var ret bool
		return ret
	}
	return *o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) GetIsLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLocked) {
		return nil, false
	}
	return o.IsLocked, true
}

// HasIsLocked returns a boolean if a field has been set.
func (o *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) HasIsLocked() bool {
	if o != nil && !IsNil(o.IsLocked) {
		return true
	}

	return false
}

// SetIsLocked gets a reference to the given bool and assigns it to the IsLocked field.
func (o *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) SetIsLocked(v bool) {
	o.IsLocked = &v
}

// GetPlannedRecoverTime returns the PlannedRecoverTime field value if set, zero value otherwise.
func (o *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) GetPlannedRecoverTime() int64 {
	if o == nil || IsNil(o.PlannedRecoverTime) {
		var ret int64
		return ret
	}
	return *o.PlannedRecoverTime
}

// GetPlannedRecoverTimeOk returns a tuple with the PlannedRecoverTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) GetPlannedRecoverTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PlannedRecoverTime) {
		return nil, false
	}
	return o.PlannedRecoverTime, true
}

// HasPlannedRecoverTime returns a boolean if a field has been set.
func (o *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) HasPlannedRecoverTime() bool {
	if o != nil && !IsNil(o.PlannedRecoverTime) {
		return true
	}

	return false
}

// SetPlannedRecoverTime gets a reference to the given int64 and assigns it to the PlannedRecoverTime field.
func (o *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) SetPlannedRecoverTime(v int64) {
	o.PlannedRecoverTime = &v
}

// GetTriggerValue returns the TriggerValue field value if set, zero value otherwise.
func (o *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) GetTriggerValue() float32 {
	if o == nil || IsNil(o.TriggerValue) {
		var ret float32
		return ret
	}
	return *o.TriggerValue
}

// GetTriggerValueOk returns a tuple with the TriggerValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) GetTriggerValueOk() (*float32, bool) {
	if o == nil || IsNil(o.TriggerValue) {
		return nil, false
	}
	return o.TriggerValue, true
}

// HasTriggerValue returns a boolean if a field has been set.
func (o *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) HasTriggerValue() bool {
	if o != nil && !IsNil(o.TriggerValue) {
		return true
	}

	return false
}

// SetTriggerValue gets a reference to the given float32 and assigns it to the TriggerValue field.
func (o *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) SetTriggerValue(v float32) {
	o.TriggerValue = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) GetValue() float32 {
	if o == nil || IsNil(o.Value) {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) GetValueOk() (*float32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) SetValue(v float32) {
	o.Value = &v
}

func (o GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Indicator) {
		toSerialize["indicator"] = o.Indicator
	}
	if !IsNil(o.IsLocked) {
		toSerialize["isLocked"] = o.IsLocked
	}
	if !IsNil(o.PlannedRecoverTime) {
		toSerialize["plannedRecoverTime"] = o.PlannedRecoverTime
	}
	if !IsNil(o.TriggerValue) {
		toSerialize["triggerValue"] = o.TriggerValue
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableGetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner struct {
	value *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner
	isSet bool
}

func (v NullableGetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) Get() *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner {
	return v.value
}

func (v *NullableGetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) Set(val *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner(val *GetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) *NullableGetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner {
	return &NullableGetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner{value: val, isSet: true}
}

func (v NullableGetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetUmApiTradingStatusV1RespIndicatorsBTCUSDTInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



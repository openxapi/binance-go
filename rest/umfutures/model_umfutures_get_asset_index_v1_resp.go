/*
Binance USD-M Futures API

OpenAPI specification for Binance exchange - Umfutures API

API version: 0.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package umfutures

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UmfuturesGetAssetIndexV1Resp - struct for UmfuturesGetAssetIndexV1Resp
type UmfuturesGetAssetIndexV1Resp struct {
	UmfuturesGetAssetIndexV1RespItem *UmfuturesGetAssetIndexV1RespItem
	ArrayOfUmfuturesGetAssetIndexV1RespItem *[]UmfuturesGetAssetIndexV1RespItem
}

// UmfuturesGetAssetIndexV1RespItemAsUmfuturesGetAssetIndexV1Resp is a convenience function that returns UmfuturesGetAssetIndexV1RespItem wrapped in UmfuturesGetAssetIndexV1Resp
func UmfuturesGetAssetIndexV1RespItemAsUmfuturesGetAssetIndexV1Resp(v *UmfuturesGetAssetIndexV1RespItem) UmfuturesGetAssetIndexV1Resp {
	return UmfuturesGetAssetIndexV1Resp{
		UmfuturesGetAssetIndexV1RespItem: v,
	}
}

// []UmfuturesGetAssetIndexV1RespItemAsUmfuturesGetAssetIndexV1Resp is a convenience function that returns []UmfuturesGetAssetIndexV1RespItem wrapped in UmfuturesGetAssetIndexV1Resp
func ArrayOfUmfuturesGetAssetIndexV1RespItemAsUmfuturesGetAssetIndexV1Resp(v *[]UmfuturesGetAssetIndexV1RespItem) UmfuturesGetAssetIndexV1Resp {
	return UmfuturesGetAssetIndexV1Resp{
		ArrayOfUmfuturesGetAssetIndexV1RespItem: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UmfuturesGetAssetIndexV1Resp) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UmfuturesGetAssetIndexV1RespItem
	err = newStrictDecoder(data).Decode(&dst.UmfuturesGetAssetIndexV1RespItem)
	if err == nil {
		jsonUmfuturesGetAssetIndexV1RespItem, _ := json.Marshal(dst.UmfuturesGetAssetIndexV1RespItem)
		if string(jsonUmfuturesGetAssetIndexV1RespItem) == "{}" { // empty struct
			dst.UmfuturesGetAssetIndexV1RespItem = nil
		} else {
			if err = validator.Validate(dst.UmfuturesGetAssetIndexV1RespItem); err != nil {
				dst.UmfuturesGetAssetIndexV1RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.UmfuturesGetAssetIndexV1RespItem = nil
	}

	// try to unmarshal data into ArrayOfUmfuturesGetAssetIndexV1RespItem
	err = newStrictDecoder(data).Decode(&dst.ArrayOfUmfuturesGetAssetIndexV1RespItem)
	if err == nil {
		jsonArrayOfUmfuturesGetAssetIndexV1RespItem, _ := json.Marshal(dst.ArrayOfUmfuturesGetAssetIndexV1RespItem)
		if string(jsonArrayOfUmfuturesGetAssetIndexV1RespItem) == "{}" { // empty struct
			dst.ArrayOfUmfuturesGetAssetIndexV1RespItem = nil
		} else {
			if err = validator.Validate(dst.ArrayOfUmfuturesGetAssetIndexV1RespItem); err != nil {
				dst.ArrayOfUmfuturesGetAssetIndexV1RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfUmfuturesGetAssetIndexV1RespItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UmfuturesGetAssetIndexV1RespItem = nil
		dst.ArrayOfUmfuturesGetAssetIndexV1RespItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UmfuturesGetAssetIndexV1Resp)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UmfuturesGetAssetIndexV1Resp)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UmfuturesGetAssetIndexV1Resp) MarshalJSON() ([]byte, error) {
	if src.UmfuturesGetAssetIndexV1RespItem != nil {
		return json.Marshal(&src.UmfuturesGetAssetIndexV1RespItem)
	}

	if src.ArrayOfUmfuturesGetAssetIndexV1RespItem != nil {
		return json.Marshal(&src.ArrayOfUmfuturesGetAssetIndexV1RespItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UmfuturesGetAssetIndexV1Resp) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.UmfuturesGetAssetIndexV1RespItem != nil {
		return obj.UmfuturesGetAssetIndexV1RespItem
	}

	if obj.ArrayOfUmfuturesGetAssetIndexV1RespItem != nil {
		return obj.ArrayOfUmfuturesGetAssetIndexV1RespItem
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UmfuturesGetAssetIndexV1Resp) GetActualInstanceValue() (interface{}) {
	if obj.UmfuturesGetAssetIndexV1RespItem != nil {
		return *obj.UmfuturesGetAssetIndexV1RespItem
	}

	if obj.ArrayOfUmfuturesGetAssetIndexV1RespItem != nil {
		return *obj.ArrayOfUmfuturesGetAssetIndexV1RespItem
	}

	// all schemas are nil
	return nil
}

type NullableUmfuturesGetAssetIndexV1Resp struct {
	value *UmfuturesGetAssetIndexV1Resp
	isSet bool
}

func (v NullableUmfuturesGetAssetIndexV1Resp) Get() *UmfuturesGetAssetIndexV1Resp {
	return v.value
}

func (v *NullableUmfuturesGetAssetIndexV1Resp) Set(val *UmfuturesGetAssetIndexV1Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableUmfuturesGetAssetIndexV1Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableUmfuturesGetAssetIndexV1Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUmfuturesGetAssetIndexV1Resp(val *UmfuturesGetAssetIndexV1Resp) *NullableUmfuturesGetAssetIndexV1Resp {
	return &NullableUmfuturesGetAssetIndexV1Resp{value: val, isSet: true}
}

func (v NullableUmfuturesGetAssetIndexV1Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUmfuturesGetAssetIndexV1Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



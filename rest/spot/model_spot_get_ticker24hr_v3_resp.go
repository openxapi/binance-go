/*
Binance Spot API

OpenAPI specification for Binance exchange - Spot API

API version: 0.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spot

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SpotGetTicker24hrV3Resp - struct for SpotGetTicker24hrV3Resp
type SpotGetTicker24hrV3Resp struct {
	SpotGetTicker24hrV3RespItem *SpotGetTicker24hrV3RespItem
	ArrayOfSpotGetTicker24hrV3RespItem *[]SpotGetTicker24hrV3RespItem
}

// SpotGetTicker24hrV3RespItemAsSpotGetTicker24hrV3Resp is a convenience function that returns SpotGetTicker24hrV3RespItem wrapped in SpotGetTicker24hrV3Resp
func SpotGetTicker24hrV3RespItemAsSpotGetTicker24hrV3Resp(v *SpotGetTicker24hrV3RespItem) SpotGetTicker24hrV3Resp {
	return SpotGetTicker24hrV3Resp{
		SpotGetTicker24hrV3RespItem: v,
	}
}

// []SpotGetTicker24hrV3RespItemAsSpotGetTicker24hrV3Resp is a convenience function that returns []SpotGetTicker24hrV3RespItem wrapped in SpotGetTicker24hrV3Resp
func ArrayOfSpotGetTicker24hrV3RespItemAsSpotGetTicker24hrV3Resp(v *[]SpotGetTicker24hrV3RespItem) SpotGetTicker24hrV3Resp {
	return SpotGetTicker24hrV3Resp{
		ArrayOfSpotGetTicker24hrV3RespItem: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SpotGetTicker24hrV3Resp) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SpotGetTicker24hrV3RespItem
	err = newStrictDecoder(data).Decode(&dst.SpotGetTicker24hrV3RespItem)
	if err == nil {
		jsonSpotGetTicker24hrV3RespItem, _ := json.Marshal(dst.SpotGetTicker24hrV3RespItem)
		if string(jsonSpotGetTicker24hrV3RespItem) == "{}" { // empty struct
			dst.SpotGetTicker24hrV3RespItem = nil
		} else {
			if err = validator.Validate(dst.SpotGetTicker24hrV3RespItem); err != nil {
				dst.SpotGetTicker24hrV3RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.SpotGetTicker24hrV3RespItem = nil
	}

	// try to unmarshal data into ArrayOfSpotGetTicker24hrV3RespItem
	err = newStrictDecoder(data).Decode(&dst.ArrayOfSpotGetTicker24hrV3RespItem)
	if err == nil {
		jsonArrayOfSpotGetTicker24hrV3RespItem, _ := json.Marshal(dst.ArrayOfSpotGetTicker24hrV3RespItem)
		if string(jsonArrayOfSpotGetTicker24hrV3RespItem) == "{}" { // empty struct
			dst.ArrayOfSpotGetTicker24hrV3RespItem = nil
		} else {
			if err = validator.Validate(dst.ArrayOfSpotGetTicker24hrV3RespItem); err != nil {
				dst.ArrayOfSpotGetTicker24hrV3RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfSpotGetTicker24hrV3RespItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SpotGetTicker24hrV3RespItem = nil
		dst.ArrayOfSpotGetTicker24hrV3RespItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SpotGetTicker24hrV3Resp)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SpotGetTicker24hrV3Resp)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SpotGetTicker24hrV3Resp) MarshalJSON() ([]byte, error) {
	if src.SpotGetTicker24hrV3RespItem != nil {
		return json.Marshal(&src.SpotGetTicker24hrV3RespItem)
	}

	if src.ArrayOfSpotGetTicker24hrV3RespItem != nil {
		return json.Marshal(&src.ArrayOfSpotGetTicker24hrV3RespItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SpotGetTicker24hrV3Resp) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SpotGetTicker24hrV3RespItem != nil {
		return obj.SpotGetTicker24hrV3RespItem
	}

	if obj.ArrayOfSpotGetTicker24hrV3RespItem != nil {
		return obj.ArrayOfSpotGetTicker24hrV3RespItem
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SpotGetTicker24hrV3Resp) GetActualInstanceValue() (interface{}) {
	if obj.SpotGetTicker24hrV3RespItem != nil {
		return *obj.SpotGetTicker24hrV3RespItem
	}

	if obj.ArrayOfSpotGetTicker24hrV3RespItem != nil {
		return *obj.ArrayOfSpotGetTicker24hrV3RespItem
	}

	// all schemas are nil
	return nil
}

type NullableSpotGetTicker24hrV3Resp struct {
	value *SpotGetTicker24hrV3Resp
	isSet bool
}

func (v NullableSpotGetTicker24hrV3Resp) Get() *SpotGetTicker24hrV3Resp {
	return v.value
}

func (v *NullableSpotGetTicker24hrV3Resp) Set(val *SpotGetTicker24hrV3Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableSpotGetTicker24hrV3Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableSpotGetTicker24hrV3Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpotGetTicker24hrV3Resp(val *SpotGetTicker24hrV3Resp) *NullableSpotGetTicker24hrV3Resp {
	return &NullableSpotGetTicker24hrV3Resp{value: val, isSet: true}
}

func (v NullableSpotGetTicker24hrV3Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpotGetTicker24hrV3Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



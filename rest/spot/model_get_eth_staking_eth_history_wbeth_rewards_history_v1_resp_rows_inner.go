/*
Binance Spot API

OpenAPI specification for Binance exchange - Spot API

API version: 0.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spot

import (
	"encoding/json"
)

// checks if the GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner{}

// GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner struct for GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner
type GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner struct {
	AmountInETH *string `json:"amountInETH,omitempty"`
	AnnualPercentageRate *string `json:"annualPercentageRate,omitempty"`
	Holding *string `json:"holding,omitempty"`
	HoldingInETH *string `json:"holdingInETH,omitempty"`
	Time *int64 `json:"time,omitempty"`
}

// NewGetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner instantiates a new GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner() *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner {
	this := GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner{}
	return &this
}

// NewGetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInnerWithDefaults instantiates a new GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInnerWithDefaults() *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner {
	this := GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner{}
	return &this
}

// GetAmountInETH returns the AmountInETH field value if set, zero value otherwise.
func (o *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) GetAmountInETH() string {
	if o == nil || IsNil(o.AmountInETH) {
		var ret string
		return ret
	}
	return *o.AmountInETH
}

// GetAmountInETHOk returns a tuple with the AmountInETH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) GetAmountInETHOk() (*string, bool) {
	if o == nil || IsNil(o.AmountInETH) {
		return nil, false
	}
	return o.AmountInETH, true
}

// HasAmountInETH returns a boolean if a field has been set.
func (o *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) HasAmountInETH() bool {
	if o != nil && !IsNil(o.AmountInETH) {
		return true
	}

	return false
}

// SetAmountInETH gets a reference to the given string and assigns it to the AmountInETH field.
func (o *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) SetAmountInETH(v string) {
	o.AmountInETH = &v
}

// GetAnnualPercentageRate returns the AnnualPercentageRate field value if set, zero value otherwise.
func (o *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) GetAnnualPercentageRate() string {
	if o == nil || IsNil(o.AnnualPercentageRate) {
		var ret string
		return ret
	}
	return *o.AnnualPercentageRate
}

// GetAnnualPercentageRateOk returns a tuple with the AnnualPercentageRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) GetAnnualPercentageRateOk() (*string, bool) {
	if o == nil || IsNil(o.AnnualPercentageRate) {
		return nil, false
	}
	return o.AnnualPercentageRate, true
}

// HasAnnualPercentageRate returns a boolean if a field has been set.
func (o *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) HasAnnualPercentageRate() bool {
	if o != nil && !IsNil(o.AnnualPercentageRate) {
		return true
	}

	return false
}

// SetAnnualPercentageRate gets a reference to the given string and assigns it to the AnnualPercentageRate field.
func (o *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) SetAnnualPercentageRate(v string) {
	o.AnnualPercentageRate = &v
}

// GetHolding returns the Holding field value if set, zero value otherwise.
func (o *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) GetHolding() string {
	if o == nil || IsNil(o.Holding) {
		var ret string
		return ret
	}
	return *o.Holding
}

// GetHoldingOk returns a tuple with the Holding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) GetHoldingOk() (*string, bool) {
	if o == nil || IsNil(o.Holding) {
		return nil, false
	}
	return o.Holding, true
}

// HasHolding returns a boolean if a field has been set.
func (o *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) HasHolding() bool {
	if o != nil && !IsNil(o.Holding) {
		return true
	}

	return false
}

// SetHolding gets a reference to the given string and assigns it to the Holding field.
func (o *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) SetHolding(v string) {
	o.Holding = &v
}

// GetHoldingInETH returns the HoldingInETH field value if set, zero value otherwise.
func (o *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) GetHoldingInETH() string {
	if o == nil || IsNil(o.HoldingInETH) {
		var ret string
		return ret
	}
	return *o.HoldingInETH
}

// GetHoldingInETHOk returns a tuple with the HoldingInETH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) GetHoldingInETHOk() (*string, bool) {
	if o == nil || IsNil(o.HoldingInETH) {
		return nil, false
	}
	return o.HoldingInETH, true
}

// HasHoldingInETH returns a boolean if a field has been set.
func (o *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) HasHoldingInETH() bool {
	if o != nil && !IsNil(o.HoldingInETH) {
		return true
	}

	return false
}

// SetHoldingInETH gets a reference to the given string and assigns it to the HoldingInETH field.
func (o *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) SetHoldingInETH(v string) {
	o.HoldingInETH = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) GetTime() int64 {
	if o == nil || IsNil(o.Time) {
		var ret int64
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) GetTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given int64 and assigns it to the Time field.
func (o *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) SetTime(v int64) {
	o.Time = &v
}

func (o GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AmountInETH) {
		toSerialize["amountInETH"] = o.AmountInETH
	}
	if !IsNil(o.AnnualPercentageRate) {
		toSerialize["annualPercentageRate"] = o.AnnualPercentageRate
	}
	if !IsNil(o.Holding) {
		toSerialize["holding"] = o.Holding
	}
	if !IsNil(o.HoldingInETH) {
		toSerialize["holdingInETH"] = o.HoldingInETH
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	return toSerialize, nil
}

type NullableGetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner struct {
	value *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner
	isSet bool
}

func (v NullableGetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) Get() *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner {
	return v.value
}

func (v *NullableGetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) Set(val *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner(val *GetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) *NullableGetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner {
	return &NullableGetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner{value: val, isSet: true}
}

func (v NullableGetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEthStakingEthHistoryWbethRewardsHistoryV1RespRowsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



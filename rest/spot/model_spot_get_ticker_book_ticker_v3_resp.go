/*
Binance Spot API

OpenAPI specification for Binance exchange - Spot API

API version: 0.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spot

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SpotGetTickerBookTickerV3Resp - struct for SpotGetTickerBookTickerV3Resp
type SpotGetTickerBookTickerV3Resp struct {
	SpotGetTickerBookTickerV3RespItem *SpotGetTickerBookTickerV3RespItem
	ArrayOfSpotGetTickerBookTickerV3RespItem *[]SpotGetTickerBookTickerV3RespItem
}

// SpotGetTickerBookTickerV3RespItemAsSpotGetTickerBookTickerV3Resp is a convenience function that returns SpotGetTickerBookTickerV3RespItem wrapped in SpotGetTickerBookTickerV3Resp
func SpotGetTickerBookTickerV3RespItemAsSpotGetTickerBookTickerV3Resp(v *SpotGetTickerBookTickerV3RespItem) SpotGetTickerBookTickerV3Resp {
	return SpotGetTickerBookTickerV3Resp{
		SpotGetTickerBookTickerV3RespItem: v,
	}
}

// []SpotGetTickerBookTickerV3RespItemAsSpotGetTickerBookTickerV3Resp is a convenience function that returns []SpotGetTickerBookTickerV3RespItem wrapped in SpotGetTickerBookTickerV3Resp
func ArrayOfSpotGetTickerBookTickerV3RespItemAsSpotGetTickerBookTickerV3Resp(v *[]SpotGetTickerBookTickerV3RespItem) SpotGetTickerBookTickerV3Resp {
	return SpotGetTickerBookTickerV3Resp{
		ArrayOfSpotGetTickerBookTickerV3RespItem: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SpotGetTickerBookTickerV3Resp) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SpotGetTickerBookTickerV3RespItem
	err = newStrictDecoder(data).Decode(&dst.SpotGetTickerBookTickerV3RespItem)
	if err == nil {
		jsonSpotGetTickerBookTickerV3RespItem, _ := json.Marshal(dst.SpotGetTickerBookTickerV3RespItem)
		if string(jsonSpotGetTickerBookTickerV3RespItem) == "{}" { // empty struct
			dst.SpotGetTickerBookTickerV3RespItem = nil
		} else {
			if err = validator.Validate(dst.SpotGetTickerBookTickerV3RespItem); err != nil {
				dst.SpotGetTickerBookTickerV3RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.SpotGetTickerBookTickerV3RespItem = nil
	}

	// try to unmarshal data into ArrayOfSpotGetTickerBookTickerV3RespItem
	err = newStrictDecoder(data).Decode(&dst.ArrayOfSpotGetTickerBookTickerV3RespItem)
	if err == nil {
		jsonArrayOfSpotGetTickerBookTickerV3RespItem, _ := json.Marshal(dst.ArrayOfSpotGetTickerBookTickerV3RespItem)
		if string(jsonArrayOfSpotGetTickerBookTickerV3RespItem) == "{}" { // empty struct
			dst.ArrayOfSpotGetTickerBookTickerV3RespItem = nil
		} else {
			if err = validator.Validate(dst.ArrayOfSpotGetTickerBookTickerV3RespItem); err != nil {
				dst.ArrayOfSpotGetTickerBookTickerV3RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfSpotGetTickerBookTickerV3RespItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SpotGetTickerBookTickerV3RespItem = nil
		dst.ArrayOfSpotGetTickerBookTickerV3RespItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SpotGetTickerBookTickerV3Resp)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SpotGetTickerBookTickerV3Resp)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SpotGetTickerBookTickerV3Resp) MarshalJSON() ([]byte, error) {
	if src.SpotGetTickerBookTickerV3RespItem != nil {
		return json.Marshal(&src.SpotGetTickerBookTickerV3RespItem)
	}

	if src.ArrayOfSpotGetTickerBookTickerV3RespItem != nil {
		return json.Marshal(&src.ArrayOfSpotGetTickerBookTickerV3RespItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SpotGetTickerBookTickerV3Resp) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SpotGetTickerBookTickerV3RespItem != nil {
		return obj.SpotGetTickerBookTickerV3RespItem
	}

	if obj.ArrayOfSpotGetTickerBookTickerV3RespItem != nil {
		return obj.ArrayOfSpotGetTickerBookTickerV3RespItem
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SpotGetTickerBookTickerV3Resp) GetActualInstanceValue() (interface{}) {
	if obj.SpotGetTickerBookTickerV3RespItem != nil {
		return *obj.SpotGetTickerBookTickerV3RespItem
	}

	if obj.ArrayOfSpotGetTickerBookTickerV3RespItem != nil {
		return *obj.ArrayOfSpotGetTickerBookTickerV3RespItem
	}

	// all schemas are nil
	return nil
}

type NullableSpotGetTickerBookTickerV3Resp struct {
	value *SpotGetTickerBookTickerV3Resp
	isSet bool
}

func (v NullableSpotGetTickerBookTickerV3Resp) Get() *SpotGetTickerBookTickerV3Resp {
	return v.value
}

func (v *NullableSpotGetTickerBookTickerV3Resp) Set(val *SpotGetTickerBookTickerV3Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableSpotGetTickerBookTickerV3Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableSpotGetTickerBookTickerV3Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpotGetTickerBookTickerV3Resp(val *SpotGetTickerBookTickerV3Resp) *NullableSpotGetTickerBookTickerV3Resp {
	return &NullableSpotGetTickerBookTickerV3Resp{value: val, isSet: true}
}

func (v NullableSpotGetTickerBookTickerV3Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpotGetTickerBookTickerV3Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



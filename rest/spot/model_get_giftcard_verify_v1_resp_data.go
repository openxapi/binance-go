/*
Binance Spot API

OpenAPI specification for Binance exchange - Spot API

API version: 0.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spot

import (
	"encoding/json"
)

// checks if the GetGiftcardVerifyV1RespData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetGiftcardVerifyV1RespData{}

// GetGiftcardVerifyV1RespData struct for GetGiftcardVerifyV1RespData
type GetGiftcardVerifyV1RespData struct {
	Amount *string `json:"amount,omitempty"`
	Token *string `json:"token,omitempty"`
	Valid *bool `json:"valid,omitempty"`
}

// NewGetGiftcardVerifyV1RespData instantiates a new GetGiftcardVerifyV1RespData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetGiftcardVerifyV1RespData() *GetGiftcardVerifyV1RespData {
	this := GetGiftcardVerifyV1RespData{}
	return &this
}

// NewGetGiftcardVerifyV1RespDataWithDefaults instantiates a new GetGiftcardVerifyV1RespData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetGiftcardVerifyV1RespDataWithDefaults() *GetGiftcardVerifyV1RespData {
	this := GetGiftcardVerifyV1RespData{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *GetGiftcardVerifyV1RespData) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetGiftcardVerifyV1RespData) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *GetGiftcardVerifyV1RespData) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *GetGiftcardVerifyV1RespData) SetAmount(v string) {
	o.Amount = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *GetGiftcardVerifyV1RespData) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetGiftcardVerifyV1RespData) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *GetGiftcardVerifyV1RespData) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *GetGiftcardVerifyV1RespData) SetToken(v string) {
	o.Token = &v
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *GetGiftcardVerifyV1RespData) GetValid() bool {
	if o == nil || IsNil(o.Valid) {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetGiftcardVerifyV1RespData) GetValidOk() (*bool, bool) {
	if o == nil || IsNil(o.Valid) {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *GetGiftcardVerifyV1RespData) HasValid() bool {
	if o != nil && !IsNil(o.Valid) {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *GetGiftcardVerifyV1RespData) SetValid(v bool) {
	o.Valid = &v
}

func (o GetGiftcardVerifyV1RespData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetGiftcardVerifyV1RespData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.Valid) {
		toSerialize["valid"] = o.Valid
	}
	return toSerialize, nil
}

type NullableGetGiftcardVerifyV1RespData struct {
	value *GetGiftcardVerifyV1RespData
	isSet bool
}

func (v NullableGetGiftcardVerifyV1RespData) Get() *GetGiftcardVerifyV1RespData {
	return v.value
}

func (v *NullableGetGiftcardVerifyV1RespData) Set(val *GetGiftcardVerifyV1RespData) {
	v.value = val
	v.isSet = true
}

func (v NullableGetGiftcardVerifyV1RespData) IsSet() bool {
	return v.isSet
}

func (v *NullableGetGiftcardVerifyV1RespData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetGiftcardVerifyV1RespData(val *GetGiftcardVerifyV1RespData) *NullableGetGiftcardVerifyV1RespData {
	return &NullableGetGiftcardVerifyV1RespData{value: val, isSet: true}
}

func (v NullableGetGiftcardVerifyV1RespData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetGiftcardVerifyV1RespData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



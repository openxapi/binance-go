/*
Binance Spot API

Testing SimpleEarnAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package spot

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/openxapi/binance-go/rest/spot"
)

func Test_spot_SimpleEarnAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SimpleEarnAPIService CreateSimpleEarnFlexibleRedeemV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.CreateSimpleEarnFlexibleRedeemV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SimpleEarnAPIService CreateSimpleEarnFlexibleSetAutoSubscribeV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.CreateSimpleEarnFlexibleSetAutoSubscribeV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SimpleEarnAPIService CreateSimpleEarnFlexibleSubscribeV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.CreateSimpleEarnFlexibleSubscribeV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SimpleEarnAPIService CreateSimpleEarnLockedRedeemV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.CreateSimpleEarnLockedRedeemV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SimpleEarnAPIService CreateSimpleEarnLockedSetAutoSubscribeV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.CreateSimpleEarnLockedSetAutoSubscribeV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SimpleEarnAPIService CreateSimpleEarnLockedSetRedeemOptionV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.CreateSimpleEarnLockedSetRedeemOptionV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SimpleEarnAPIService CreateSimpleEarnLockedSubscribeV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.CreateSimpleEarnLockedSubscribeV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SimpleEarnAPIService GetSimpleEarnAccountV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.GetSimpleEarnAccountV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SimpleEarnAPIService GetSimpleEarnFlexibleHistoryCollateralRecordV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.GetSimpleEarnFlexibleHistoryCollateralRecordV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SimpleEarnAPIService GetSimpleEarnFlexibleHistoryRateHistoryV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.GetSimpleEarnFlexibleHistoryRateHistoryV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SimpleEarnAPIService GetSimpleEarnFlexibleHistoryRedemptionRecordV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.GetSimpleEarnFlexibleHistoryRedemptionRecordV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SimpleEarnAPIService GetSimpleEarnFlexibleHistoryRewardsRecordV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.GetSimpleEarnFlexibleHistoryRewardsRecordV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SimpleEarnAPIService GetSimpleEarnFlexibleHistorySubscriptionRecordV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.GetSimpleEarnFlexibleHistorySubscriptionRecordV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SimpleEarnAPIService GetSimpleEarnFlexibleListV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.GetSimpleEarnFlexibleListV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SimpleEarnAPIService GetSimpleEarnFlexiblePersonalLeftQuotaV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.GetSimpleEarnFlexiblePersonalLeftQuotaV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SimpleEarnAPIService GetSimpleEarnFlexiblePositionV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.GetSimpleEarnFlexiblePositionV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SimpleEarnAPIService GetSimpleEarnFlexibleSubscriptionPreviewV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.GetSimpleEarnFlexibleSubscriptionPreviewV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SimpleEarnAPIService GetSimpleEarnLockedHistoryRedemptionRecordV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.GetSimpleEarnLockedHistoryRedemptionRecordV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SimpleEarnAPIService GetSimpleEarnLockedHistoryRewardsRecordV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.GetSimpleEarnLockedHistoryRewardsRecordV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SimpleEarnAPIService GetSimpleEarnLockedHistorySubscriptionRecordV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.GetSimpleEarnLockedHistorySubscriptionRecordV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SimpleEarnAPIService GetSimpleEarnLockedListV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.GetSimpleEarnLockedListV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SimpleEarnAPIService GetSimpleEarnLockedPersonalLeftQuotaV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.GetSimpleEarnLockedPersonalLeftQuotaV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SimpleEarnAPIService GetSimpleEarnLockedPositionV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.GetSimpleEarnLockedPositionV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SimpleEarnAPIService GetSimpleEarnLockedSubscriptionPreviewV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SimpleEarnAPI.GetSimpleEarnLockedSubscriptionPreviewV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

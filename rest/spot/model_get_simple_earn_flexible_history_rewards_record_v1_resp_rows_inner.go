/*
Binance Spot API

OpenAPI specification for Binance exchange - Spot API

API version: 0.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spot

import (
	"encoding/json"
)

// checks if the GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner{}

// GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner struct for GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner
type GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner struct {
	Asset *string `json:"asset,omitempty"`
	ProjectId *string `json:"projectId,omitempty"`
	Rewards *string `json:"rewards,omitempty"`
	Time *int64 `json:"time,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewGetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner instantiates a new GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner() *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner {
	this := GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner{}
	return &this
}

// NewGetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInnerWithDefaults instantiates a new GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInnerWithDefaults() *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner {
	this := GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner{}
	return &this
}

// GetAsset returns the Asset field value if set, zero value otherwise.
func (o *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) GetAsset() string {
	if o == nil || IsNil(o.Asset) {
		var ret string
		return ret
	}
	return *o.Asset
}

// GetAssetOk returns a tuple with the Asset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) GetAssetOk() (*string, bool) {
	if o == nil || IsNil(o.Asset) {
		return nil, false
	}
	return o.Asset, true
}

// HasAsset returns a boolean if a field has been set.
func (o *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) HasAsset() bool {
	if o != nil && !IsNil(o.Asset) {
		return true
	}

	return false
}

// SetAsset gets a reference to the given string and assigns it to the Asset field.
func (o *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) SetAsset(v string) {
	o.Asset = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetRewards returns the Rewards field value if set, zero value otherwise.
func (o *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) GetRewards() string {
	if o == nil || IsNil(o.Rewards) {
		var ret string
		return ret
	}
	return *o.Rewards
}

// GetRewardsOk returns a tuple with the Rewards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) GetRewardsOk() (*string, bool) {
	if o == nil || IsNil(o.Rewards) {
		return nil, false
	}
	return o.Rewards, true
}

// HasRewards returns a boolean if a field has been set.
func (o *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) HasRewards() bool {
	if o != nil && !IsNil(o.Rewards) {
		return true
	}

	return false
}

// SetRewards gets a reference to the given string and assigns it to the Rewards field.
func (o *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) SetRewards(v string) {
	o.Rewards = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) GetTime() int64 {
	if o == nil || IsNil(o.Time) {
		var ret int64
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) GetTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given int64 and assigns it to the Time field.
func (o *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) SetTime(v int64) {
	o.Time = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) SetType(v string) {
	o.Type = &v
}

func (o GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Asset) {
		toSerialize["asset"] = o.Asset
	}
	if !IsNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	if !IsNil(o.Rewards) {
		toSerialize["rewards"] = o.Rewards
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableGetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner struct {
	value *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner
	isSet bool
}

func (v NullableGetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) Get() *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner {
	return v.value
}

func (v *NullableGetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) Set(val *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner(val *GetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) *NullableGetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner {
	return &NullableGetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner{value: val, isSet: true}
}

func (v NullableGetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSimpleEarnFlexibleHistoryRewardsRecordV1RespRowsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Binance Spot API

OpenAPI specification for Binance exchange - Spot API

API version: 0.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spot

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// VipLoanAPIService VipLoanAPI service
type VipLoanAPIService service

type ApiCreateLoanVipBorrowV1Request struct {
	ctx context.Context
	ApiService *VipLoanAPIService
}

func (r ApiCreateLoanVipBorrowV1Request) Execute() (*CreateLoanVipBorrowV1Resp, *http.Response, error) {
	return r.ApiService.CreateLoanVipBorrowV1Execute(r)
}

/*
CreateLoanVipBorrowV1 VIP Loan Borrow(TRADE)

VIP loan is available for VIP users only.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateLoanVipBorrowV1Request
*/
func (a *VipLoanAPIService) CreateLoanVipBorrowV1(ctx context.Context) ApiCreateLoanVipBorrowV1Request {
	return ApiCreateLoanVipBorrowV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateLoanVipBorrowV1Resp
func (a *VipLoanAPIService) CreateLoanVipBorrowV1Execute(r ApiCreateLoanVipBorrowV1Request) (*CreateLoanVipBorrowV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateLoanVipBorrowV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VipLoanAPIService.CreateLoanVipBorrowV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/loan/vip/borrow"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// Prepare raw parameters for signature if needed
	var rawParams map[string]string
	// Add raw parameters to context if any
	if len(rawParams) > 0 {
		r.ctx = context.WithValue(r.ctx, ContextRawParams, rawParams)
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateLoanVipRenewV1Request struct {
	ctx context.Context
	ApiService *VipLoanAPIService
	loanTerm *int32
	orderId *int64
	timestamp *int64
	recvWindow *int64
}

func (r ApiCreateLoanVipRenewV1Request) LoanTerm(loanTerm int32) ApiCreateLoanVipRenewV1Request {
	r.loanTerm = &loanTerm
	return r
}

func (r ApiCreateLoanVipRenewV1Request) OrderId(orderId int64) ApiCreateLoanVipRenewV1Request {
	r.orderId = &orderId
	return r
}

func (r ApiCreateLoanVipRenewV1Request) Timestamp(timestamp int64) ApiCreateLoanVipRenewV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiCreateLoanVipRenewV1Request) RecvWindow(recvWindow int64) ApiCreateLoanVipRenewV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiCreateLoanVipRenewV1Request) Execute() (*CreateLoanVipRenewV1Resp, *http.Response, error) {
	return r.ApiService.CreateLoanVipRenewV1Execute(r)
}

/*
CreateLoanVipRenewV1 VIP Loan Renew(TRADE)

VIP loan is available for VIP users only.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateLoanVipRenewV1Request
*/
func (a *VipLoanAPIService) CreateLoanVipRenewV1(ctx context.Context) ApiCreateLoanVipRenewV1Request {
	return ApiCreateLoanVipRenewV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateLoanVipRenewV1Resp
func (a *VipLoanAPIService) CreateLoanVipRenewV1Execute(r ApiCreateLoanVipRenewV1Request) (*CreateLoanVipRenewV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateLoanVipRenewV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VipLoanAPIService.CreateLoanVipRenewV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/loan/vip/renew"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.loanTerm == nil {
		return localVarReturnValue, nil, reportError("loanTerm is required and must be specified")
	}
	if r.orderId == nil {
		return localVarReturnValue, nil, reportError("orderId is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// Prepare raw parameters for signature if needed
	var rawParams map[string]string
	parameterAddToHeaderOrQuery(localVarFormParams, "loanTerm", r.loanTerm, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "orderId", r.orderId, "", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	// Add raw parameters to context if any
	if len(rawParams) > 0 {
		r.ctx = context.WithValue(r.ctx, ContextRawParams, rawParams)
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateLoanVipRepayV1Request struct {
	ctx context.Context
	ApiService *VipLoanAPIService
	amount *string
	orderId *int64
	timestamp *int64
	recvWindow *int64
}

func (r ApiCreateLoanVipRepayV1Request) Amount(amount string) ApiCreateLoanVipRepayV1Request {
	r.amount = &amount
	return r
}

func (r ApiCreateLoanVipRepayV1Request) OrderId(orderId int64) ApiCreateLoanVipRepayV1Request {
	r.orderId = &orderId
	return r
}

func (r ApiCreateLoanVipRepayV1Request) Timestamp(timestamp int64) ApiCreateLoanVipRepayV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiCreateLoanVipRepayV1Request) RecvWindow(recvWindow int64) ApiCreateLoanVipRepayV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiCreateLoanVipRepayV1Request) Execute() (*CreateLoanVipRepayV1Resp, *http.Response, error) {
	return r.ApiService.CreateLoanVipRepayV1Execute(r)
}

/*
CreateLoanVipRepayV1 VIP Loan Repay(TRADE)

VIP loan is available for VIP users only.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateLoanVipRepayV1Request
*/
func (a *VipLoanAPIService) CreateLoanVipRepayV1(ctx context.Context) ApiCreateLoanVipRepayV1Request {
	return ApiCreateLoanVipRepayV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateLoanVipRepayV1Resp
func (a *VipLoanAPIService) CreateLoanVipRepayV1Execute(r ApiCreateLoanVipRepayV1Request) (*CreateLoanVipRepayV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateLoanVipRepayV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VipLoanAPIService.CreateLoanVipRepayV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/loan/vip/repay"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.amount == nil {
		return localVarReturnValue, nil, reportError("amount is required and must be specified")
	}
	if r.orderId == nil {
		return localVarReturnValue, nil, reportError("orderId is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// Prepare raw parameters for signature if needed
	var rawParams map[string]string
	parameterAddToHeaderOrQuery(localVarFormParams, "amount", r.amount, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "orderId", r.orderId, "", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	// Add raw parameters to context if any
	if len(rawParams) > 0 {
		r.ctx = context.WithValue(r.ctx, ContextRawParams, rawParams)
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLoanVipAccruedInterestV1Request struct {
	ctx context.Context
	ApiService *VipLoanAPIService
	recvWindow *int64
	timestamp *int64
	orderId *int64
	loanCoin *string
	startTime *int64
	endTime *int64
	current *int64
	limit *int64
}

func (r ApiGetLoanVipAccruedInterestV1Request) RecvWindow(recvWindow int64) ApiGetLoanVipAccruedInterestV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetLoanVipAccruedInterestV1Request) Timestamp(timestamp int64) ApiGetLoanVipAccruedInterestV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetLoanVipAccruedInterestV1Request) OrderId(orderId int64) ApiGetLoanVipAccruedInterestV1Request {
	r.orderId = &orderId
	return r
}

func (r ApiGetLoanVipAccruedInterestV1Request) LoanCoin(loanCoin string) ApiGetLoanVipAccruedInterestV1Request {
	r.loanCoin = &loanCoin
	return r
}

func (r ApiGetLoanVipAccruedInterestV1Request) StartTime(startTime int64) ApiGetLoanVipAccruedInterestV1Request {
	r.startTime = &startTime
	return r
}

func (r ApiGetLoanVipAccruedInterestV1Request) EndTime(endTime int64) ApiGetLoanVipAccruedInterestV1Request {
	r.endTime = &endTime
	return r
}

// Current querying page. Start from 1; default: 1; max: 1000
func (r ApiGetLoanVipAccruedInterestV1Request) Current(current int64) ApiGetLoanVipAccruedInterestV1Request {
	r.current = &current
	return r
}

// Default: 10; max: 100
func (r ApiGetLoanVipAccruedInterestV1Request) Limit(limit int64) ApiGetLoanVipAccruedInterestV1Request {
	r.limit = &limit
	return r
}

func (r ApiGetLoanVipAccruedInterestV1Request) Execute() (*GetLoanVipAccruedInterestV1Resp, *http.Response, error) {
	return r.ApiService.GetLoanVipAccruedInterestV1Execute(r)
}

/*
GetLoanVipAccruedInterestV1 Get VIP Loan Accrued Interest(USER_DATA)

GET /sapi/v1/loan/vip/accruedInterest

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLoanVipAccruedInterestV1Request
*/
func (a *VipLoanAPIService) GetLoanVipAccruedInterestV1(ctx context.Context) ApiGetLoanVipAccruedInterestV1Request {
	return ApiGetLoanVipAccruedInterestV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetLoanVipAccruedInterestV1Resp
func (a *VipLoanAPIService) GetLoanVipAccruedInterestV1Execute(r ApiGetLoanVipAccruedInterestV1Request) (*GetLoanVipAccruedInterestV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetLoanVipAccruedInterestV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VipLoanAPIService.GetLoanVipAccruedInterestV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/loan/vip/accruedInterest"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recvWindow == nil {
		return localVarReturnValue, nil, reportError("recvWindow is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.orderId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderId", r.orderId, "form", "")
	}
	if r.loanCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "loanCoin", r.loanCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.loanCoin = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.current != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "current", r.current, "form", "")
	} else {
		var defaultValue int64 = 1
		r.current = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int64 = 10
		r.limit = &defaultValue
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// Prepare raw parameters for signature if needed
	var rawParams map[string]string
	// Add raw parameters to context if any
	if len(rawParams) > 0 {
		r.ctx = context.WithValue(r.ctx, ContextRawParams, rawParams)
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLoanVipCollateralAccountV1Request struct {
	ctx context.Context
	ApiService *VipLoanAPIService
	timestamp *int64
	orderId *int64
	collateralAccountId *int64
	recvWindow *int64
}

func (r ApiGetLoanVipCollateralAccountV1Request) Timestamp(timestamp int64) ApiGetLoanVipCollateralAccountV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetLoanVipCollateralAccountV1Request) OrderId(orderId int64) ApiGetLoanVipCollateralAccountV1Request {
	r.orderId = &orderId
	return r
}

func (r ApiGetLoanVipCollateralAccountV1Request) CollateralAccountId(collateralAccountId int64) ApiGetLoanVipCollateralAccountV1Request {
	r.collateralAccountId = &collateralAccountId
	return r
}

func (r ApiGetLoanVipCollateralAccountV1Request) RecvWindow(recvWindow int64) ApiGetLoanVipCollateralAccountV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetLoanVipCollateralAccountV1Request) Execute() (*GetLoanVipCollateralAccountV1Resp, *http.Response, error) {
	return r.ApiService.GetLoanVipCollateralAccountV1Execute(r)
}

/*
GetLoanVipCollateralAccountV1 Check VIP Loan Collateral Account (USER_DATA)

VIP loan is available for VIP users only

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLoanVipCollateralAccountV1Request
*/
func (a *VipLoanAPIService) GetLoanVipCollateralAccountV1(ctx context.Context) ApiGetLoanVipCollateralAccountV1Request {
	return ApiGetLoanVipCollateralAccountV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetLoanVipCollateralAccountV1Resp
func (a *VipLoanAPIService) GetLoanVipCollateralAccountV1Execute(r ApiGetLoanVipCollateralAccountV1Request) (*GetLoanVipCollateralAccountV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetLoanVipCollateralAccountV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VipLoanAPIService.GetLoanVipCollateralAccountV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/loan/vip/collateral/account"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.orderId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderId", r.orderId, "form", "")
	}
	if r.collateralAccountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collateralAccountId", r.collateralAccountId, "form", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// Prepare raw parameters for signature if needed
	var rawParams map[string]string
	// Add raw parameters to context if any
	if len(rawParams) > 0 {
		r.ctx = context.WithValue(r.ctx, ContextRawParams, rawParams)
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLoanVipCollateralDataV1Request struct {
	ctx context.Context
	ApiService *VipLoanAPIService
	timestamp *int64
	collateralCoin *string
	recvWindow *int64
}

func (r ApiGetLoanVipCollateralDataV1Request) Timestamp(timestamp int64) ApiGetLoanVipCollateralDataV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetLoanVipCollateralDataV1Request) CollateralCoin(collateralCoin string) ApiGetLoanVipCollateralDataV1Request {
	r.collateralCoin = &collateralCoin
	return r
}

func (r ApiGetLoanVipCollateralDataV1Request) RecvWindow(recvWindow int64) ApiGetLoanVipCollateralDataV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetLoanVipCollateralDataV1Request) Execute() (*GetLoanVipCollateralDataV1Resp, *http.Response, error) {
	return r.ApiService.GetLoanVipCollateralDataV1Execute(r)
}

/*
GetLoanVipCollateralDataV1 Get Collateral Asset Data(USER_DATA)

Get Collateral Asset Data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLoanVipCollateralDataV1Request
*/
func (a *VipLoanAPIService) GetLoanVipCollateralDataV1(ctx context.Context) ApiGetLoanVipCollateralDataV1Request {
	return ApiGetLoanVipCollateralDataV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetLoanVipCollateralDataV1Resp
func (a *VipLoanAPIService) GetLoanVipCollateralDataV1Execute(r ApiGetLoanVipCollateralDataV1Request) (*GetLoanVipCollateralDataV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetLoanVipCollateralDataV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VipLoanAPIService.GetLoanVipCollateralDataV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/loan/vip/collateral/data"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.collateralCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collateralCoin", r.collateralCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.collateralCoin = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// Prepare raw parameters for signature if needed
	var rawParams map[string]string
	// Add raw parameters to context if any
	if len(rawParams) > 0 {
		r.ctx = context.WithValue(r.ctx, ContextRawParams, rawParams)
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLoanVipInterestRateHistoryV1Request struct {
	ctx context.Context
	ApiService *VipLoanAPIService
	coin *string
	recvWindow *int64
	timestamp *int64
	startTime *int64
	endTime *int64
	current *int64
	limit *int64
}

func (r ApiGetLoanVipInterestRateHistoryV1Request) Coin(coin string) ApiGetLoanVipInterestRateHistoryV1Request {
	r.coin = &coin
	return r
}

func (r ApiGetLoanVipInterestRateHistoryV1Request) RecvWindow(recvWindow int64) ApiGetLoanVipInterestRateHistoryV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetLoanVipInterestRateHistoryV1Request) Timestamp(timestamp int64) ApiGetLoanVipInterestRateHistoryV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetLoanVipInterestRateHistoryV1Request) StartTime(startTime int64) ApiGetLoanVipInterestRateHistoryV1Request {
	r.startTime = &startTime
	return r
}

func (r ApiGetLoanVipInterestRateHistoryV1Request) EndTime(endTime int64) ApiGetLoanVipInterestRateHistoryV1Request {
	r.endTime = &endTime
	return r
}

// Check current querying page, start from 1. Default：1；Max：1000.
func (r ApiGetLoanVipInterestRateHistoryV1Request) Current(current int64) ApiGetLoanVipInterestRateHistoryV1Request {
	r.current = &current
	return r
}

// Default：10; Max：100.
func (r ApiGetLoanVipInterestRateHistoryV1Request) Limit(limit int64) ApiGetLoanVipInterestRateHistoryV1Request {
	r.limit = &limit
	return r
}

func (r ApiGetLoanVipInterestRateHistoryV1Request) Execute() (*GetLoanVipInterestRateHistoryV1Resp, *http.Response, error) {
	return r.ApiService.GetLoanVipInterestRateHistoryV1Execute(r)
}

/*
GetLoanVipInterestRateHistoryV1 Get VIP Loan Interest Rate History (USER_DATA)

Get VIP Loan Interest Rate History

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLoanVipInterestRateHistoryV1Request
*/
func (a *VipLoanAPIService) GetLoanVipInterestRateHistoryV1(ctx context.Context) ApiGetLoanVipInterestRateHistoryV1Request {
	return ApiGetLoanVipInterestRateHistoryV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetLoanVipInterestRateHistoryV1Resp
func (a *VipLoanAPIService) GetLoanVipInterestRateHistoryV1Execute(r ApiGetLoanVipInterestRateHistoryV1Request) (*GetLoanVipInterestRateHistoryV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetLoanVipInterestRateHistoryV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VipLoanAPIService.GetLoanVipInterestRateHistoryV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/loan/vip/interestRateHistory"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.coin == nil {
		return localVarReturnValue, nil, reportError("coin is required and must be specified")
	}
	if r.recvWindow == nil {
		return localVarReturnValue, nil, reportError("recvWindow is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "coin", r.coin, "form", "")
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.current != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "current", r.current, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// Prepare raw parameters for signature if needed
	var rawParams map[string]string
	// Add raw parameters to context if any
	if len(rawParams) > 0 {
		r.ctx = context.WithValue(r.ctx, ContextRawParams, rawParams)
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLoanVipLoanableDataV1Request struct {
	ctx context.Context
	ApiService *VipLoanAPIService
	timestamp *int64
	loanCoin *string
	vipLevel *int32
	recvWindow *int64
}

func (r ApiGetLoanVipLoanableDataV1Request) Timestamp(timestamp int64) ApiGetLoanVipLoanableDataV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetLoanVipLoanableDataV1Request) LoanCoin(loanCoin string) ApiGetLoanVipLoanableDataV1Request {
	r.loanCoin = &loanCoin
	return r
}

// default:user&amp;#39;s vip level
func (r ApiGetLoanVipLoanableDataV1Request) VipLevel(vipLevel int32) ApiGetLoanVipLoanableDataV1Request {
	r.vipLevel = &vipLevel
	return r
}

func (r ApiGetLoanVipLoanableDataV1Request) RecvWindow(recvWindow int64) ApiGetLoanVipLoanableDataV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetLoanVipLoanableDataV1Request) Execute() (*GetLoanVipLoanableDataV1Resp, *http.Response, error) {
	return r.ApiService.GetLoanVipLoanableDataV1Execute(r)
}

/*
GetLoanVipLoanableDataV1 Get Loanable Assets Data(USER_DATA)

Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLoanVipLoanableDataV1Request
*/
func (a *VipLoanAPIService) GetLoanVipLoanableDataV1(ctx context.Context) ApiGetLoanVipLoanableDataV1Request {
	return ApiGetLoanVipLoanableDataV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetLoanVipLoanableDataV1Resp
func (a *VipLoanAPIService) GetLoanVipLoanableDataV1Execute(r ApiGetLoanVipLoanableDataV1Request) (*GetLoanVipLoanableDataV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetLoanVipLoanableDataV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VipLoanAPIService.GetLoanVipLoanableDataV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/loan/vip/loanable/data"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.loanCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "loanCoin", r.loanCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.loanCoin = &defaultValue
	}
	if r.vipLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vipLevel", r.vipLevel, "form", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// Prepare raw parameters for signature if needed
	var rawParams map[string]string
	// Add raw parameters to context if any
	if len(rawParams) > 0 {
		r.ctx = context.WithValue(r.ctx, ContextRawParams, rawParams)
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLoanVipOngoingOrdersV1Request struct {
	ctx context.Context
	ApiService *VipLoanAPIService
	timestamp *int64
	orderId *int64
	collateralAccountId *int64
	loanCoin *string
	collateralCoin *string
	current *int64
	limit *int64
	recvWindow *int64
}

func (r ApiGetLoanVipOngoingOrdersV1Request) Timestamp(timestamp int64) ApiGetLoanVipOngoingOrdersV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetLoanVipOngoingOrdersV1Request) OrderId(orderId int64) ApiGetLoanVipOngoingOrdersV1Request {
	r.orderId = &orderId
	return r
}

func (r ApiGetLoanVipOngoingOrdersV1Request) CollateralAccountId(collateralAccountId int64) ApiGetLoanVipOngoingOrdersV1Request {
	r.collateralAccountId = &collateralAccountId
	return r
}

func (r ApiGetLoanVipOngoingOrdersV1Request) LoanCoin(loanCoin string) ApiGetLoanVipOngoingOrdersV1Request {
	r.loanCoin = &loanCoin
	return r
}

func (r ApiGetLoanVipOngoingOrdersV1Request) CollateralCoin(collateralCoin string) ApiGetLoanVipOngoingOrdersV1Request {
	r.collateralCoin = &collateralCoin
	return r
}

// Currently querying page. Start from 1, Default:1, Max: 1000.
func (r ApiGetLoanVipOngoingOrdersV1Request) Current(current int64) ApiGetLoanVipOngoingOrdersV1Request {
	r.current = &current
	return r
}

// Default: 10, Max: 100
func (r ApiGetLoanVipOngoingOrdersV1Request) Limit(limit int64) ApiGetLoanVipOngoingOrdersV1Request {
	r.limit = &limit
	return r
}

func (r ApiGetLoanVipOngoingOrdersV1Request) RecvWindow(recvWindow int64) ApiGetLoanVipOngoingOrdersV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetLoanVipOngoingOrdersV1Request) Execute() (*GetLoanVipOngoingOrdersV1Resp, *http.Response, error) {
	return r.ApiService.GetLoanVipOngoingOrdersV1Execute(r)
}

/*
GetLoanVipOngoingOrdersV1 Get VIP Loan Ongoing Orders(USER_DATA)

VIP loan is available for VIP users only.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLoanVipOngoingOrdersV1Request
*/
func (a *VipLoanAPIService) GetLoanVipOngoingOrdersV1(ctx context.Context) ApiGetLoanVipOngoingOrdersV1Request {
	return ApiGetLoanVipOngoingOrdersV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetLoanVipOngoingOrdersV1Resp
func (a *VipLoanAPIService) GetLoanVipOngoingOrdersV1Execute(r ApiGetLoanVipOngoingOrdersV1Request) (*GetLoanVipOngoingOrdersV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetLoanVipOngoingOrdersV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VipLoanAPIService.GetLoanVipOngoingOrdersV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/loan/vip/ongoing/orders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.orderId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderId", r.orderId, "form", "")
	}
	if r.collateralAccountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collateralAccountId", r.collateralAccountId, "form", "")
	}
	if r.loanCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "loanCoin", r.loanCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.loanCoin = &defaultValue
	}
	if r.collateralCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collateralCoin", r.collateralCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.collateralCoin = &defaultValue
	}
	if r.current != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "current", r.current, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int64 = 10
		r.limit = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// Prepare raw parameters for signature if needed
	var rawParams map[string]string
	// Add raw parameters to context if any
	if len(rawParams) > 0 {
		r.ctx = context.WithValue(r.ctx, ContextRawParams, rawParams)
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLoanVipRepayHistoryV1Request struct {
	ctx context.Context
	ApiService *VipLoanAPIService
	timestamp *int64
	orderId *int64
	loanCoin *string
	startTime *int64
	endTime *int64
	current *int64
	limit *int64
	recvWindow *int64
}

func (r ApiGetLoanVipRepayHistoryV1Request) Timestamp(timestamp int64) ApiGetLoanVipRepayHistoryV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetLoanVipRepayHistoryV1Request) OrderId(orderId int64) ApiGetLoanVipRepayHistoryV1Request {
	r.orderId = &orderId
	return r
}

func (r ApiGetLoanVipRepayHistoryV1Request) LoanCoin(loanCoin string) ApiGetLoanVipRepayHistoryV1Request {
	r.loanCoin = &loanCoin
	return r
}

func (r ApiGetLoanVipRepayHistoryV1Request) StartTime(startTime int64) ApiGetLoanVipRepayHistoryV1Request {
	r.startTime = &startTime
	return r
}

func (r ApiGetLoanVipRepayHistoryV1Request) EndTime(endTime int64) ApiGetLoanVipRepayHistoryV1Request {
	r.endTime = &endTime
	return r
}

// Currently querying page. Start from 1, Default:1, Max: 1000
func (r ApiGetLoanVipRepayHistoryV1Request) Current(current int64) ApiGetLoanVipRepayHistoryV1Request {
	r.current = &current
	return r
}

// Default: 10, Max: 100
func (r ApiGetLoanVipRepayHistoryV1Request) Limit(limit int64) ApiGetLoanVipRepayHistoryV1Request {
	r.limit = &limit
	return r
}

func (r ApiGetLoanVipRepayHistoryV1Request) RecvWindow(recvWindow int64) ApiGetLoanVipRepayHistoryV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetLoanVipRepayHistoryV1Request) Execute() (*GetLoanVipRepayHistoryV1Resp, *http.Response, error) {
	return r.ApiService.GetLoanVipRepayHistoryV1Execute(r)
}

/*
GetLoanVipRepayHistoryV1 Get VIP Loan Repayment History(USER_DATA)

GET /sapi/v1/loan/vip/repay/history

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLoanVipRepayHistoryV1Request
*/
func (a *VipLoanAPIService) GetLoanVipRepayHistoryV1(ctx context.Context) ApiGetLoanVipRepayHistoryV1Request {
	return ApiGetLoanVipRepayHistoryV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetLoanVipRepayHistoryV1Resp
func (a *VipLoanAPIService) GetLoanVipRepayHistoryV1Execute(r ApiGetLoanVipRepayHistoryV1Request) (*GetLoanVipRepayHistoryV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetLoanVipRepayHistoryV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VipLoanAPIService.GetLoanVipRepayHistoryV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/loan/vip/repay/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.orderId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderId", r.orderId, "form", "")
	}
	if r.loanCoin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "loanCoin", r.loanCoin, "form", "")
	} else {
		var defaultValue string = ""
		r.loanCoin = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.current != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "current", r.current, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int64 = 10
		r.limit = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// Prepare raw parameters for signature if needed
	var rawParams map[string]string
	// Add raw parameters to context if any
	if len(rawParams) > 0 {
		r.ctx = context.WithValue(r.ctx, ContextRawParams, rawParams)
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLoanVipRequestDataV1Request struct {
	ctx context.Context
	ApiService *VipLoanAPIService
	timestamp *int64
	current *int64
	limit *int64
	recvWindow *int64
}

func (r ApiGetLoanVipRequestDataV1Request) Timestamp(timestamp int64) ApiGetLoanVipRequestDataV1Request {
	r.timestamp = &timestamp
	return r
}

// Currently querying page. Start from 1, Default:1, Max: 1000
func (r ApiGetLoanVipRequestDataV1Request) Current(current int64) ApiGetLoanVipRequestDataV1Request {
	r.current = &current
	return r
}

// Default: 10, Max: 100
func (r ApiGetLoanVipRequestDataV1Request) Limit(limit int64) ApiGetLoanVipRequestDataV1Request {
	r.limit = &limit
	return r
}

func (r ApiGetLoanVipRequestDataV1Request) RecvWindow(recvWindow int64) ApiGetLoanVipRequestDataV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetLoanVipRequestDataV1Request) Execute() (*GetLoanVipRequestDataV1Resp, *http.Response, error) {
	return r.ApiService.GetLoanVipRequestDataV1Execute(r)
}

/*
GetLoanVipRequestDataV1 Query Application Status(USER_DATA)

Query Application Status

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLoanVipRequestDataV1Request
*/
func (a *VipLoanAPIService) GetLoanVipRequestDataV1(ctx context.Context) ApiGetLoanVipRequestDataV1Request {
	return ApiGetLoanVipRequestDataV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetLoanVipRequestDataV1Resp
func (a *VipLoanAPIService) GetLoanVipRequestDataV1Execute(r ApiGetLoanVipRequestDataV1Request) (*GetLoanVipRequestDataV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetLoanVipRequestDataV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VipLoanAPIService.GetLoanVipRequestDataV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/loan/vip/request/data"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.current != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "current", r.current, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int64 = 10
		r.limit = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// Prepare raw parameters for signature if needed
	var rawParams map[string]string
	// Add raw parameters to context if any
	if len(rawParams) > 0 {
		r.ctx = context.WithValue(r.ctx, ContextRawParams, rawParams)
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLoanVipRequestInterestRateV1Request struct {
	ctx context.Context
	ApiService *VipLoanAPIService
	loanCoin *string
	timestamp *int64
	recvWindow *int64
}

// Max 10 assets, Multiple split by &amp;#34;,&amp;#34;
func (r ApiGetLoanVipRequestInterestRateV1Request) LoanCoin(loanCoin string) ApiGetLoanVipRequestInterestRateV1Request {
	r.loanCoin = &loanCoin
	return r
}

func (r ApiGetLoanVipRequestInterestRateV1Request) Timestamp(timestamp int64) ApiGetLoanVipRequestInterestRateV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetLoanVipRequestInterestRateV1Request) RecvWindow(recvWindow int64) ApiGetLoanVipRequestInterestRateV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetLoanVipRequestInterestRateV1Request) Execute() ([]GetLoanVipRequestInterestRateV1RespItem, *http.Response, error) {
	return r.ApiService.GetLoanVipRequestInterestRateV1Execute(r)
}

/*
GetLoanVipRequestInterestRateV1 Get Borrow Interest Rate(USER_DATA)

Get Borrow Interest Rate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLoanVipRequestInterestRateV1Request
*/
func (a *VipLoanAPIService) GetLoanVipRequestInterestRateV1(ctx context.Context) ApiGetLoanVipRequestInterestRateV1Request {
	return ApiGetLoanVipRequestInterestRateV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []GetLoanVipRequestInterestRateV1RespItem
func (a *VipLoanAPIService) GetLoanVipRequestInterestRateV1Execute(r ApiGetLoanVipRequestInterestRateV1Request) ([]GetLoanVipRequestInterestRateV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetLoanVipRequestInterestRateV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VipLoanAPIService.GetLoanVipRequestInterestRateV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/loan/vip/request/interestRate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.loanCoin == nil {
		return localVarReturnValue, nil, reportError("loanCoin is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "loanCoin", r.loanCoin, "form", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// Prepare raw parameters for signature if needed
	var rawParams map[string]string
	// Add raw parameters to context if any
	if len(rawParams) > 0 {
		r.ctx = context.WithValue(r.ctx, ContextRawParams, rawParams)
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
Binance Spot API

OpenAPI specification for Binance exchange - Spot API

API version: 0.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spot

import (
	"encoding/json"
)

// checks if the CreateAssetDustBtcV1RespDetailsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateAssetDustBtcV1RespDetailsInner{}

// CreateAssetDustBtcV1RespDetailsInner struct for CreateAssetDustBtcV1RespDetailsInner
type CreateAssetDustBtcV1RespDetailsInner struct {
	AmountFree *string `json:"amountFree,omitempty"`
	Asset *string `json:"asset,omitempty"`
	AssetFullName *string `json:"assetFullName,omitempty"`
	Exchange *string `json:"exchange,omitempty"`
	ToBNB *string `json:"toBNB,omitempty"`
	ToBNBOffExchange *string `json:"toBNBOffExchange,omitempty"`
	ToBTC *string `json:"toBTC,omitempty"`
}

// NewCreateAssetDustBtcV1RespDetailsInner instantiates a new CreateAssetDustBtcV1RespDetailsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAssetDustBtcV1RespDetailsInner() *CreateAssetDustBtcV1RespDetailsInner {
	this := CreateAssetDustBtcV1RespDetailsInner{}
	return &this
}

// NewCreateAssetDustBtcV1RespDetailsInnerWithDefaults instantiates a new CreateAssetDustBtcV1RespDetailsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAssetDustBtcV1RespDetailsInnerWithDefaults() *CreateAssetDustBtcV1RespDetailsInner {
	this := CreateAssetDustBtcV1RespDetailsInner{}
	return &this
}

// GetAmountFree returns the AmountFree field value if set, zero value otherwise.
func (o *CreateAssetDustBtcV1RespDetailsInner) GetAmountFree() string {
	if o == nil || IsNil(o.AmountFree) {
		var ret string
		return ret
	}
	return *o.AmountFree
}

// GetAmountFreeOk returns a tuple with the AmountFree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetDustBtcV1RespDetailsInner) GetAmountFreeOk() (*string, bool) {
	if o == nil || IsNil(o.AmountFree) {
		return nil, false
	}
	return o.AmountFree, true
}

// HasAmountFree returns a boolean if a field has been set.
func (o *CreateAssetDustBtcV1RespDetailsInner) HasAmountFree() bool {
	if o != nil && !IsNil(o.AmountFree) {
		return true
	}

	return false
}

// SetAmountFree gets a reference to the given string and assigns it to the AmountFree field.
func (o *CreateAssetDustBtcV1RespDetailsInner) SetAmountFree(v string) {
	o.AmountFree = &v
}

// GetAsset returns the Asset field value if set, zero value otherwise.
func (o *CreateAssetDustBtcV1RespDetailsInner) GetAsset() string {
	if o == nil || IsNil(o.Asset) {
		var ret string
		return ret
	}
	return *o.Asset
}

// GetAssetOk returns a tuple with the Asset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetDustBtcV1RespDetailsInner) GetAssetOk() (*string, bool) {
	if o == nil || IsNil(o.Asset) {
		return nil, false
	}
	return o.Asset, true
}

// HasAsset returns a boolean if a field has been set.
func (o *CreateAssetDustBtcV1RespDetailsInner) HasAsset() bool {
	if o != nil && !IsNil(o.Asset) {
		return true
	}

	return false
}

// SetAsset gets a reference to the given string and assigns it to the Asset field.
func (o *CreateAssetDustBtcV1RespDetailsInner) SetAsset(v string) {
	o.Asset = &v
}

// GetAssetFullName returns the AssetFullName field value if set, zero value otherwise.
func (o *CreateAssetDustBtcV1RespDetailsInner) GetAssetFullName() string {
	if o == nil || IsNil(o.AssetFullName) {
		var ret string
		return ret
	}
	return *o.AssetFullName
}

// GetAssetFullNameOk returns a tuple with the AssetFullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetDustBtcV1RespDetailsInner) GetAssetFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.AssetFullName) {
		return nil, false
	}
	return o.AssetFullName, true
}

// HasAssetFullName returns a boolean if a field has been set.
func (o *CreateAssetDustBtcV1RespDetailsInner) HasAssetFullName() bool {
	if o != nil && !IsNil(o.AssetFullName) {
		return true
	}

	return false
}

// SetAssetFullName gets a reference to the given string and assigns it to the AssetFullName field.
func (o *CreateAssetDustBtcV1RespDetailsInner) SetAssetFullName(v string) {
	o.AssetFullName = &v
}

// GetExchange returns the Exchange field value if set, zero value otherwise.
func (o *CreateAssetDustBtcV1RespDetailsInner) GetExchange() string {
	if o == nil || IsNil(o.Exchange) {
		var ret string
		return ret
	}
	return *o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetDustBtcV1RespDetailsInner) GetExchangeOk() (*string, bool) {
	if o == nil || IsNil(o.Exchange) {
		return nil, false
	}
	return o.Exchange, true
}

// HasExchange returns a boolean if a field has been set.
func (o *CreateAssetDustBtcV1RespDetailsInner) HasExchange() bool {
	if o != nil && !IsNil(o.Exchange) {
		return true
	}

	return false
}

// SetExchange gets a reference to the given string and assigns it to the Exchange field.
func (o *CreateAssetDustBtcV1RespDetailsInner) SetExchange(v string) {
	o.Exchange = &v
}

// GetToBNB returns the ToBNB field value if set, zero value otherwise.
func (o *CreateAssetDustBtcV1RespDetailsInner) GetToBNB() string {
	if o == nil || IsNil(o.ToBNB) {
		var ret string
		return ret
	}
	return *o.ToBNB
}

// GetToBNBOk returns a tuple with the ToBNB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetDustBtcV1RespDetailsInner) GetToBNBOk() (*string, bool) {
	if o == nil || IsNil(o.ToBNB) {
		return nil, false
	}
	return o.ToBNB, true
}

// HasToBNB returns a boolean if a field has been set.
func (o *CreateAssetDustBtcV1RespDetailsInner) HasToBNB() bool {
	if o != nil && !IsNil(o.ToBNB) {
		return true
	}

	return false
}

// SetToBNB gets a reference to the given string and assigns it to the ToBNB field.
func (o *CreateAssetDustBtcV1RespDetailsInner) SetToBNB(v string) {
	o.ToBNB = &v
}

// GetToBNBOffExchange returns the ToBNBOffExchange field value if set, zero value otherwise.
func (o *CreateAssetDustBtcV1RespDetailsInner) GetToBNBOffExchange() string {
	if o == nil || IsNil(o.ToBNBOffExchange) {
		var ret string
		return ret
	}
	return *o.ToBNBOffExchange
}

// GetToBNBOffExchangeOk returns a tuple with the ToBNBOffExchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetDustBtcV1RespDetailsInner) GetToBNBOffExchangeOk() (*string, bool) {
	if o == nil || IsNil(o.ToBNBOffExchange) {
		return nil, false
	}
	return o.ToBNBOffExchange, true
}

// HasToBNBOffExchange returns a boolean if a field has been set.
func (o *CreateAssetDustBtcV1RespDetailsInner) HasToBNBOffExchange() bool {
	if o != nil && !IsNil(o.ToBNBOffExchange) {
		return true
	}

	return false
}

// SetToBNBOffExchange gets a reference to the given string and assigns it to the ToBNBOffExchange field.
func (o *CreateAssetDustBtcV1RespDetailsInner) SetToBNBOffExchange(v string) {
	o.ToBNBOffExchange = &v
}

// GetToBTC returns the ToBTC field value if set, zero value otherwise.
func (o *CreateAssetDustBtcV1RespDetailsInner) GetToBTC() string {
	if o == nil || IsNil(o.ToBTC) {
		var ret string
		return ret
	}
	return *o.ToBTC
}

// GetToBTCOk returns a tuple with the ToBTC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetDustBtcV1RespDetailsInner) GetToBTCOk() (*string, bool) {
	if o == nil || IsNil(o.ToBTC) {
		return nil, false
	}
	return o.ToBTC, true
}

// HasToBTC returns a boolean if a field has been set.
func (o *CreateAssetDustBtcV1RespDetailsInner) HasToBTC() bool {
	if o != nil && !IsNil(o.ToBTC) {
		return true
	}

	return false
}

// SetToBTC gets a reference to the given string and assigns it to the ToBTC field.
func (o *CreateAssetDustBtcV1RespDetailsInner) SetToBTC(v string) {
	o.ToBTC = &v
}

func (o CreateAssetDustBtcV1RespDetailsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateAssetDustBtcV1RespDetailsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AmountFree) {
		toSerialize["amountFree"] = o.AmountFree
	}
	if !IsNil(o.Asset) {
		toSerialize["asset"] = o.Asset
	}
	if !IsNil(o.AssetFullName) {
		toSerialize["assetFullName"] = o.AssetFullName
	}
	if !IsNil(o.Exchange) {
		toSerialize["exchange"] = o.Exchange
	}
	if !IsNil(o.ToBNB) {
		toSerialize["toBNB"] = o.ToBNB
	}
	if !IsNil(o.ToBNBOffExchange) {
		toSerialize["toBNBOffExchange"] = o.ToBNBOffExchange
	}
	if !IsNil(o.ToBTC) {
		toSerialize["toBTC"] = o.ToBTC
	}
	return toSerialize, nil
}

type NullableCreateAssetDustBtcV1RespDetailsInner struct {
	value *CreateAssetDustBtcV1RespDetailsInner
	isSet bool
}

func (v NullableCreateAssetDustBtcV1RespDetailsInner) Get() *CreateAssetDustBtcV1RespDetailsInner {
	return v.value
}

func (v *NullableCreateAssetDustBtcV1RespDetailsInner) Set(val *CreateAssetDustBtcV1RespDetailsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAssetDustBtcV1RespDetailsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAssetDustBtcV1RespDetailsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAssetDustBtcV1RespDetailsInner(val *CreateAssetDustBtcV1RespDetailsInner) *NullableCreateAssetDustBtcV1RespDetailsInner {
	return &NullableCreateAssetDustBtcV1RespDetailsInner{value: val, isSet: true}
}

func (v NullableCreateAssetDustBtcV1RespDetailsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAssetDustBtcV1RespDetailsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



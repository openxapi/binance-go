/*
Binance Sub Account API

OpenAPI specification for Binance exchange - Subaccount API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package subaccount

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// V2APIService V2API service
type V2APIService service

type V2APISubaccountCreateSubAccountSubAccountApiIpRestrictionV2Request struct {
	ctx context.Context
	ApiService *V2APIService
	email *string
	status *string
	subAccountApiKey *string
	timestamp *int64
	ipAddress *string
	recvWindow *int64
}

func (r V2APISubaccountCreateSubAccountSubAccountApiIpRestrictionV2Request) Email(email string) V2APISubaccountCreateSubAccountSubAccountApiIpRestrictionV2Request {
	r.email = &email
	return r
}

func (r V2APISubaccountCreateSubAccountSubAccountApiIpRestrictionV2Request) Status(status string) V2APISubaccountCreateSubAccountSubAccountApiIpRestrictionV2Request {
	r.status = &status
	return r
}

func (r V2APISubaccountCreateSubAccountSubAccountApiIpRestrictionV2Request) SubAccountApiKey(subAccountApiKey string) V2APISubaccountCreateSubAccountSubAccountApiIpRestrictionV2Request {
	r.subAccountApiKey = &subAccountApiKey
	return r
}

func (r V2APISubaccountCreateSubAccountSubAccountApiIpRestrictionV2Request) Timestamp(timestamp int64) V2APISubaccountCreateSubAccountSubAccountApiIpRestrictionV2Request {
	r.timestamp = &timestamp
	return r
}

func (r V2APISubaccountCreateSubAccountSubAccountApiIpRestrictionV2Request) IpAddress(ipAddress string) V2APISubaccountCreateSubAccountSubAccountApiIpRestrictionV2Request {
	r.ipAddress = &ipAddress
	return r
}

func (r V2APISubaccountCreateSubAccountSubAccountApiIpRestrictionV2Request) RecvWindow(recvWindow int64) V2APISubaccountCreateSubAccountSubAccountApiIpRestrictionV2Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V2APISubaccountCreateSubAccountSubAccountApiIpRestrictionV2Request) Execute() (*SubaccountCreateSubAccountSubAccountApiIpRestrictionV2Resp, *http.Response, error) {
	return r.ApiService.SubaccountCreateSubAccountSubAccountApiIpRestrictionV2Execute(r)
}

/*
SubaccountCreateSubAccountSubAccountApiIpRestrictionV2 Add IP Restriction for Sub-Account API key(For Master Account)

Add IP Restriction for Sub-Account API key

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V2APISubaccountCreateSubAccountSubAccountApiIpRestrictionV2Request
*/
func (a *V2APIService) SubaccountCreateSubAccountSubAccountApiIpRestrictionV2(ctx context.Context) V2APISubaccountCreateSubAccountSubAccountApiIpRestrictionV2Request {
	return V2APISubaccountCreateSubAccountSubAccountApiIpRestrictionV2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SubaccountCreateSubAccountSubAccountApiIpRestrictionV2Resp
func (a *V2APIService) SubaccountCreateSubAccountSubAccountApiIpRestrictionV2Execute(r V2APISubaccountCreateSubAccountSubAccountApiIpRestrictionV2Request) (*SubaccountCreateSubAccountSubAccountApiIpRestrictionV2Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubaccountCreateSubAccountSubAccountApiIpRestrictionV2Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V2APIService.SubaccountCreateSubAccountSubAccountApiIpRestrictionV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v2/sub-account/subAccountApi/ipRestriction"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.email == nil {
		return localVarReturnValue, nil, reportError("email is required and must be specified")
	}
	if r.status == nil {
		return localVarReturnValue, nil, reportError("status is required and must be specified")
	}
	if r.subAccountApiKey == nil {
		return localVarReturnValue, nil, reportError("subAccountApiKey is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "email", r.email, "", "")
	if r.ipAddress != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "ipAddress", r.ipAddress, "", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "status", r.status, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "subAccountApiKey", r.subAccountApiKey, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V2APISubaccountGetSubAccountFuturesAccountSummaryV2Request struct {
	ctx context.Context
	ApiService *V2APIService
	futuresType *int32
	timestamp *int64
	page *int32
	limit *int32
	recvWindow *int64
}

// 1:USDT Margined Futures, 2:COIN Margined Futures
func (r V2APISubaccountGetSubAccountFuturesAccountSummaryV2Request) FuturesType(futuresType int32) V2APISubaccountGetSubAccountFuturesAccountSummaryV2Request {
	r.futuresType = &futuresType
	return r
}

func (r V2APISubaccountGetSubAccountFuturesAccountSummaryV2Request) Timestamp(timestamp int64) V2APISubaccountGetSubAccountFuturesAccountSummaryV2Request {
	r.timestamp = &timestamp
	return r
}

// default:1
func (r V2APISubaccountGetSubAccountFuturesAccountSummaryV2Request) Page(page int32) V2APISubaccountGetSubAccountFuturesAccountSummaryV2Request {
	r.page = &page
	return r
}

// default:10, max:20
func (r V2APISubaccountGetSubAccountFuturesAccountSummaryV2Request) Limit(limit int32) V2APISubaccountGetSubAccountFuturesAccountSummaryV2Request {
	r.limit = &limit
	return r
}

func (r V2APISubaccountGetSubAccountFuturesAccountSummaryV2Request) RecvWindow(recvWindow int64) V2APISubaccountGetSubAccountFuturesAccountSummaryV2Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V2APISubaccountGetSubAccountFuturesAccountSummaryV2Request) Execute() (*SubaccountGetSubAccountFuturesAccountSummaryV2Resp, *http.Response, error) {
	return r.ApiService.SubaccountGetSubAccountFuturesAccountSummaryV2Execute(r)
}

/*
SubaccountGetSubAccountFuturesAccountSummaryV2 Get Summary of Sub-account's Futures Account V2(For Master Account)

Get Summary of Sub-account's Futures Account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V2APISubaccountGetSubAccountFuturesAccountSummaryV2Request
*/
func (a *V2APIService) SubaccountGetSubAccountFuturesAccountSummaryV2(ctx context.Context) V2APISubaccountGetSubAccountFuturesAccountSummaryV2Request {
	return V2APISubaccountGetSubAccountFuturesAccountSummaryV2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SubaccountGetSubAccountFuturesAccountSummaryV2Resp
func (a *V2APIService) SubaccountGetSubAccountFuturesAccountSummaryV2Execute(r V2APISubaccountGetSubAccountFuturesAccountSummaryV2Request) (*SubaccountGetSubAccountFuturesAccountSummaryV2Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubaccountGetSubAccountFuturesAccountSummaryV2Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V2APIService.SubaccountGetSubAccountFuturesAccountSummaryV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v2/sub-account/futures/accountSummary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.futuresType == nil {
		return localVarReturnValue, nil, reportError("futuresType is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "futuresType", r.futuresType, "form", "")
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V2APISubaccountGetSubAccountFuturesAccountV2Request struct {
	ctx context.Context
	ApiService *V2APIService
	email *string
	futuresType *int32
	timestamp *int64
	recvWindow *int64
}

// &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Futures-Account-V2#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
func (r V2APISubaccountGetSubAccountFuturesAccountV2Request) Email(email string) V2APISubaccountGetSubAccountFuturesAccountV2Request {
	r.email = &email
	return r
}

// 1:USDT Margined Futures, 2:COIN Margined Futures
func (r V2APISubaccountGetSubAccountFuturesAccountV2Request) FuturesType(futuresType int32) V2APISubaccountGetSubAccountFuturesAccountV2Request {
	r.futuresType = &futuresType
	return r
}

func (r V2APISubaccountGetSubAccountFuturesAccountV2Request) Timestamp(timestamp int64) V2APISubaccountGetSubAccountFuturesAccountV2Request {
	r.timestamp = &timestamp
	return r
}

func (r V2APISubaccountGetSubAccountFuturesAccountV2Request) RecvWindow(recvWindow int64) V2APISubaccountGetSubAccountFuturesAccountV2Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V2APISubaccountGetSubAccountFuturesAccountV2Request) Execute() (*SubaccountGetSubAccountFuturesAccountV2Resp, *http.Response, error) {
	return r.ApiService.SubaccountGetSubAccountFuturesAccountV2Execute(r)
}

/*
SubaccountGetSubAccountFuturesAccountV2 Get Detail on Sub-account's Futures Account V2(For Master Account)

Get Detail on Sub-account's Futures Account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V2APISubaccountGetSubAccountFuturesAccountV2Request
*/
func (a *V2APIService) SubaccountGetSubAccountFuturesAccountV2(ctx context.Context) V2APISubaccountGetSubAccountFuturesAccountV2Request {
	return V2APISubaccountGetSubAccountFuturesAccountV2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SubaccountGetSubAccountFuturesAccountV2Resp
func (a *V2APIService) SubaccountGetSubAccountFuturesAccountV2Execute(r V2APISubaccountGetSubAccountFuturesAccountV2Request) (*SubaccountGetSubAccountFuturesAccountV2Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubaccountGetSubAccountFuturesAccountV2Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V2APIService.SubaccountGetSubAccountFuturesAccountV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v2/sub-account/futures/account"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.email == nil {
		return localVarReturnValue, nil, reportError("email is required and must be specified")
	}
	if r.futuresType == nil {
		return localVarReturnValue, nil, reportError("futuresType is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "email", r.email, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "futuresType", r.futuresType, "form", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type V2APISubaccountGetSubAccountFuturesPositionRiskV2Request struct {
	ctx context.Context
	ApiService *V2APIService
	email *string
	futuresType *int32
	timestamp *int64
	recvWindow *int64
}

// &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Get-Futures-Position-Risk-of-Sub-account-V2#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
func (r V2APISubaccountGetSubAccountFuturesPositionRiskV2Request) Email(email string) V2APISubaccountGetSubAccountFuturesPositionRiskV2Request {
	r.email = &email
	return r
}

// 1:USDT Margined Futures, 2:COIN Margined Futures
func (r V2APISubaccountGetSubAccountFuturesPositionRiskV2Request) FuturesType(futuresType int32) V2APISubaccountGetSubAccountFuturesPositionRiskV2Request {
	r.futuresType = &futuresType
	return r
}

func (r V2APISubaccountGetSubAccountFuturesPositionRiskV2Request) Timestamp(timestamp int64) V2APISubaccountGetSubAccountFuturesPositionRiskV2Request {
	r.timestamp = &timestamp
	return r
}

func (r V2APISubaccountGetSubAccountFuturesPositionRiskV2Request) RecvWindow(recvWindow int64) V2APISubaccountGetSubAccountFuturesPositionRiskV2Request {
	r.recvWindow = &recvWindow
	return r
}

func (r V2APISubaccountGetSubAccountFuturesPositionRiskV2Request) Execute() (*SubaccountGetSubAccountFuturesPositionRiskV2Resp, *http.Response, error) {
	return r.ApiService.SubaccountGetSubAccountFuturesPositionRiskV2Execute(r)
}

/*
SubaccountGetSubAccountFuturesPositionRiskV2 Get Futures Position-Risk of Sub-account V2(For Master Account)

Get Futures Position-Risk of Sub-account V2

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return V2APISubaccountGetSubAccountFuturesPositionRiskV2Request
*/
func (a *V2APIService) SubaccountGetSubAccountFuturesPositionRiskV2(ctx context.Context) V2APISubaccountGetSubAccountFuturesPositionRiskV2Request {
	return V2APISubaccountGetSubAccountFuturesPositionRiskV2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SubaccountGetSubAccountFuturesPositionRiskV2Resp
func (a *V2APIService) SubaccountGetSubAccountFuturesPositionRiskV2Execute(r V2APISubaccountGetSubAccountFuturesPositionRiskV2Request) (*SubaccountGetSubAccountFuturesPositionRiskV2Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubaccountGetSubAccountFuturesPositionRiskV2Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V2APIService.SubaccountGetSubAccountFuturesPositionRiskV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v2/sub-account/futures/positionRisk"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.email == nil {
		return localVarReturnValue, nil, reportError("email is required and must be specified")
	}
	if r.futuresType == nil {
		return localVarReturnValue, nil, reportError("futuresType is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "email", r.email, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "futuresType", r.futuresType, "form", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
Binance Sub Account API

Testing ManagedSubAccountAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package subaccount

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/openxapi/binance-go/subaccount"
)

func Test_subaccount_ManagedSubAccountAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ManagedSubAccountAPIService SubaccountCreateManagedSubaccountDepositV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedSubAccountAPI.SubaccountCreateManagedSubaccountDepositV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedSubAccountAPIService SubaccountCreateManagedSubaccountWithdrawV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedSubAccountAPI.SubaccountCreateManagedSubaccountWithdrawV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedSubAccountAPIService SubaccountGetManagedSubaccountAccountSnapshotV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedSubAccountAPI.SubaccountGetManagedSubaccountAccountSnapshotV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedSubAccountAPIService SubaccountGetManagedSubaccountAssetV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedSubAccountAPI.SubaccountGetManagedSubaccountAssetV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedSubAccountAPIService SubaccountGetManagedSubaccountDepositAddressV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedSubAccountAPI.SubaccountGetManagedSubaccountDepositAddressV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedSubAccountAPIService SubaccountGetManagedSubaccountFetchFutureAssetV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedSubAccountAPI.SubaccountGetManagedSubaccountFetchFutureAssetV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedSubAccountAPIService SubaccountGetManagedSubaccountInfoV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedSubAccountAPI.SubaccountGetManagedSubaccountInfoV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedSubAccountAPIService SubaccountGetManagedSubaccountMarginAssetV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedSubAccountAPI.SubaccountGetManagedSubaccountMarginAssetV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedSubAccountAPIService SubaccountGetManagedSubaccountQueryTransLogForInvestorV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedSubAccountAPI.SubaccountGetManagedSubaccountQueryTransLogForInvestorV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedSubAccountAPIService SubaccountGetManagedSubaccountQueryTransLogForTradeParentV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedSubAccountAPI.SubaccountGetManagedSubaccountQueryTransLogForTradeParentV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedSubAccountAPIService SubaccountGetManagedSubaccountQueryTransLogV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedSubAccountAPI.SubaccountGetManagedSubaccountQueryTransLogV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

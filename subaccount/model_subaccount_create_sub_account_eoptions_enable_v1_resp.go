/*
Binance Sub Account API

OpenAPI specification for Binance exchange - Subaccount API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package subaccount

import (
	"encoding/json"
)

// checks if the SubaccountCreateSubAccountEoptionsEnableV1Resp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubaccountCreateSubAccountEoptionsEnableV1Resp{}

// SubaccountCreateSubAccountEoptionsEnableV1Resp struct for SubaccountCreateSubAccountEoptionsEnableV1Resp
type SubaccountCreateSubAccountEoptionsEnableV1Resp struct {
	Email *string `json:"email,omitempty"`
	IsEOptionsEnabled *bool `json:"isEOptionsEnabled,omitempty"`
}

// NewSubaccountCreateSubAccountEoptionsEnableV1Resp instantiates a new SubaccountCreateSubAccountEoptionsEnableV1Resp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubaccountCreateSubAccountEoptionsEnableV1Resp() *SubaccountCreateSubAccountEoptionsEnableV1Resp {
	this := SubaccountCreateSubAccountEoptionsEnableV1Resp{}
	return &this
}

// NewSubaccountCreateSubAccountEoptionsEnableV1RespWithDefaults instantiates a new SubaccountCreateSubAccountEoptionsEnableV1Resp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubaccountCreateSubAccountEoptionsEnableV1RespWithDefaults() *SubaccountCreateSubAccountEoptionsEnableV1Resp {
	this := SubaccountCreateSubAccountEoptionsEnableV1Resp{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *SubaccountCreateSubAccountEoptionsEnableV1Resp) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubaccountCreateSubAccountEoptionsEnableV1Resp) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *SubaccountCreateSubAccountEoptionsEnableV1Resp) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *SubaccountCreateSubAccountEoptionsEnableV1Resp) SetEmail(v string) {
	o.Email = &v
}

// GetIsEOptionsEnabled returns the IsEOptionsEnabled field value if set, zero value otherwise.
func (o *SubaccountCreateSubAccountEoptionsEnableV1Resp) GetIsEOptionsEnabled() bool {
	if o == nil || IsNil(o.IsEOptionsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEOptionsEnabled
}

// GetIsEOptionsEnabledOk returns a tuple with the IsEOptionsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubaccountCreateSubAccountEoptionsEnableV1Resp) GetIsEOptionsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEOptionsEnabled) {
		return nil, false
	}
	return o.IsEOptionsEnabled, true
}

// HasIsEOptionsEnabled returns a boolean if a field has been set.
func (o *SubaccountCreateSubAccountEoptionsEnableV1Resp) HasIsEOptionsEnabled() bool {
	if o != nil && !IsNil(o.IsEOptionsEnabled) {
		return true
	}

	return false
}

// SetIsEOptionsEnabled gets a reference to the given bool and assigns it to the IsEOptionsEnabled field.
func (o *SubaccountCreateSubAccountEoptionsEnableV1Resp) SetIsEOptionsEnabled(v bool) {
	o.IsEOptionsEnabled = &v
}

func (o SubaccountCreateSubAccountEoptionsEnableV1Resp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubaccountCreateSubAccountEoptionsEnableV1Resp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.IsEOptionsEnabled) {
		toSerialize["isEOptionsEnabled"] = o.IsEOptionsEnabled
	}
	return toSerialize, nil
}

type NullableSubaccountCreateSubAccountEoptionsEnableV1Resp struct {
	value *SubaccountCreateSubAccountEoptionsEnableV1Resp
	isSet bool
}

func (v NullableSubaccountCreateSubAccountEoptionsEnableV1Resp) Get() *SubaccountCreateSubAccountEoptionsEnableV1Resp {
	return v.value
}

func (v *NullableSubaccountCreateSubAccountEoptionsEnableV1Resp) Set(val *SubaccountCreateSubAccountEoptionsEnableV1Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableSubaccountCreateSubAccountEoptionsEnableV1Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableSubaccountCreateSubAccountEoptionsEnableV1Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubaccountCreateSubAccountEoptionsEnableV1Resp(val *SubaccountCreateSubAccountEoptionsEnableV1Resp) *NullableSubaccountCreateSubAccountEoptionsEnableV1Resp {
	return &NullableSubaccountCreateSubAccountEoptionsEnableV1Resp{value: val, isSet: true}
}

func (v NullableSubaccountCreateSubAccountEoptionsEnableV1Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubaccountCreateSubAccountEoptionsEnableV1Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Binance Sub Account API

OpenAPI specification for Binance exchange - Subaccount API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package subaccount

import (
	"encoding/json"
)

// checks if the SubaccountGetSubAccountListV1Resp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubaccountGetSubAccountListV1Resp{}

// SubaccountGetSubAccountListV1Resp struct for SubaccountGetSubAccountListV1Resp
type SubaccountGetSubAccountListV1Resp struct {
	SubAccounts []SubaccountGetSubAccountListV1RespSubAccountsInner `json:"subAccounts,omitempty"`
}

// NewSubaccountGetSubAccountListV1Resp instantiates a new SubaccountGetSubAccountListV1Resp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubaccountGetSubAccountListV1Resp() *SubaccountGetSubAccountListV1Resp {
	this := SubaccountGetSubAccountListV1Resp{}
	return &this
}

// NewSubaccountGetSubAccountListV1RespWithDefaults instantiates a new SubaccountGetSubAccountListV1Resp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubaccountGetSubAccountListV1RespWithDefaults() *SubaccountGetSubAccountListV1Resp {
	this := SubaccountGetSubAccountListV1Resp{}
	return &this
}

// GetSubAccounts returns the SubAccounts field value if set, zero value otherwise.
func (o *SubaccountGetSubAccountListV1Resp) GetSubAccounts() []SubaccountGetSubAccountListV1RespSubAccountsInner {
	if o == nil || IsNil(o.SubAccounts) {
		var ret []SubaccountGetSubAccountListV1RespSubAccountsInner
		return ret
	}
	return o.SubAccounts
}

// GetSubAccountsOk returns a tuple with the SubAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubaccountGetSubAccountListV1Resp) GetSubAccountsOk() ([]SubaccountGetSubAccountListV1RespSubAccountsInner, bool) {
	if o == nil || IsNil(o.SubAccounts) {
		return nil, false
	}
	return o.SubAccounts, true
}

// HasSubAccounts returns a boolean if a field has been set.
func (o *SubaccountGetSubAccountListV1Resp) HasSubAccounts() bool {
	if o != nil && !IsNil(o.SubAccounts) {
		return true
	}

	return false
}

// SetSubAccounts gets a reference to the given []SubaccountGetSubAccountListV1RespSubAccountsInner and assigns it to the SubAccounts field.
func (o *SubaccountGetSubAccountListV1Resp) SetSubAccounts(v []SubaccountGetSubAccountListV1RespSubAccountsInner) {
	o.SubAccounts = v
}

func (o SubaccountGetSubAccountListV1Resp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubaccountGetSubAccountListV1Resp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SubAccounts) {
		toSerialize["subAccounts"] = o.SubAccounts
	}
	return toSerialize, nil
}

type NullableSubaccountGetSubAccountListV1Resp struct {
	value *SubaccountGetSubAccountListV1Resp
	isSet bool
}

func (v NullableSubaccountGetSubAccountListV1Resp) Get() *SubaccountGetSubAccountListV1Resp {
	return v.value
}

func (v *NullableSubaccountGetSubAccountListV1Resp) Set(val *SubaccountGetSubAccountListV1Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableSubaccountGetSubAccountListV1Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableSubaccountGetSubAccountListV1Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubaccountGetSubAccountListV1Resp(val *SubaccountGetSubAccountListV1Resp) *NullableSubaccountGetSubAccountListV1Resp {
	return &NullableSubaccountGetSubAccountListV1Resp{value: val, isSet: true}
}

func (v NullableSubaccountGetSubAccountListV1Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubaccountGetSubAccountListV1Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



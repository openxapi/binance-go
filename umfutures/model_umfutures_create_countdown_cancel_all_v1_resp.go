/*
Binance USD-M Futures API

OpenAPI specification for Binance exchange - Umfutures API

API version: 0.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package umfutures

import (
	"encoding/json"
)

// checks if the UmfuturesCreateCountdownCancelAllV1Resp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UmfuturesCreateCountdownCancelAllV1Resp{}

// UmfuturesCreateCountdownCancelAllV1Resp struct for UmfuturesCreateCountdownCancelAllV1Resp
type UmfuturesCreateCountdownCancelAllV1Resp struct {
	CountdownTime *string `json:"countdownTime,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
}

// NewUmfuturesCreateCountdownCancelAllV1Resp instantiates a new UmfuturesCreateCountdownCancelAllV1Resp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUmfuturesCreateCountdownCancelAllV1Resp() *UmfuturesCreateCountdownCancelAllV1Resp {
	this := UmfuturesCreateCountdownCancelAllV1Resp{}
	return &this
}

// NewUmfuturesCreateCountdownCancelAllV1RespWithDefaults instantiates a new UmfuturesCreateCountdownCancelAllV1Resp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUmfuturesCreateCountdownCancelAllV1RespWithDefaults() *UmfuturesCreateCountdownCancelAllV1Resp {
	this := UmfuturesCreateCountdownCancelAllV1Resp{}
	return &this
}

// GetCountdownTime returns the CountdownTime field value if set, zero value otherwise.
func (o *UmfuturesCreateCountdownCancelAllV1Resp) GetCountdownTime() string {
	if o == nil || IsNil(o.CountdownTime) {
		var ret string
		return ret
	}
	return *o.CountdownTime
}

// GetCountdownTimeOk returns a tuple with the CountdownTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesCreateCountdownCancelAllV1Resp) GetCountdownTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CountdownTime) {
		return nil, false
	}
	return o.CountdownTime, true
}

// HasCountdownTime returns a boolean if a field has been set.
func (o *UmfuturesCreateCountdownCancelAllV1Resp) HasCountdownTime() bool {
	if o != nil && !IsNil(o.CountdownTime) {
		return true
	}

	return false
}

// SetCountdownTime gets a reference to the given string and assigns it to the CountdownTime field.
func (o *UmfuturesCreateCountdownCancelAllV1Resp) SetCountdownTime(v string) {
	o.CountdownTime = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *UmfuturesCreateCountdownCancelAllV1Resp) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UmfuturesCreateCountdownCancelAllV1Resp) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *UmfuturesCreateCountdownCancelAllV1Resp) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *UmfuturesCreateCountdownCancelAllV1Resp) SetSymbol(v string) {
	o.Symbol = &v
}

func (o UmfuturesCreateCountdownCancelAllV1Resp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UmfuturesCreateCountdownCancelAllV1Resp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CountdownTime) {
		toSerialize["countdownTime"] = o.CountdownTime
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	return toSerialize, nil
}

type NullableUmfuturesCreateCountdownCancelAllV1Resp struct {
	value *UmfuturesCreateCountdownCancelAllV1Resp
	isSet bool
}

func (v NullableUmfuturesCreateCountdownCancelAllV1Resp) Get() *UmfuturesCreateCountdownCancelAllV1Resp {
	return v.value
}

func (v *NullableUmfuturesCreateCountdownCancelAllV1Resp) Set(val *UmfuturesCreateCountdownCancelAllV1Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableUmfuturesCreateCountdownCancelAllV1Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableUmfuturesCreateCountdownCancelAllV1Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUmfuturesCreateCountdownCancelAllV1Resp(val *UmfuturesCreateCountdownCancelAllV1Resp) *NullableUmfuturesCreateCountdownCancelAllV1Resp {
	return &NullableUmfuturesCreateCountdownCancelAllV1Resp{value: val, isSet: true}
}

func (v NullableUmfuturesCreateCountdownCancelAllV1Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUmfuturesCreateCountdownCancelAllV1Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Binance USD-M Futures API

OpenAPI specification for Binance exchange - Umfutures API

API version: 0.2.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package umfutures

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// BinanceLinkAPIService BinanceLinkAPI service
type BinanceLinkAPIService service

type ApiCreateApiReferralCustomizationV1Request struct {
	ctx context.Context
	ApiService *BinanceLinkAPIService
	customerId *string
	email *string
	timestamp *int64
	recvWindow *int64
}

func (r ApiCreateApiReferralCustomizationV1Request) CustomerId(customerId string) ApiCreateApiReferralCustomizationV1Request {
	r.customerId = &customerId
	return r
}

func (r ApiCreateApiReferralCustomizationV1Request) Email(email string) ApiCreateApiReferralCustomizationV1Request {
	r.email = &email
	return r
}

func (r ApiCreateApiReferralCustomizationV1Request) Timestamp(timestamp int64) ApiCreateApiReferralCustomizationV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiCreateApiReferralCustomizationV1Request) RecvWindow(recvWindow int64) ApiCreateApiReferralCustomizationV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiCreateApiReferralCustomizationV1Request) Execute() (*CreateApiReferralCustomizationV1Resp, *http.Response, error) {
	return r.ApiService.CreateApiReferralCustomizationV1Execute(r)
}

/*
CreateApiReferralCustomizationV1 Customize Id For Client (USER DATA)(For Partner)

- CustomerId must be unique

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateApiReferralCustomizationV1Request
*/
func (a *BinanceLinkAPIService) CreateApiReferralCustomizationV1(ctx context.Context) ApiCreateApiReferralCustomizationV1Request {
	return ApiCreateApiReferralCustomizationV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateApiReferralCustomizationV1Resp
func (a *BinanceLinkAPIService) CreateApiReferralCustomizationV1Execute(r ApiCreateApiReferralCustomizationV1Request) (*CreateApiReferralCustomizationV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateApiReferralCustomizationV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BinanceLinkAPIService.CreateApiReferralCustomizationV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fapi/v1/apiReferral/customization"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customerId == nil {
		return localVarReturnValue, nil, reportError("customerId is required and must be specified")
	}
	if r.email == nil {
		return localVarReturnValue, nil, reportError("email is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "customerId", r.customerId, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "email", r.email, "", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateApiReferralUserCustomizationPAPIV1Request struct {
	ctx context.Context
	ApiService *BinanceLinkAPIService
	brokerId *string
	customerId *string
	timestamp *int64
	recvWindow *int64
}

func (r ApiCreateApiReferralUserCustomizationPAPIV1Request) BrokerId(brokerId string) ApiCreateApiReferralUserCustomizationPAPIV1Request {
	r.brokerId = &brokerId
	return r
}

func (r ApiCreateApiReferralUserCustomizationPAPIV1Request) CustomerId(customerId string) ApiCreateApiReferralUserCustomizationPAPIV1Request {
	r.customerId = &customerId
	return r
}

func (r ApiCreateApiReferralUserCustomizationPAPIV1Request) Timestamp(timestamp int64) ApiCreateApiReferralUserCustomizationPAPIV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiCreateApiReferralUserCustomizationPAPIV1Request) RecvWindow(recvWindow int64) ApiCreateApiReferralUserCustomizationPAPIV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiCreateApiReferralUserCustomizationPAPIV1Request) Execute() (*CreateApiReferralUserCustomizationV1Resp, *http.Response, error) {
	return r.ApiService.CreateApiReferralUserCustomizationPAPIV1Execute(r)
}

/*
CreateApiReferralUserCustomizationPAPIV1 Customize Id For Client  (USER DATA)(For client)(PAPI)

- CustomerId must be unique

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateApiReferralUserCustomizationPAPIV1Request
*/
func (a *BinanceLinkAPIService) CreateApiReferralUserCustomizationPAPIV1(ctx context.Context) ApiCreateApiReferralUserCustomizationPAPIV1Request {
	return ApiCreateApiReferralUserCustomizationPAPIV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateApiReferralUserCustomizationV1Resp
func (a *BinanceLinkAPIService) CreateApiReferralUserCustomizationPAPIV1Execute(r ApiCreateApiReferralUserCustomizationPAPIV1Request) (*CreateApiReferralUserCustomizationV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateApiReferralUserCustomizationV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BinanceLinkAPIService.CreateApiReferralUserCustomizationPAPIV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/papi/v1/apiReferral/userCustomization"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.brokerId == nil {
		return localVarReturnValue, nil, reportError("brokerId is required and must be specified")
	}
	if r.customerId == nil {
		return localVarReturnValue, nil, reportError("customerId is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "brokerId", r.brokerId, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "customerId", r.customerId, "", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateApiReferralUserCustomizationV1Request struct {
	ctx context.Context
	ApiService *BinanceLinkAPIService
	brokerId *string
	customerId *string
	timestamp *int64
	recvWindow *int64
}

func (r ApiCreateApiReferralUserCustomizationV1Request) BrokerId(brokerId string) ApiCreateApiReferralUserCustomizationV1Request {
	r.brokerId = &brokerId
	return r
}

func (r ApiCreateApiReferralUserCustomizationV1Request) CustomerId(customerId string) ApiCreateApiReferralUserCustomizationV1Request {
	r.customerId = &customerId
	return r
}

func (r ApiCreateApiReferralUserCustomizationV1Request) Timestamp(timestamp int64) ApiCreateApiReferralUserCustomizationV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiCreateApiReferralUserCustomizationV1Request) RecvWindow(recvWindow int64) ApiCreateApiReferralUserCustomizationV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiCreateApiReferralUserCustomizationV1Request) Execute() (*CreateApiReferralUserCustomizationV1Resp, *http.Response, error) {
	return r.ApiService.CreateApiReferralUserCustomizationV1Execute(r)
}

/*
CreateApiReferralUserCustomizationV1 Customize Id For Client  (USER DATA)(For client)

- CustomerId must be unique
- If the user enabled Portfolio Margin, please user relevant /papi endpoint

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateApiReferralUserCustomizationV1Request
*/
func (a *BinanceLinkAPIService) CreateApiReferralUserCustomizationV1(ctx context.Context) ApiCreateApiReferralUserCustomizationV1Request {
	return ApiCreateApiReferralUserCustomizationV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateApiReferralUserCustomizationV1Resp
func (a *BinanceLinkAPIService) CreateApiReferralUserCustomizationV1Execute(r ApiCreateApiReferralUserCustomizationV1Request) (*CreateApiReferralUserCustomizationV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateApiReferralUserCustomizationV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BinanceLinkAPIService.CreateApiReferralUserCustomizationV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fapi/v1/apiReferral/userCustomization"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.brokerId == nil {
		return localVarReturnValue, nil, reportError("brokerId is required and must be specified")
	}
	if r.customerId == nil {
		return localVarReturnValue, nil, reportError("customerId is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "brokerId", r.brokerId, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "customerId", r.customerId, "", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetApiReferralCustomizationV1Request struct {
	ctx context.Context
	ApiService *BinanceLinkAPIService
	timestamp *int64
	customerId *string
	email *string
	page *int64
	limit *int64
	recvWindow *int64
}

func (r ApiGetApiReferralCustomizationV1Request) Timestamp(timestamp int64) ApiGetApiReferralCustomizationV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetApiReferralCustomizationV1Request) CustomerId(customerId string) ApiGetApiReferralCustomizationV1Request {
	r.customerId = &customerId
	return r
}

func (r ApiGetApiReferralCustomizationV1Request) Email(email string) ApiGetApiReferralCustomizationV1Request {
	r.email = &email
	return r
}

// default 1
func (r ApiGetApiReferralCustomizationV1Request) Page(page int64) ApiGetApiReferralCustomizationV1Request {
	r.page = &page
	return r
}

// items num of one page，default 100，max 1000
func (r ApiGetApiReferralCustomizationV1Request) Limit(limit int64) ApiGetApiReferralCustomizationV1Request {
	r.limit = &limit
	return r
}

func (r ApiGetApiReferralCustomizationV1Request) RecvWindow(recvWindow int64) ApiGetApiReferralCustomizationV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetApiReferralCustomizationV1Request) Execute() ([]GetApiReferralCustomizationV1RespItem, *http.Response, error) {
	return r.ApiService.GetApiReferralCustomizationV1Execute(r)
}

/*
GetApiReferralCustomizationV1 Get Client Email Customized Id (USER DATA)

- CustomerId and email can not be sent at the same time

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetApiReferralCustomizationV1Request
*/
func (a *BinanceLinkAPIService) GetApiReferralCustomizationV1(ctx context.Context) ApiGetApiReferralCustomizationV1Request {
	return ApiGetApiReferralCustomizationV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []GetApiReferralCustomizationV1RespItem
func (a *BinanceLinkAPIService) GetApiReferralCustomizationV1Execute(r ApiGetApiReferralCustomizationV1Request) ([]GetApiReferralCustomizationV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetApiReferralCustomizationV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BinanceLinkAPIService.GetApiReferralCustomizationV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fapi/v1/apiReferral/customization"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.customerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customerId", r.customerId, "form", "")
	} else {
		var defaultValue string = ""
		r.customerId = &defaultValue
	}
	if r.email != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "email", r.email, "form", "")
	} else {
		var defaultValue string = ""
		r.email = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue int64 = 1
		r.page = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int64 = 100
		r.limit = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetApiReferralIfNewUserPAPIV1Request struct {
	ctx context.Context
	ApiService *BinanceLinkAPIService
	brokerId *string
	timestamp *int64
	type_ *int32
	recvWindow *int64
}

func (r ApiGetApiReferralIfNewUserPAPIV1Request) BrokerId(brokerId string) ApiGetApiReferralIfNewUserPAPIV1Request {
	r.brokerId = &brokerId
	return r
}

func (r ApiGetApiReferralIfNewUserPAPIV1Request) Timestamp(timestamp int64) ApiGetApiReferralIfNewUserPAPIV1Request {
	r.timestamp = &timestamp
	return r
}

// 1:USDT-margined Futures,  2: Coin-margined Futures ; Default：1:USDT-margined Futures
func (r ApiGetApiReferralIfNewUserPAPIV1Request) Type_(type_ int32) ApiGetApiReferralIfNewUserPAPIV1Request {
	r.type_ = &type_
	return r
}

func (r ApiGetApiReferralIfNewUserPAPIV1Request) RecvWindow(recvWindow int64) ApiGetApiReferralIfNewUserPAPIV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetApiReferralIfNewUserPAPIV1Request) Execute() (*GetApiReferralIfNewUserV1Resp, *http.Response, error) {
	return r.ApiService.GetApiReferralIfNewUserPAPIV1Execute(r)
}

/*
GetApiReferralIfNewUserPAPIV1 Query Client If The New User (USER DATA)(PAPI)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetApiReferralIfNewUserPAPIV1Request
*/
func (a *BinanceLinkAPIService) GetApiReferralIfNewUserPAPIV1(ctx context.Context) ApiGetApiReferralIfNewUserPAPIV1Request {
	return ApiGetApiReferralIfNewUserPAPIV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetApiReferralIfNewUserV1Resp
func (a *BinanceLinkAPIService) GetApiReferralIfNewUserPAPIV1Execute(r ApiGetApiReferralIfNewUserPAPIV1Request) (*GetApiReferralIfNewUserV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetApiReferralIfNewUserV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BinanceLinkAPIService.GetApiReferralIfNewUserPAPIV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/papi/v1/apiReferral/ifNewUser"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.brokerId == nil {
		return localVarReturnValue, nil, reportError("brokerId is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "brokerId", r.brokerId, "form", "")
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetApiReferralIfNewUserV1Request struct {
	ctx context.Context
	ApiService *BinanceLinkAPIService
	brokerId *string
	timestamp *int64
	type_ *int32
	recvWindow *int64
}

func (r ApiGetApiReferralIfNewUserV1Request) BrokerId(brokerId string) ApiGetApiReferralIfNewUserV1Request {
	r.brokerId = &brokerId
	return r
}

func (r ApiGetApiReferralIfNewUserV1Request) Timestamp(timestamp int64) ApiGetApiReferralIfNewUserV1Request {
	r.timestamp = &timestamp
	return r
}

// 1:USDT-margined Futures，2: Coin-margined Futures; Default：1:USDT-margined Futures
func (r ApiGetApiReferralIfNewUserV1Request) Type_(type_ int32) ApiGetApiReferralIfNewUserV1Request {
	r.type_ = &type_
	return r
}

func (r ApiGetApiReferralIfNewUserV1Request) RecvWindow(recvWindow int64) ApiGetApiReferralIfNewUserV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetApiReferralIfNewUserV1Request) Execute() (*GetApiReferralIfNewUserV1Resp, *http.Response, error) {
	return r.ApiService.GetApiReferralIfNewUserV1Execute(r)
}

/*
GetApiReferralIfNewUserV1 Query Client If The New User (USER DATA)

- If the user enabled Portfolio Margin, please user relevant /papi endpoint

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetApiReferralIfNewUserV1Request
*/
func (a *BinanceLinkAPIService) GetApiReferralIfNewUserV1(ctx context.Context) ApiGetApiReferralIfNewUserV1Request {
	return ApiGetApiReferralIfNewUserV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetApiReferralIfNewUserV1Resp
func (a *BinanceLinkAPIService) GetApiReferralIfNewUserV1Execute(r ApiGetApiReferralIfNewUserV1Request) (*GetApiReferralIfNewUserV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetApiReferralIfNewUserV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BinanceLinkAPIService.GetApiReferralIfNewUserV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fapi/v1/apiReferral/ifNewUser"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.brokerId == nil {
		return localVarReturnValue, nil, reportError("brokerId is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "brokerId", r.brokerId, "form", "")
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetApiReferralOverviewV1Request struct {
	ctx context.Context
	ApiService *BinanceLinkAPIService
	timestamp *int64
	type_ *int32
	recvWindow *int64
}

func (r ApiGetApiReferralOverviewV1Request) Timestamp(timestamp int64) ApiGetApiReferralOverviewV1Request {
	r.timestamp = &timestamp
	return r
}

// 1:USDT Margined Futures, 2:COIN Margined Futures Default： USDT Margined Futures
func (r ApiGetApiReferralOverviewV1Request) Type_(type_ int32) ApiGetApiReferralOverviewV1Request {
	r.type_ = &type_
	return r
}

func (r ApiGetApiReferralOverviewV1Request) RecvWindow(recvWindow int64) ApiGetApiReferralOverviewV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetApiReferralOverviewV1Request) Execute() (*GetApiReferralOverviewV1Resp, *http.Response, error) {
	return r.ApiService.GetApiReferralOverviewV1Execute(r)
}

/*
GetApiReferralOverviewV1 Get Rebate Data Overview (USER DATA)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetApiReferralOverviewV1Request
*/
func (a *BinanceLinkAPIService) GetApiReferralOverviewV1(ctx context.Context) ApiGetApiReferralOverviewV1Request {
	return ApiGetApiReferralOverviewV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetApiReferralOverviewV1Resp
func (a *BinanceLinkAPIService) GetApiReferralOverviewV1Execute(r ApiGetApiReferralOverviewV1Request) (*GetApiReferralOverviewV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetApiReferralOverviewV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BinanceLinkAPIService.GetApiReferralOverviewV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fapi/v1/apiReferral/overview"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetApiReferralRebateVolV1Request struct {
	ctx context.Context
	ApiService *BinanceLinkAPIService
	timestamp *int64
	type_ *int32
	startTime *int64
	endTime *int64
	limit *int32
	recvWindow *int64
}

func (r ApiGetApiReferralRebateVolV1Request) Timestamp(timestamp int64) ApiGetApiReferralRebateVolV1Request {
	r.timestamp = &timestamp
	return r
}

// 1:USDT Margined Futures, 2:COIN Margined Futures Default： USDT Margined Futures
func (r ApiGetApiReferralRebateVolV1Request) Type_(type_ int32) ApiGetApiReferralRebateVolV1Request {
	r.type_ = &type_
	return r
}

func (r ApiGetApiReferralRebateVolV1Request) StartTime(startTime int64) ApiGetApiReferralRebateVolV1Request {
	r.startTime = &startTime
	return r
}

func (r ApiGetApiReferralRebateVolV1Request) EndTime(endTime int64) ApiGetApiReferralRebateVolV1Request {
	r.endTime = &endTime
	return r
}

// default 500, max 1000
func (r ApiGetApiReferralRebateVolV1Request) Limit(limit int32) ApiGetApiReferralRebateVolV1Request {
	r.limit = &limit
	return r
}

func (r ApiGetApiReferralRebateVolV1Request) RecvWindow(recvWindow int64) ApiGetApiReferralRebateVolV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetApiReferralRebateVolV1Request) Execute() ([]GetApiReferralRebateVolV1RespItem, *http.Response, error) {
	return r.ApiService.GetApiReferralRebateVolV1Execute(r)
}

/*
GetApiReferralRebateVolV1 Get Rebate Volume (USER DATA)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetApiReferralRebateVolV1Request
*/
func (a *BinanceLinkAPIService) GetApiReferralRebateVolV1(ctx context.Context) ApiGetApiReferralRebateVolV1Request {
	return ApiGetApiReferralRebateVolV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []GetApiReferralRebateVolV1RespItem
func (a *BinanceLinkAPIService) GetApiReferralRebateVolV1Execute(r ApiGetApiReferralRebateVolV1Request) ([]GetApiReferralRebateVolV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetApiReferralRebateVolV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BinanceLinkAPIService.GetApiReferralRebateVolV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fapi/v1/apiReferral/rebateVol"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetApiReferralTradeVolV1Request struct {
	ctx context.Context
	ApiService *BinanceLinkAPIService
	timestamp *int64
	type_ *int32
	startTime *int64
	endTime *int64
	limit *int32
	recvWindow *int64
}

func (r ApiGetApiReferralTradeVolV1Request) Timestamp(timestamp int64) ApiGetApiReferralTradeVolV1Request {
	r.timestamp = &timestamp
	return r
}

// 1:USDT Margined Futures, 2:COIN Margined Futures Default： USDT Margined Futures
func (r ApiGetApiReferralTradeVolV1Request) Type_(type_ int32) ApiGetApiReferralTradeVolV1Request {
	r.type_ = &type_
	return r
}

func (r ApiGetApiReferralTradeVolV1Request) StartTime(startTime int64) ApiGetApiReferralTradeVolV1Request {
	r.startTime = &startTime
	return r
}

func (r ApiGetApiReferralTradeVolV1Request) EndTime(endTime int64) ApiGetApiReferralTradeVolV1Request {
	r.endTime = &endTime
	return r
}

// default 500, max 1000
func (r ApiGetApiReferralTradeVolV1Request) Limit(limit int32) ApiGetApiReferralTradeVolV1Request {
	r.limit = &limit
	return r
}

func (r ApiGetApiReferralTradeVolV1Request) RecvWindow(recvWindow int64) ApiGetApiReferralTradeVolV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetApiReferralTradeVolV1Request) Execute() ([]GetApiReferralTradeVolV1RespItem, *http.Response, error) {
	return r.ApiService.GetApiReferralTradeVolV1Execute(r)
}

/*
GetApiReferralTradeVolV1 Get User Trade Volume (USER DATA)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetApiReferralTradeVolV1Request
*/
func (a *BinanceLinkAPIService) GetApiReferralTradeVolV1(ctx context.Context) ApiGetApiReferralTradeVolV1Request {
	return ApiGetApiReferralTradeVolV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []GetApiReferralTradeVolV1RespItem
func (a *BinanceLinkAPIService) GetApiReferralTradeVolV1Execute(r ApiGetApiReferralTradeVolV1Request) ([]GetApiReferralTradeVolV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetApiReferralTradeVolV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BinanceLinkAPIService.GetApiReferralTradeVolV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fapi/v1/apiReferral/tradeVol"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetApiReferralTraderNumV1Request struct {
	ctx context.Context
	ApiService *BinanceLinkAPIService
	timestamp *int64
	type_ *int32
	startTime *int64
	endTime *int64
	limit *int32
	recvWindow *int64
}

func (r ApiGetApiReferralTraderNumV1Request) Timestamp(timestamp int64) ApiGetApiReferralTraderNumV1Request {
	r.timestamp = &timestamp
	return r
}

// 1:USDT Margined Futures, 2:COIN Margined Futures Default： USDT Margined Futures
func (r ApiGetApiReferralTraderNumV1Request) Type_(type_ int32) ApiGetApiReferralTraderNumV1Request {
	r.type_ = &type_
	return r
}

func (r ApiGetApiReferralTraderNumV1Request) StartTime(startTime int64) ApiGetApiReferralTraderNumV1Request {
	r.startTime = &startTime
	return r
}

func (r ApiGetApiReferralTraderNumV1Request) EndTime(endTime int64) ApiGetApiReferralTraderNumV1Request {
	r.endTime = &endTime
	return r
}

// default 500, max 1000
func (r ApiGetApiReferralTraderNumV1Request) Limit(limit int32) ApiGetApiReferralTraderNumV1Request {
	r.limit = &limit
	return r
}

func (r ApiGetApiReferralTraderNumV1Request) RecvWindow(recvWindow int64) ApiGetApiReferralTraderNumV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetApiReferralTraderNumV1Request) Execute() ([]GetApiReferralTraderNumV1RespItem, *http.Response, error) {
	return r.ApiService.GetApiReferralTraderNumV1Execute(r)
}

/*
GetApiReferralTraderNumV1 Get Trader Number (USER DATA)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetApiReferralTraderNumV1Request
*/
func (a *BinanceLinkAPIService) GetApiReferralTraderNumV1(ctx context.Context) ApiGetApiReferralTraderNumV1Request {
	return ApiGetApiReferralTraderNumV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []GetApiReferralTraderNumV1RespItem
func (a *BinanceLinkAPIService) GetApiReferralTraderNumV1Execute(r ApiGetApiReferralTraderNumV1Request) ([]GetApiReferralTraderNumV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetApiReferralTraderNumV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BinanceLinkAPIService.GetApiReferralTraderNumV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fapi/v1/apiReferral/traderNum"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetApiReferralTraderSummaryV1Request struct {
	ctx context.Context
	ApiService *BinanceLinkAPIService
	timestamp *int64
	customerId *string
	type_ *int32
	startTime *int64
	endTime *int64
	limit *int32
	recvWindow *int64
}

func (r ApiGetApiReferralTraderSummaryV1Request) Timestamp(timestamp int64) ApiGetApiReferralTraderSummaryV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetApiReferralTraderSummaryV1Request) CustomerId(customerId string) ApiGetApiReferralTraderSummaryV1Request {
	r.customerId = &customerId
	return r
}

// 1:USDT Margined Futures, 2:COIN Margined Futures Default： USDT Margined Futures
func (r ApiGetApiReferralTraderSummaryV1Request) Type_(type_ int32) ApiGetApiReferralTraderSummaryV1Request {
	r.type_ = &type_
	return r
}

func (r ApiGetApiReferralTraderSummaryV1Request) StartTime(startTime int64) ApiGetApiReferralTraderSummaryV1Request {
	r.startTime = &startTime
	return r
}

func (r ApiGetApiReferralTraderSummaryV1Request) EndTime(endTime int64) ApiGetApiReferralTraderSummaryV1Request {
	r.endTime = &endTime
	return r
}

// default 500, max 1000
func (r ApiGetApiReferralTraderSummaryV1Request) Limit(limit int32) ApiGetApiReferralTraderSummaryV1Request {
	r.limit = &limit
	return r
}

func (r ApiGetApiReferralTraderSummaryV1Request) RecvWindow(recvWindow int64) ApiGetApiReferralTraderSummaryV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetApiReferralTraderSummaryV1Request) Execute() ([]GetApiReferralTraderSummaryV1RespItem, *http.Response, error) {
	return r.ApiService.GetApiReferralTraderSummaryV1Execute(r)
}

/*
GetApiReferralTraderSummaryV1 Get Trader Detail (USER DATA)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetApiReferralTraderSummaryV1Request
*/
func (a *BinanceLinkAPIService) GetApiReferralTraderSummaryV1(ctx context.Context) ApiGetApiReferralTraderSummaryV1Request {
	return ApiGetApiReferralTraderSummaryV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []GetApiReferralTraderSummaryV1RespItem
func (a *BinanceLinkAPIService) GetApiReferralTraderSummaryV1Execute(r ApiGetApiReferralTraderSummaryV1Request) ([]GetApiReferralTraderSummaryV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetApiReferralTraderSummaryV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BinanceLinkAPIService.GetApiReferralTraderSummaryV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fapi/v1/apiReferral/traderSummary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.customerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customerId", r.customerId, "form", "")
	} else {
		var defaultValue string = ""
		r.customerId = &defaultValue
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetApiReferralUserCustomizationPAPIV1Request struct {
	ctx context.Context
	ApiService *BinanceLinkAPIService
	brokerId *string
	timestamp *int64
	recvWindow *int64
}

func (r ApiGetApiReferralUserCustomizationPAPIV1Request) BrokerId(brokerId string) ApiGetApiReferralUserCustomizationPAPIV1Request {
	r.brokerId = &brokerId
	return r
}

func (r ApiGetApiReferralUserCustomizationPAPIV1Request) Timestamp(timestamp int64) ApiGetApiReferralUserCustomizationPAPIV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetApiReferralUserCustomizationPAPIV1Request) RecvWindow(recvWindow int64) ApiGetApiReferralUserCustomizationPAPIV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetApiReferralUserCustomizationPAPIV1Request) Execute() (*GetApiReferralUserCustomizationV1Resp, *http.Response, error) {
	return r.ApiService.GetApiReferralUserCustomizationPAPIV1Execute(r)
}

/*
GetApiReferralUserCustomizationPAPIV1 Get User’s Customize Id (USER DATA)(PAPI)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetApiReferralUserCustomizationPAPIV1Request
*/
func (a *BinanceLinkAPIService) GetApiReferralUserCustomizationPAPIV1(ctx context.Context) ApiGetApiReferralUserCustomizationPAPIV1Request {
	return ApiGetApiReferralUserCustomizationPAPIV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetApiReferralUserCustomizationV1Resp
func (a *BinanceLinkAPIService) GetApiReferralUserCustomizationPAPIV1Execute(r ApiGetApiReferralUserCustomizationPAPIV1Request) (*GetApiReferralUserCustomizationV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetApiReferralUserCustomizationV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BinanceLinkAPIService.GetApiReferralUserCustomizationPAPIV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/papi/v1/apiReferral/userCustomization"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.brokerId == nil {
		return localVarReturnValue, nil, reportError("brokerId is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "brokerId", r.brokerId, "form", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetApiReferralUserCustomizationV1Request struct {
	ctx context.Context
	ApiService *BinanceLinkAPIService
	brokerId *string
	timestamp *int64
	recvWindow *int64
}

func (r ApiGetApiReferralUserCustomizationV1Request) BrokerId(brokerId string) ApiGetApiReferralUserCustomizationV1Request {
	r.brokerId = &brokerId
	return r
}

func (r ApiGetApiReferralUserCustomizationV1Request) Timestamp(timestamp int64) ApiGetApiReferralUserCustomizationV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetApiReferralUserCustomizationV1Request) RecvWindow(recvWindow int64) ApiGetApiReferralUserCustomizationV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetApiReferralUserCustomizationV1Request) Execute() (*GetApiReferralUserCustomizationV1Resp, *http.Response, error) {
	return r.ApiService.GetApiReferralUserCustomizationV1Execute(r)
}

/*
GetApiReferralUserCustomizationV1 Get User’s Customize Id (USER DATA)

- CustomerId must be unique
- If the user enabled Portfolio Margin, please user relevant /papi endpoint

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetApiReferralUserCustomizationV1Request
*/
func (a *BinanceLinkAPIService) GetApiReferralUserCustomizationV1(ctx context.Context) ApiGetApiReferralUserCustomizationV1Request {
	return ApiGetApiReferralUserCustomizationV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetApiReferralUserCustomizationV1Resp
func (a *BinanceLinkAPIService) GetApiReferralUserCustomizationV1Execute(r ApiGetApiReferralUserCustomizationV1Request) (*GetApiReferralUserCustomizationV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetApiReferralUserCustomizationV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BinanceLinkAPIService.GetApiReferralUserCustomizationV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fapi/v1/apiReferral/userCustomization"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.brokerId == nil {
		return localVarReturnValue, nil, reportError("brokerId is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "brokerId", r.brokerId, "form", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetIncomeV1Request struct {
	ctx context.Context
	ApiService *BinanceLinkAPIService
	timestamp *int64
	symbol *string
	incomeType *string
	startTime *int64
	endTime *int64
	limit *int32
	recvWindow *int64
}

func (r ApiGetIncomeV1Request) Timestamp(timestamp int64) ApiGetIncomeV1Request {
	r.timestamp = &timestamp
	return r
}

func (r ApiGetIncomeV1Request) Symbol(symbol string) ApiGetIncomeV1Request {
	r.symbol = &symbol
	return r
}

// &amp;#34;TRANSFER&amp;#34;，&amp;#34;WELCOME_BONUS&amp;#34;, &amp;#34;REALIZED_PNL&amp;#34;，&amp;#34;FUNDING_FEE&amp;#34;, &amp;#34;COMMISSION&amp;#34;, and &amp;#34;INSURANCE_CLEAR&amp;#34;
func (r ApiGetIncomeV1Request) IncomeType(incomeType string) ApiGetIncomeV1Request {
	r.incomeType = &incomeType
	return r
}

// Timestamp in ms to get funding from INCLUSIVE.
func (r ApiGetIncomeV1Request) StartTime(startTime int64) ApiGetIncomeV1Request {
	r.startTime = &startTime
	return r
}

// Timestamp in ms to get funding until INCLUSIVE.
func (r ApiGetIncomeV1Request) EndTime(endTime int64) ApiGetIncomeV1Request {
	r.endTime = &endTime
	return r
}

// Default 100; max 1000
func (r ApiGetIncomeV1Request) Limit(limit int32) ApiGetIncomeV1Request {
	r.limit = &limit
	return r
}

func (r ApiGetIncomeV1Request) RecvWindow(recvWindow int64) ApiGetIncomeV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiGetIncomeV1Request) Execute() ([]GetIncomeV1RespItem, *http.Response, error) {
	return r.ApiService.GetIncomeV1Execute(r)
}

/*
GetIncomeV1 Get Income History(USER DATA)

- If incomeType  is not sent, all kinds of flow will be returned
- If startTime and endTime are not sent, the most recent limit datas will be returned.
- If the number of data between startTime and endTime is larger than limit, response will be return as startTime + limit.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetIncomeV1Request
*/
func (a *BinanceLinkAPIService) GetIncomeV1(ctx context.Context) ApiGetIncomeV1Request {
	return ApiGetIncomeV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []GetIncomeV1RespItem
func (a *BinanceLinkAPIService) GetIncomeV1Execute(r ApiGetIncomeV1Request) ([]GetIncomeV1RespItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetIncomeV1RespItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BinanceLinkAPIService.GetIncomeV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fapi/v1/income"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.symbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "symbol", r.symbol, "form", "")
	} else {
		var defaultValue string = ""
		r.symbol = &defaultValue
	}
	if r.incomeType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incomeType", r.incomeType, "form", "")
	} else {
		var defaultValue string = ""
		r.incomeType = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

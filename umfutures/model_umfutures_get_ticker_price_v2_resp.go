/*
Binance USD-M Futures API

OpenAPI specification for Binance exchange - Umfutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package umfutures

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UmfuturesGetTickerPriceV2Resp - struct for UmfuturesGetTickerPriceV2Resp
type UmfuturesGetTickerPriceV2Resp struct {
	UmfuturesGetTickerPriceV2RespItem *UmfuturesGetTickerPriceV2RespItem
	ArrayOfUmfuturesGetTickerPriceV2RespItem *[]UmfuturesGetTickerPriceV2RespItem
}

// UmfuturesGetTickerPriceV2RespItemAsUmfuturesGetTickerPriceV2Resp is a convenience function that returns UmfuturesGetTickerPriceV2RespItem wrapped in UmfuturesGetTickerPriceV2Resp
func UmfuturesGetTickerPriceV2RespItemAsUmfuturesGetTickerPriceV2Resp(v *UmfuturesGetTickerPriceV2RespItem) UmfuturesGetTickerPriceV2Resp {
	return UmfuturesGetTickerPriceV2Resp{
		UmfuturesGetTickerPriceV2RespItem: v,
	}
}

// []UmfuturesGetTickerPriceV2RespItemAsUmfuturesGetTickerPriceV2Resp is a convenience function that returns []UmfuturesGetTickerPriceV2RespItem wrapped in UmfuturesGetTickerPriceV2Resp
func ArrayOfUmfuturesGetTickerPriceV2RespItemAsUmfuturesGetTickerPriceV2Resp(v *[]UmfuturesGetTickerPriceV2RespItem) UmfuturesGetTickerPriceV2Resp {
	return UmfuturesGetTickerPriceV2Resp{
		ArrayOfUmfuturesGetTickerPriceV2RespItem: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UmfuturesGetTickerPriceV2Resp) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UmfuturesGetTickerPriceV2RespItem
	err = newStrictDecoder(data).Decode(&dst.UmfuturesGetTickerPriceV2RespItem)
	if err == nil {
		jsonUmfuturesGetTickerPriceV2RespItem, _ := json.Marshal(dst.UmfuturesGetTickerPriceV2RespItem)
		if string(jsonUmfuturesGetTickerPriceV2RespItem) == "{}" { // empty struct
			dst.UmfuturesGetTickerPriceV2RespItem = nil
		} else {
			if err = validator.Validate(dst.UmfuturesGetTickerPriceV2RespItem); err != nil {
				dst.UmfuturesGetTickerPriceV2RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.UmfuturesGetTickerPriceV2RespItem = nil
	}

	// try to unmarshal data into ArrayOfUmfuturesGetTickerPriceV2RespItem
	err = newStrictDecoder(data).Decode(&dst.ArrayOfUmfuturesGetTickerPriceV2RespItem)
	if err == nil {
		jsonArrayOfUmfuturesGetTickerPriceV2RespItem, _ := json.Marshal(dst.ArrayOfUmfuturesGetTickerPriceV2RespItem)
		if string(jsonArrayOfUmfuturesGetTickerPriceV2RespItem) == "{}" { // empty struct
			dst.ArrayOfUmfuturesGetTickerPriceV2RespItem = nil
		} else {
			if err = validator.Validate(dst.ArrayOfUmfuturesGetTickerPriceV2RespItem); err != nil {
				dst.ArrayOfUmfuturesGetTickerPriceV2RespItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfUmfuturesGetTickerPriceV2RespItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UmfuturesGetTickerPriceV2RespItem = nil
		dst.ArrayOfUmfuturesGetTickerPriceV2RespItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UmfuturesGetTickerPriceV2Resp)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UmfuturesGetTickerPriceV2Resp)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UmfuturesGetTickerPriceV2Resp) MarshalJSON() ([]byte, error) {
	if src.UmfuturesGetTickerPriceV2RespItem != nil {
		return json.Marshal(&src.UmfuturesGetTickerPriceV2RespItem)
	}

	if src.ArrayOfUmfuturesGetTickerPriceV2RespItem != nil {
		return json.Marshal(&src.ArrayOfUmfuturesGetTickerPriceV2RespItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UmfuturesGetTickerPriceV2Resp) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.UmfuturesGetTickerPriceV2RespItem != nil {
		return obj.UmfuturesGetTickerPriceV2RespItem
	}

	if obj.ArrayOfUmfuturesGetTickerPriceV2RespItem != nil {
		return obj.ArrayOfUmfuturesGetTickerPriceV2RespItem
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UmfuturesGetTickerPriceV2Resp) GetActualInstanceValue() (interface{}) {
	if obj.UmfuturesGetTickerPriceV2RespItem != nil {
		return *obj.UmfuturesGetTickerPriceV2RespItem
	}

	if obj.ArrayOfUmfuturesGetTickerPriceV2RespItem != nil {
		return *obj.ArrayOfUmfuturesGetTickerPriceV2RespItem
	}

	// all schemas are nil
	return nil
}

type NullableUmfuturesGetTickerPriceV2Resp struct {
	value *UmfuturesGetTickerPriceV2Resp
	isSet bool
}

func (v NullableUmfuturesGetTickerPriceV2Resp) Get() *UmfuturesGetTickerPriceV2Resp {
	return v.value
}

func (v *NullableUmfuturesGetTickerPriceV2Resp) Set(val *UmfuturesGetTickerPriceV2Resp) {
	v.value = val
	v.isSet = true
}

func (v NullableUmfuturesGetTickerPriceV2Resp) IsSet() bool {
	return v.isSet
}

func (v *NullableUmfuturesGetTickerPriceV2Resp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUmfuturesGetTickerPriceV2Resp(val *UmfuturesGetTickerPriceV2Resp) *NullableUmfuturesGetTickerPriceV2Resp {
	return &NullableUmfuturesGetTickerPriceV2Resp{value: val, isSet: true}
}

func (v NullableUmfuturesGetTickerPriceV2Resp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUmfuturesGetTickerPriceV2Resp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



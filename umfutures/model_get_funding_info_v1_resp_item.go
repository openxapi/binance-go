/*
Binance USD-M Futures API

OpenAPI specification for Binance exchange - Umfutures API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package umfutures

import (
	"encoding/json"
)

// checks if the GetFundingInfoV1RespItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetFundingInfoV1RespItem{}

// GetFundingInfoV1RespItem struct for GetFundingInfoV1RespItem
type GetFundingInfoV1RespItem struct {
	AdjustedFundingRateCap *string `json:"adjustedFundingRateCap,omitempty"`
	AdjustedFundingRateFloor *string `json:"adjustedFundingRateFloor,omitempty"`
	Disclaimer *bool `json:"disclaimer,omitempty"`
	FundingIntervalHours *int32 `json:"fundingIntervalHours,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
}

// NewGetFundingInfoV1RespItem instantiates a new GetFundingInfoV1RespItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetFundingInfoV1RespItem() *GetFundingInfoV1RespItem {
	this := GetFundingInfoV1RespItem{}
	return &this
}

// NewGetFundingInfoV1RespItemWithDefaults instantiates a new GetFundingInfoV1RespItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetFundingInfoV1RespItemWithDefaults() *GetFundingInfoV1RespItem {
	this := GetFundingInfoV1RespItem{}
	return &this
}

// GetAdjustedFundingRateCap returns the AdjustedFundingRateCap field value if set, zero value otherwise.
func (o *GetFundingInfoV1RespItem) GetAdjustedFundingRateCap() string {
	if o == nil || IsNil(o.AdjustedFundingRateCap) {
		var ret string
		return ret
	}
	return *o.AdjustedFundingRateCap
}

// GetAdjustedFundingRateCapOk returns a tuple with the AdjustedFundingRateCap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetFundingInfoV1RespItem) GetAdjustedFundingRateCapOk() (*string, bool) {
	if o == nil || IsNil(o.AdjustedFundingRateCap) {
		return nil, false
	}
	return o.AdjustedFundingRateCap, true
}

// HasAdjustedFundingRateCap returns a boolean if a field has been set.
func (o *GetFundingInfoV1RespItem) HasAdjustedFundingRateCap() bool {
	if o != nil && !IsNil(o.AdjustedFundingRateCap) {
		return true
	}

	return false
}

// SetAdjustedFundingRateCap gets a reference to the given string and assigns it to the AdjustedFundingRateCap field.
func (o *GetFundingInfoV1RespItem) SetAdjustedFundingRateCap(v string) {
	o.AdjustedFundingRateCap = &v
}

// GetAdjustedFundingRateFloor returns the AdjustedFundingRateFloor field value if set, zero value otherwise.
func (o *GetFundingInfoV1RespItem) GetAdjustedFundingRateFloor() string {
	if o == nil || IsNil(o.AdjustedFundingRateFloor) {
		var ret string
		return ret
	}
	return *o.AdjustedFundingRateFloor
}

// GetAdjustedFundingRateFloorOk returns a tuple with the AdjustedFundingRateFloor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetFundingInfoV1RespItem) GetAdjustedFundingRateFloorOk() (*string, bool) {
	if o == nil || IsNil(o.AdjustedFundingRateFloor) {
		return nil, false
	}
	return o.AdjustedFundingRateFloor, true
}

// HasAdjustedFundingRateFloor returns a boolean if a field has been set.
func (o *GetFundingInfoV1RespItem) HasAdjustedFundingRateFloor() bool {
	if o != nil && !IsNil(o.AdjustedFundingRateFloor) {
		return true
	}

	return false
}

// SetAdjustedFundingRateFloor gets a reference to the given string and assigns it to the AdjustedFundingRateFloor field.
func (o *GetFundingInfoV1RespItem) SetAdjustedFundingRateFloor(v string) {
	o.AdjustedFundingRateFloor = &v
}

// GetDisclaimer returns the Disclaimer field value if set, zero value otherwise.
func (o *GetFundingInfoV1RespItem) GetDisclaimer() bool {
	if o == nil || IsNil(o.Disclaimer) {
		var ret bool
		return ret
	}
	return *o.Disclaimer
}

// GetDisclaimerOk returns a tuple with the Disclaimer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetFundingInfoV1RespItem) GetDisclaimerOk() (*bool, bool) {
	if o == nil || IsNil(o.Disclaimer) {
		return nil, false
	}
	return o.Disclaimer, true
}

// HasDisclaimer returns a boolean if a field has been set.
func (o *GetFundingInfoV1RespItem) HasDisclaimer() bool {
	if o != nil && !IsNil(o.Disclaimer) {
		return true
	}

	return false
}

// SetDisclaimer gets a reference to the given bool and assigns it to the Disclaimer field.
func (o *GetFundingInfoV1RespItem) SetDisclaimer(v bool) {
	o.Disclaimer = &v
}

// GetFundingIntervalHours returns the FundingIntervalHours field value if set, zero value otherwise.
func (o *GetFundingInfoV1RespItem) GetFundingIntervalHours() int32 {
	if o == nil || IsNil(o.FundingIntervalHours) {
		var ret int32
		return ret
	}
	return *o.FundingIntervalHours
}

// GetFundingIntervalHoursOk returns a tuple with the FundingIntervalHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetFundingInfoV1RespItem) GetFundingIntervalHoursOk() (*int32, bool) {
	if o == nil || IsNil(o.FundingIntervalHours) {
		return nil, false
	}
	return o.FundingIntervalHours, true
}

// HasFundingIntervalHours returns a boolean if a field has been set.
func (o *GetFundingInfoV1RespItem) HasFundingIntervalHours() bool {
	if o != nil && !IsNil(o.FundingIntervalHours) {
		return true
	}

	return false
}

// SetFundingIntervalHours gets a reference to the given int32 and assigns it to the FundingIntervalHours field.
func (o *GetFundingInfoV1RespItem) SetFundingIntervalHours(v int32) {
	o.FundingIntervalHours = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *GetFundingInfoV1RespItem) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetFundingInfoV1RespItem) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *GetFundingInfoV1RespItem) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *GetFundingInfoV1RespItem) SetSymbol(v string) {
	o.Symbol = &v
}

func (o GetFundingInfoV1RespItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetFundingInfoV1RespItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdjustedFundingRateCap) {
		toSerialize["adjustedFundingRateCap"] = o.AdjustedFundingRateCap
	}
	if !IsNil(o.AdjustedFundingRateFloor) {
		toSerialize["adjustedFundingRateFloor"] = o.AdjustedFundingRateFloor
	}
	if !IsNil(o.Disclaimer) {
		toSerialize["disclaimer"] = o.Disclaimer
	}
	if !IsNil(o.FundingIntervalHours) {
		toSerialize["fundingIntervalHours"] = o.FundingIntervalHours
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	return toSerialize, nil
}

type NullableGetFundingInfoV1RespItem struct {
	value *GetFundingInfoV1RespItem
	isSet bool
}

func (v NullableGetFundingInfoV1RespItem) Get() *GetFundingInfoV1RespItem {
	return v.value
}

func (v *NullableGetFundingInfoV1RespItem) Set(val *GetFundingInfoV1RespItem) {
	v.value = val
	v.isSet = true
}

func (v NullableGetFundingInfoV1RespItem) IsSet() bool {
	return v.isSet
}

func (v *NullableGetFundingInfoV1RespItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetFundingInfoV1RespItem(val *GetFundingInfoV1RespItem) *NullableGetFundingInfoV1RespItem {
	return &NullableGetFundingInfoV1RespItem{value: val, isSet: true}
}

func (v NullableGetFundingInfoV1RespItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetFundingInfoV1RespItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Binance Algo API

OpenAPI specification for Binance cryptocurrency exchange - Algo API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package algo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// FutureAlgoAPIService FutureAlgoAPI service
type FutureAlgoAPIService service

type FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request struct {
	ctx context.Context
	ApiService *FutureAlgoAPIService
	duration *int64
	quantity *string
	side *string
	symbol *string
	timestamp *int64
	clientAlgoId *string
	limitPrice *string
	positionSide *string
	recvWindow *int64
	reduceOnly *bool
}

func (r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request) Duration(duration int64) FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request {
	r.duration = &duration
	return r
}

func (r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request) Quantity(quantity string) FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request {
	r.quantity = &quantity
	return r
}

func (r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request) Side(side string) FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request {
	r.side = &side
	return r
}

func (r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request) Symbol(symbol string) FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request {
	r.symbol = &symbol
	return r
}

func (r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request) Timestamp(timestamp int64) FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request {
	r.timestamp = &timestamp
	return r
}

func (r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request) ClientAlgoId(clientAlgoId string) FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request {
	r.clientAlgoId = &clientAlgoId
	return r
}

func (r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request) LimitPrice(limitPrice string) FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request {
	r.limitPrice = &limitPrice
	return r
}

func (r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request) PositionSide(positionSide string) FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request {
	r.positionSide = &positionSide
	return r
}

func (r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request) RecvWindow(recvWindow int64) FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request) ReduceOnly(reduceOnly bool) FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request {
	r.reduceOnly = &reduceOnly
	return r
}

func (r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request) Execute() (*AlgoCreateAlgoFuturesNewOrderTwapV1Resp, *http.Response, error) {
	return r.ApiService.AlgoCreateAlgoFuturesNewOrderTwapV1Execute(r)
}

/*
AlgoCreateAlgoFuturesNewOrderTwapV1 Time-Weighted Average Price(Twap) New Order(TRADE)

Send in a Twap new order.
Only support on USDâ“ˆ-M Contracts.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request
*/
func (a *FutureAlgoAPIService) AlgoCreateAlgoFuturesNewOrderTwapV1(ctx context.Context) FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request {
	return FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlgoCreateAlgoFuturesNewOrderTwapV1Resp
func (a *FutureAlgoAPIService) AlgoCreateAlgoFuturesNewOrderTwapV1Execute(r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderTwapV1Request) (*AlgoCreateAlgoFuturesNewOrderTwapV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlgoCreateAlgoFuturesNewOrderTwapV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FutureAlgoAPIService.AlgoCreateAlgoFuturesNewOrderTwapV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/algo/futures/newOrderTwap"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.duration == nil {
		return localVarReturnValue, nil, reportError("duration is required and must be specified")
	}
	if r.quantity == nil {
		return localVarReturnValue, nil, reportError("quantity is required and must be specified")
	}
	if r.side == nil {
		return localVarReturnValue, nil, reportError("side is required and must be specified")
	}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientAlgoId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "clientAlgoId", r.clientAlgoId, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "duration", r.duration, "", "")
	if r.limitPrice != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "limitPrice", r.limitPrice, "", "")
	}
	if r.positionSide != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "positionSide", r.positionSide, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "quantity", r.quantity, "", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	if r.reduceOnly != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "reduceOnly", r.reduceOnly, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "side", r.side, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "symbol", r.symbol, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request struct {
	ctx context.Context
	ApiService *FutureAlgoAPIService
	quantity *string
	side *string
	symbol *string
	timestamp *int64
	urgency *string
	clientAlgoId *string
	limitPrice *string
	positionSide *string
	recvWindow *int64
	reduceOnly *bool
}

func (r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request) Quantity(quantity string) FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request {
	r.quantity = &quantity
	return r
}

func (r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request) Side(side string) FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request {
	r.side = &side
	return r
}

func (r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request) Symbol(symbol string) FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request {
	r.symbol = &symbol
	return r
}

func (r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request) Timestamp(timestamp int64) FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request {
	r.timestamp = &timestamp
	return r
}

func (r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request) Urgency(urgency string) FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request {
	r.urgency = &urgency
	return r
}

func (r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request) ClientAlgoId(clientAlgoId string) FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request {
	r.clientAlgoId = &clientAlgoId
	return r
}

func (r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request) LimitPrice(limitPrice string) FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request {
	r.limitPrice = &limitPrice
	return r
}

func (r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request) PositionSide(positionSide string) FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request {
	r.positionSide = &positionSide
	return r
}

func (r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request) RecvWindow(recvWindow int64) FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request) ReduceOnly(reduceOnly bool) FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request {
	r.reduceOnly = &reduceOnly
	return r
}

func (r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request) Execute() (*AlgoCreateAlgoFuturesNewOrderVpV1Resp, *http.Response, error) {
	return r.ApiService.AlgoCreateAlgoFuturesNewOrderVpV1Execute(r)
}

/*
AlgoCreateAlgoFuturesNewOrderVpV1 Volume Participation(VP) New Order (TRADE)

Send in a VP new order.
Only support on USDâ“ˆ-M Contracts.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request
*/
func (a *FutureAlgoAPIService) AlgoCreateAlgoFuturesNewOrderVpV1(ctx context.Context) FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request {
	return FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlgoCreateAlgoFuturesNewOrderVpV1Resp
func (a *FutureAlgoAPIService) AlgoCreateAlgoFuturesNewOrderVpV1Execute(r FutureAlgoAPIAlgoCreateAlgoFuturesNewOrderVpV1Request) (*AlgoCreateAlgoFuturesNewOrderVpV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlgoCreateAlgoFuturesNewOrderVpV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FutureAlgoAPIService.AlgoCreateAlgoFuturesNewOrderVpV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/algo/futures/newOrderVp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.quantity == nil {
		return localVarReturnValue, nil, reportError("quantity is required and must be specified")
	}
	if r.side == nil {
		return localVarReturnValue, nil, reportError("side is required and must be specified")
	}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}
	if r.urgency == nil {
		return localVarReturnValue, nil, reportError("urgency is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientAlgoId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "clientAlgoId", r.clientAlgoId, "", "")
	}
	if r.limitPrice != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "limitPrice", r.limitPrice, "", "")
	}
	if r.positionSide != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "positionSide", r.positionSide, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "quantity", r.quantity, "", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recvWindow", r.recvWindow, "", "")
	}
	if r.reduceOnly != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "reduceOnly", r.reduceOnly, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "side", r.side, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "symbol", r.symbol, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "urgency", r.urgency, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FutureAlgoAPIAlgoDeleteAlgoFuturesOrderV1Request struct {
	ctx context.Context
	ApiService *FutureAlgoAPIService
	algoId *int64
	timestamp *int64
	recvWindow *int64
}

// eg. 14511
func (r FutureAlgoAPIAlgoDeleteAlgoFuturesOrderV1Request) AlgoId(algoId int64) FutureAlgoAPIAlgoDeleteAlgoFuturesOrderV1Request {
	r.algoId = &algoId
	return r
}

func (r FutureAlgoAPIAlgoDeleteAlgoFuturesOrderV1Request) Timestamp(timestamp int64) FutureAlgoAPIAlgoDeleteAlgoFuturesOrderV1Request {
	r.timestamp = &timestamp
	return r
}

func (r FutureAlgoAPIAlgoDeleteAlgoFuturesOrderV1Request) RecvWindow(recvWindow int64) FutureAlgoAPIAlgoDeleteAlgoFuturesOrderV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r FutureAlgoAPIAlgoDeleteAlgoFuturesOrderV1Request) Execute() (*AlgoDeleteAlgoFuturesOrderV1Resp, *http.Response, error) {
	return r.ApiService.AlgoDeleteAlgoFuturesOrderV1Execute(r)
}

/*
AlgoDeleteAlgoFuturesOrderV1 Cancel Algo Order(TRADE)

Cancel an active order.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FutureAlgoAPIAlgoDeleteAlgoFuturesOrderV1Request
*/
func (a *FutureAlgoAPIService) AlgoDeleteAlgoFuturesOrderV1(ctx context.Context) FutureAlgoAPIAlgoDeleteAlgoFuturesOrderV1Request {
	return FutureAlgoAPIAlgoDeleteAlgoFuturesOrderV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlgoDeleteAlgoFuturesOrderV1Resp
func (a *FutureAlgoAPIService) AlgoDeleteAlgoFuturesOrderV1Execute(r FutureAlgoAPIAlgoDeleteAlgoFuturesOrderV1Request) (*AlgoDeleteAlgoFuturesOrderV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlgoDeleteAlgoFuturesOrderV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FutureAlgoAPIService.AlgoDeleteAlgoFuturesOrderV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/algo/futures/order"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.algoId == nil {
		return localVarReturnValue, nil, reportError("algoId is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "algoId", r.algoId, "form", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FutureAlgoAPIAlgoGetAlgoFuturesHistoricalOrdersV1Request struct {
	ctx context.Context
	ApiService *FutureAlgoAPIService
	timestamp *int64
	symbol *string
	side *string
	startTime *int64
	endTime *int64
	page *int32
	pageSize *int32
	recvWindow *int64
}

func (r FutureAlgoAPIAlgoGetAlgoFuturesHistoricalOrdersV1Request) Timestamp(timestamp int64) FutureAlgoAPIAlgoGetAlgoFuturesHistoricalOrdersV1Request {
	r.timestamp = &timestamp
	return r
}

// Trading symbol eg. BTCUSDT
func (r FutureAlgoAPIAlgoGetAlgoFuturesHistoricalOrdersV1Request) Symbol(symbol string) FutureAlgoAPIAlgoGetAlgoFuturesHistoricalOrdersV1Request {
	r.symbol = &symbol
	return r
}

// BUY or SELL
func (r FutureAlgoAPIAlgoGetAlgoFuturesHistoricalOrdersV1Request) Side(side string) FutureAlgoAPIAlgoGetAlgoFuturesHistoricalOrdersV1Request {
	r.side = &side
	return r
}

// in milliseconds  eg.1641522717552
func (r FutureAlgoAPIAlgoGetAlgoFuturesHistoricalOrdersV1Request) StartTime(startTime int64) FutureAlgoAPIAlgoGetAlgoFuturesHistoricalOrdersV1Request {
	r.startTime = &startTime
	return r
}

// in milliseconds  eg.1641522526562
func (r FutureAlgoAPIAlgoGetAlgoFuturesHistoricalOrdersV1Request) EndTime(endTime int64) FutureAlgoAPIAlgoGetAlgoFuturesHistoricalOrdersV1Request {
	r.endTime = &endTime
	return r
}

// Default is 1
func (r FutureAlgoAPIAlgoGetAlgoFuturesHistoricalOrdersV1Request) Page(page int32) FutureAlgoAPIAlgoGetAlgoFuturesHistoricalOrdersV1Request {
	r.page = &page
	return r
}

// MIN 1, MAX 100; Default 100
func (r FutureAlgoAPIAlgoGetAlgoFuturesHistoricalOrdersV1Request) PageSize(pageSize int32) FutureAlgoAPIAlgoGetAlgoFuturesHistoricalOrdersV1Request {
	r.pageSize = &pageSize
	return r
}

func (r FutureAlgoAPIAlgoGetAlgoFuturesHistoricalOrdersV1Request) RecvWindow(recvWindow int64) FutureAlgoAPIAlgoGetAlgoFuturesHistoricalOrdersV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r FutureAlgoAPIAlgoGetAlgoFuturesHistoricalOrdersV1Request) Execute() (*AlgoGetAlgoFuturesHistoricalOrdersV1Resp, *http.Response, error) {
	return r.ApiService.AlgoGetAlgoFuturesHistoricalOrdersV1Execute(r)
}

/*
AlgoGetAlgoFuturesHistoricalOrdersV1 Query Historical Algo Orders(USER_DATA)

Query Historical Algo Order

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FutureAlgoAPIAlgoGetAlgoFuturesHistoricalOrdersV1Request
*/
func (a *FutureAlgoAPIService) AlgoGetAlgoFuturesHistoricalOrdersV1(ctx context.Context) FutureAlgoAPIAlgoGetAlgoFuturesHistoricalOrdersV1Request {
	return FutureAlgoAPIAlgoGetAlgoFuturesHistoricalOrdersV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlgoGetAlgoFuturesHistoricalOrdersV1Resp
func (a *FutureAlgoAPIService) AlgoGetAlgoFuturesHistoricalOrdersV1Execute(r FutureAlgoAPIAlgoGetAlgoFuturesHistoricalOrdersV1Request) (*AlgoGetAlgoFuturesHistoricalOrdersV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlgoGetAlgoFuturesHistoricalOrdersV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FutureAlgoAPIService.AlgoGetAlgoFuturesHistoricalOrdersV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/algo/futures/historicalOrders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.symbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "symbol", r.symbol, "form", "")
	} else {
		var defaultValue string = ""
		r.symbol = &defaultValue
	}
	if r.side != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "side", r.side, "form", "")
	} else {
		var defaultValue string = ""
		r.side = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FutureAlgoAPIAlgoGetAlgoFuturesOpenOrdersV1Request struct {
	ctx context.Context
	ApiService *FutureAlgoAPIService
	timestamp *int64
	recvWindow *int64
}

func (r FutureAlgoAPIAlgoGetAlgoFuturesOpenOrdersV1Request) Timestamp(timestamp int64) FutureAlgoAPIAlgoGetAlgoFuturesOpenOrdersV1Request {
	r.timestamp = &timestamp
	return r
}

func (r FutureAlgoAPIAlgoGetAlgoFuturesOpenOrdersV1Request) RecvWindow(recvWindow int64) FutureAlgoAPIAlgoGetAlgoFuturesOpenOrdersV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r FutureAlgoAPIAlgoGetAlgoFuturesOpenOrdersV1Request) Execute() (*AlgoGetAlgoFuturesOpenOrdersV1Resp, *http.Response, error) {
	return r.ApiService.AlgoGetAlgoFuturesOpenOrdersV1Execute(r)
}

/*
AlgoGetAlgoFuturesOpenOrdersV1 Query Current Algo Open Orders(USER_DATA)

Query Current Algo Open Orders

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FutureAlgoAPIAlgoGetAlgoFuturesOpenOrdersV1Request
*/
func (a *FutureAlgoAPIService) AlgoGetAlgoFuturesOpenOrdersV1(ctx context.Context) FutureAlgoAPIAlgoGetAlgoFuturesOpenOrdersV1Request {
	return FutureAlgoAPIAlgoGetAlgoFuturesOpenOrdersV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlgoGetAlgoFuturesOpenOrdersV1Resp
func (a *FutureAlgoAPIService) AlgoGetAlgoFuturesOpenOrdersV1Execute(r FutureAlgoAPIAlgoGetAlgoFuturesOpenOrdersV1Request) (*AlgoGetAlgoFuturesOpenOrdersV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlgoGetAlgoFuturesOpenOrdersV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FutureAlgoAPIService.AlgoGetAlgoFuturesOpenOrdersV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/algo/futures/openOrders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FutureAlgoAPIAlgoGetAlgoFuturesSubOrdersV1Request struct {
	ctx context.Context
	ApiService *FutureAlgoAPIService
	algoId *int64
	timestamp *int64
	page *int32
	pageSize *int32
	recvWindow *int64
}

func (r FutureAlgoAPIAlgoGetAlgoFuturesSubOrdersV1Request) AlgoId(algoId int64) FutureAlgoAPIAlgoGetAlgoFuturesSubOrdersV1Request {
	r.algoId = &algoId
	return r
}

func (r FutureAlgoAPIAlgoGetAlgoFuturesSubOrdersV1Request) Timestamp(timestamp int64) FutureAlgoAPIAlgoGetAlgoFuturesSubOrdersV1Request {
	r.timestamp = &timestamp
	return r
}

// Default is 1
func (r FutureAlgoAPIAlgoGetAlgoFuturesSubOrdersV1Request) Page(page int32) FutureAlgoAPIAlgoGetAlgoFuturesSubOrdersV1Request {
	r.page = &page
	return r
}

// MIN 1, MAX 100; Default 100
func (r FutureAlgoAPIAlgoGetAlgoFuturesSubOrdersV1Request) PageSize(pageSize int32) FutureAlgoAPIAlgoGetAlgoFuturesSubOrdersV1Request {
	r.pageSize = &pageSize
	return r
}

func (r FutureAlgoAPIAlgoGetAlgoFuturesSubOrdersV1Request) RecvWindow(recvWindow int64) FutureAlgoAPIAlgoGetAlgoFuturesSubOrdersV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r FutureAlgoAPIAlgoGetAlgoFuturesSubOrdersV1Request) Execute() (*AlgoGetAlgoFuturesSubOrdersV1Resp, *http.Response, error) {
	return r.ApiService.AlgoGetAlgoFuturesSubOrdersV1Execute(r)
}

/*
AlgoGetAlgoFuturesSubOrdersV1 Query Sub Orders(USER_DATA)

Get respective sub orders for a specified algoId

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FutureAlgoAPIAlgoGetAlgoFuturesSubOrdersV1Request
*/
func (a *FutureAlgoAPIService) AlgoGetAlgoFuturesSubOrdersV1(ctx context.Context) FutureAlgoAPIAlgoGetAlgoFuturesSubOrdersV1Request {
	return FutureAlgoAPIAlgoGetAlgoFuturesSubOrdersV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlgoGetAlgoFuturesSubOrdersV1Resp
func (a *FutureAlgoAPIService) AlgoGetAlgoFuturesSubOrdersV1Execute(r FutureAlgoAPIAlgoGetAlgoFuturesSubOrdersV1Request) (*AlgoGetAlgoFuturesSubOrdersV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlgoGetAlgoFuturesSubOrdersV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FutureAlgoAPIService.AlgoGetAlgoFuturesSubOrdersV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/algo/futures/subOrders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.algoId == nil {
		return localVarReturnValue, nil, reportError("algoId is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "algoId", r.algoId, "form", "")
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

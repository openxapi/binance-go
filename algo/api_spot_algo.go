/*
Binance Algo API

OpenAPI specification for Binance cryptocurrency exchange - Algo API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package algo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// SpotAlgoAPIService SpotAlgoAPI service
type SpotAlgoAPIService service

type SpotAlgoAPIAlgoCreateAlgoSpotNewOrderTwapV1Request struct {
	ctx context.Context
	ApiService *SpotAlgoAPIService
	duration *int64
	quantity *string
	side *string
	symbol *string
	timestamp *int64
	clientAlgoId *string
	limitPrice *string
}

func (r SpotAlgoAPIAlgoCreateAlgoSpotNewOrderTwapV1Request) Duration(duration int64) SpotAlgoAPIAlgoCreateAlgoSpotNewOrderTwapV1Request {
	r.duration = &duration
	return r
}

func (r SpotAlgoAPIAlgoCreateAlgoSpotNewOrderTwapV1Request) Quantity(quantity string) SpotAlgoAPIAlgoCreateAlgoSpotNewOrderTwapV1Request {
	r.quantity = &quantity
	return r
}

func (r SpotAlgoAPIAlgoCreateAlgoSpotNewOrderTwapV1Request) Side(side string) SpotAlgoAPIAlgoCreateAlgoSpotNewOrderTwapV1Request {
	r.side = &side
	return r
}

func (r SpotAlgoAPIAlgoCreateAlgoSpotNewOrderTwapV1Request) Symbol(symbol string) SpotAlgoAPIAlgoCreateAlgoSpotNewOrderTwapV1Request {
	r.symbol = &symbol
	return r
}

func (r SpotAlgoAPIAlgoCreateAlgoSpotNewOrderTwapV1Request) Timestamp(timestamp int64) SpotAlgoAPIAlgoCreateAlgoSpotNewOrderTwapV1Request {
	r.timestamp = &timestamp
	return r
}

func (r SpotAlgoAPIAlgoCreateAlgoSpotNewOrderTwapV1Request) ClientAlgoId(clientAlgoId string) SpotAlgoAPIAlgoCreateAlgoSpotNewOrderTwapV1Request {
	r.clientAlgoId = &clientAlgoId
	return r
}

func (r SpotAlgoAPIAlgoCreateAlgoSpotNewOrderTwapV1Request) LimitPrice(limitPrice string) SpotAlgoAPIAlgoCreateAlgoSpotNewOrderTwapV1Request {
	r.limitPrice = &limitPrice
	return r
}

func (r SpotAlgoAPIAlgoCreateAlgoSpotNewOrderTwapV1Request) Execute() (*AlgoCreateAlgoSpotNewOrderTwapV1Resp, *http.Response, error) {
	return r.ApiService.AlgoCreateAlgoSpotNewOrderTwapV1Execute(r)
}

/*
AlgoCreateAlgoSpotNewOrderTwapV1 Time-Weighted Average Price(Twap) New Order(TRADE)

Place a new spot TWAP order with Algo service.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SpotAlgoAPIAlgoCreateAlgoSpotNewOrderTwapV1Request
*/
func (a *SpotAlgoAPIService) AlgoCreateAlgoSpotNewOrderTwapV1(ctx context.Context) SpotAlgoAPIAlgoCreateAlgoSpotNewOrderTwapV1Request {
	return SpotAlgoAPIAlgoCreateAlgoSpotNewOrderTwapV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlgoCreateAlgoSpotNewOrderTwapV1Resp
func (a *SpotAlgoAPIService) AlgoCreateAlgoSpotNewOrderTwapV1Execute(r SpotAlgoAPIAlgoCreateAlgoSpotNewOrderTwapV1Request) (*AlgoCreateAlgoSpotNewOrderTwapV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlgoCreateAlgoSpotNewOrderTwapV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpotAlgoAPIService.AlgoCreateAlgoSpotNewOrderTwapV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/algo/spot/newOrderTwap"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.duration == nil {
		return localVarReturnValue, nil, reportError("duration is required and must be specified")
	}
	if r.quantity == nil {
		return localVarReturnValue, nil, reportError("quantity is required and must be specified")
	}
	if r.side == nil {
		return localVarReturnValue, nil, reportError("side is required and must be specified")
	}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientAlgoId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "clientAlgoId", r.clientAlgoId, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "duration", r.duration, "", "")
	if r.limitPrice != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "limitPrice", r.limitPrice, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "quantity", r.quantity, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "side", r.side, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "symbol", r.symbol, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SpotAlgoAPIAlgoDeleteAlgoSpotOrderV1Request struct {
	ctx context.Context
	ApiService *SpotAlgoAPIService
	algoId *int64
	timestamp *int64
	recvWindow *int64
}

// eg. 14511
func (r SpotAlgoAPIAlgoDeleteAlgoSpotOrderV1Request) AlgoId(algoId int64) SpotAlgoAPIAlgoDeleteAlgoSpotOrderV1Request {
	r.algoId = &algoId
	return r
}

func (r SpotAlgoAPIAlgoDeleteAlgoSpotOrderV1Request) Timestamp(timestamp int64) SpotAlgoAPIAlgoDeleteAlgoSpotOrderV1Request {
	r.timestamp = &timestamp
	return r
}

func (r SpotAlgoAPIAlgoDeleteAlgoSpotOrderV1Request) RecvWindow(recvWindow int64) SpotAlgoAPIAlgoDeleteAlgoSpotOrderV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r SpotAlgoAPIAlgoDeleteAlgoSpotOrderV1Request) Execute() (*AlgoDeleteAlgoSpotOrderV1Resp, *http.Response, error) {
	return r.ApiService.AlgoDeleteAlgoSpotOrderV1Execute(r)
}

/*
AlgoDeleteAlgoSpotOrderV1 Cancel Algo Order(TRADE)

Cancel an open TWAP order

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SpotAlgoAPIAlgoDeleteAlgoSpotOrderV1Request
*/
func (a *SpotAlgoAPIService) AlgoDeleteAlgoSpotOrderV1(ctx context.Context) SpotAlgoAPIAlgoDeleteAlgoSpotOrderV1Request {
	return SpotAlgoAPIAlgoDeleteAlgoSpotOrderV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlgoDeleteAlgoSpotOrderV1Resp
func (a *SpotAlgoAPIService) AlgoDeleteAlgoSpotOrderV1Execute(r SpotAlgoAPIAlgoDeleteAlgoSpotOrderV1Request) (*AlgoDeleteAlgoSpotOrderV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlgoDeleteAlgoSpotOrderV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpotAlgoAPIService.AlgoDeleteAlgoSpotOrderV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/algo/spot/order"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.algoId == nil {
		return localVarReturnValue, nil, reportError("algoId is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "algoId", r.algoId, "form", "")
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SpotAlgoAPIAlgoGetAlgoSpotHistoricalOrdersV1Request struct {
	ctx context.Context
	ApiService *SpotAlgoAPIService
	timestamp *int64
	symbol *string
	side *string
	startTime *int64
	endTime *int64
	page *int32
	pageSize *int32
	recvWindow *int64
}

func (r SpotAlgoAPIAlgoGetAlgoSpotHistoricalOrdersV1Request) Timestamp(timestamp int64) SpotAlgoAPIAlgoGetAlgoSpotHistoricalOrdersV1Request {
	r.timestamp = &timestamp
	return r
}

// Trading symbol eg. BTCUSDT
func (r SpotAlgoAPIAlgoGetAlgoSpotHistoricalOrdersV1Request) Symbol(symbol string) SpotAlgoAPIAlgoGetAlgoSpotHistoricalOrdersV1Request {
	r.symbol = &symbol
	return r
}

// BUY or SELL
func (r SpotAlgoAPIAlgoGetAlgoSpotHistoricalOrdersV1Request) Side(side string) SpotAlgoAPIAlgoGetAlgoSpotHistoricalOrdersV1Request {
	r.side = &side
	return r
}

// in milliseconds  eg.1641522717552
func (r SpotAlgoAPIAlgoGetAlgoSpotHistoricalOrdersV1Request) StartTime(startTime int64) SpotAlgoAPIAlgoGetAlgoSpotHistoricalOrdersV1Request {
	r.startTime = &startTime
	return r
}

// in milliseconds  eg.1641522526562
func (r SpotAlgoAPIAlgoGetAlgoSpotHistoricalOrdersV1Request) EndTime(endTime int64) SpotAlgoAPIAlgoGetAlgoSpotHistoricalOrdersV1Request {
	r.endTime = &endTime
	return r
}

// Default is 1
func (r SpotAlgoAPIAlgoGetAlgoSpotHistoricalOrdersV1Request) Page(page int32) SpotAlgoAPIAlgoGetAlgoSpotHistoricalOrdersV1Request {
	r.page = &page
	return r
}

// MIN 1, MAX 100; Default 100
func (r SpotAlgoAPIAlgoGetAlgoSpotHistoricalOrdersV1Request) PageSize(pageSize int32) SpotAlgoAPIAlgoGetAlgoSpotHistoricalOrdersV1Request {
	r.pageSize = &pageSize
	return r
}

func (r SpotAlgoAPIAlgoGetAlgoSpotHistoricalOrdersV1Request) RecvWindow(recvWindow int64) SpotAlgoAPIAlgoGetAlgoSpotHistoricalOrdersV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r SpotAlgoAPIAlgoGetAlgoSpotHistoricalOrdersV1Request) Execute() (*AlgoGetAlgoSpotHistoricalOrdersV1Resp, *http.Response, error) {
	return r.ApiService.AlgoGetAlgoSpotHistoricalOrdersV1Execute(r)
}

/*
AlgoGetAlgoSpotHistoricalOrdersV1 Query Historical Algo Orders(USER_DATA)

Get all historical SPOT TWAP orders

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SpotAlgoAPIAlgoGetAlgoSpotHistoricalOrdersV1Request
*/
func (a *SpotAlgoAPIService) AlgoGetAlgoSpotHistoricalOrdersV1(ctx context.Context) SpotAlgoAPIAlgoGetAlgoSpotHistoricalOrdersV1Request {
	return SpotAlgoAPIAlgoGetAlgoSpotHistoricalOrdersV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlgoGetAlgoSpotHistoricalOrdersV1Resp
func (a *SpotAlgoAPIService) AlgoGetAlgoSpotHistoricalOrdersV1Execute(r SpotAlgoAPIAlgoGetAlgoSpotHistoricalOrdersV1Request) (*AlgoGetAlgoSpotHistoricalOrdersV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlgoGetAlgoSpotHistoricalOrdersV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpotAlgoAPIService.AlgoGetAlgoSpotHistoricalOrdersV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/algo/spot/historicalOrders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.symbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "symbol", r.symbol, "form", "")
	} else {
		var defaultValue string = ""
		r.symbol = &defaultValue
	}
	if r.side != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "side", r.side, "form", "")
	} else {
		var defaultValue string = ""
		r.side = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SpotAlgoAPIAlgoGetAlgoSpotOpenOrdersV1Request struct {
	ctx context.Context
	ApiService *SpotAlgoAPIService
	timestamp *int64
	recvWindow *int64
}

func (r SpotAlgoAPIAlgoGetAlgoSpotOpenOrdersV1Request) Timestamp(timestamp int64) SpotAlgoAPIAlgoGetAlgoSpotOpenOrdersV1Request {
	r.timestamp = &timestamp
	return r
}

func (r SpotAlgoAPIAlgoGetAlgoSpotOpenOrdersV1Request) RecvWindow(recvWindow int64) SpotAlgoAPIAlgoGetAlgoSpotOpenOrdersV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r SpotAlgoAPIAlgoGetAlgoSpotOpenOrdersV1Request) Execute() (*AlgoGetAlgoSpotOpenOrdersV1Resp, *http.Response, error) {
	return r.ApiService.AlgoGetAlgoSpotOpenOrdersV1Execute(r)
}

/*
AlgoGetAlgoSpotOpenOrdersV1 Query Current Algo Open Orders(USER_DATA)

Get all open SPOT TWAP orders

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SpotAlgoAPIAlgoGetAlgoSpotOpenOrdersV1Request
*/
func (a *SpotAlgoAPIService) AlgoGetAlgoSpotOpenOrdersV1(ctx context.Context) SpotAlgoAPIAlgoGetAlgoSpotOpenOrdersV1Request {
	return SpotAlgoAPIAlgoGetAlgoSpotOpenOrdersV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlgoGetAlgoSpotOpenOrdersV1Resp
func (a *SpotAlgoAPIService) AlgoGetAlgoSpotOpenOrdersV1Execute(r SpotAlgoAPIAlgoGetAlgoSpotOpenOrdersV1Request) (*AlgoGetAlgoSpotOpenOrdersV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlgoGetAlgoSpotOpenOrdersV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpotAlgoAPIService.AlgoGetAlgoSpotOpenOrdersV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/algo/spot/openOrders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SpotAlgoAPIAlgoGetAlgoSpotSubOrdersV1Request struct {
	ctx context.Context
	ApiService *SpotAlgoAPIService
	algoId *int64
	timestamp *int64
	page *int32
	pageSize *int32
	recvWindow *int64
}

func (r SpotAlgoAPIAlgoGetAlgoSpotSubOrdersV1Request) AlgoId(algoId int64) SpotAlgoAPIAlgoGetAlgoSpotSubOrdersV1Request {
	r.algoId = &algoId
	return r
}

func (r SpotAlgoAPIAlgoGetAlgoSpotSubOrdersV1Request) Timestamp(timestamp int64) SpotAlgoAPIAlgoGetAlgoSpotSubOrdersV1Request {
	r.timestamp = &timestamp
	return r
}

// Default is 1
func (r SpotAlgoAPIAlgoGetAlgoSpotSubOrdersV1Request) Page(page int32) SpotAlgoAPIAlgoGetAlgoSpotSubOrdersV1Request {
	r.page = &page
	return r
}

// MIN 1, MAX 100; Default 100
func (r SpotAlgoAPIAlgoGetAlgoSpotSubOrdersV1Request) PageSize(pageSize int32) SpotAlgoAPIAlgoGetAlgoSpotSubOrdersV1Request {
	r.pageSize = &pageSize
	return r
}

func (r SpotAlgoAPIAlgoGetAlgoSpotSubOrdersV1Request) RecvWindow(recvWindow int64) SpotAlgoAPIAlgoGetAlgoSpotSubOrdersV1Request {
	r.recvWindow = &recvWindow
	return r
}

func (r SpotAlgoAPIAlgoGetAlgoSpotSubOrdersV1Request) Execute() (*AlgoGetAlgoSpotSubOrdersV1Resp, *http.Response, error) {
	return r.ApiService.AlgoGetAlgoSpotSubOrdersV1Execute(r)
}

/*
AlgoGetAlgoSpotSubOrdersV1 Query Sub Orders(USER_DATA)

Get respective sub orders for a specified algoId

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SpotAlgoAPIAlgoGetAlgoSpotSubOrdersV1Request
*/
func (a *SpotAlgoAPIService) AlgoGetAlgoSpotSubOrdersV1(ctx context.Context) SpotAlgoAPIAlgoGetAlgoSpotSubOrdersV1Request {
	return SpotAlgoAPIAlgoGetAlgoSpotSubOrdersV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlgoGetAlgoSpotSubOrdersV1Resp
func (a *SpotAlgoAPIService) AlgoGetAlgoSpotSubOrdersV1Execute(r SpotAlgoAPIAlgoGetAlgoSpotSubOrdersV1Request) (*AlgoGetAlgoSpotSubOrdersV1Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlgoGetAlgoSpotSubOrdersV1Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpotAlgoAPIService.AlgoGetAlgoSpotSubOrdersV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/algo/spot/subOrders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.algoId == nil {
		return localVarReturnValue, nil, reportError("algoId is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "algoId", r.algoId, "form", "")
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.recvWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recvWindow", r.recvWindow, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextBinanceAuth).(Auth); ok {
			localVarHeaderParams["X-MBX-APIKEY"] = auth.APIKey
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

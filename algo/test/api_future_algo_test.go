/*
Binance Algo API

Testing FutureAlgoAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package algo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/openxapi/binance-go/algo"
)

func Test_algo_FutureAlgoAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FutureAlgoAPIService AlgoCreateAlgoFuturesNewOrderTwapV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FutureAlgoAPI.AlgoCreateAlgoFuturesNewOrderTwapV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FutureAlgoAPIService AlgoCreateAlgoFuturesNewOrderVpV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FutureAlgoAPI.AlgoCreateAlgoFuturesNewOrderVpV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FutureAlgoAPIService AlgoDeleteAlgoFuturesOrderV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FutureAlgoAPI.AlgoDeleteAlgoFuturesOrderV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FutureAlgoAPIService AlgoGetAlgoFuturesHistoricalOrdersV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FutureAlgoAPI.AlgoGetAlgoFuturesHistoricalOrdersV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FutureAlgoAPIService AlgoGetAlgoFuturesOpenOrdersV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FutureAlgoAPI.AlgoGetAlgoFuturesOpenOrdersV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FutureAlgoAPIService AlgoGetAlgoFuturesSubOrdersV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FutureAlgoAPI.AlgoGetAlgoFuturesSubOrdersV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
